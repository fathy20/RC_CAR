
RC_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000058ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000058ac  00005940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00800168  00800168  00005a48  2**0
                  ALLOC
  3 .stab         000044b8  00000000  00000000  00005a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a56  00000000  00000000  00009f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  0000b956  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000278  00000000  00000000  0000bb76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002a72  00000000  00000000  0000bdee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000177d  00000000  00000000  0000e860  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015b6  00000000  00000000  0000ffdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00011594  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000361  00000000  00000000  000117d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000df4  00000000  00000000  00011b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012929  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__vector_5>
      18:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 3a       	cpi	r26, 0xAC	; 172
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec ea       	ldi	r30, 0xAC	; 172
      78:	f8 e5       	ldi	r31, 0x58	; 88
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 c0 2b 	call	0x5780	; 0x5780 <main>
      8a:	0c 94 54 2c 	jmp	0x58a8	; 0x58a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
     1bc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__floatundisf>:
     1e8:	a2 e0       	ldi	r26, 0x02	; 2
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 1d 2c 	jmp	0x583a	; 0x583a <__prologue_saves__>
     1f4:	12 2f       	mov	r17, r18
     1f6:	b3 2e       	mov	r11, r19
     1f8:	a4 2e       	mov	r10, r20
     1fa:	95 2e       	mov	r9, r21
     1fc:	86 2e       	mov	r8, r22
     1fe:	37 2e       	mov	r3, r23
     200:	28 2e       	mov	r2, r24
     202:	9a 83       	std	Y+2, r25	; 0x02
     204:	c2 2e       	mov	r12, r18
     206:	d3 2e       	mov	r13, r19
     208:	e4 2e       	mov	r14, r20
     20a:	f5 2e       	mov	r15, r21
     20c:	a7 01       	movw	r20, r14
     20e:	96 01       	movw	r18, r12
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	21 17       	cp	r18, r17
     21a:	a1 f4       	brne	.+40     	; 0x244 <__floatundisf+0x5c>
     21c:	3b 15       	cp	r19, r11
     21e:	91 f4       	brne	.+36     	; 0x244 <__floatundisf+0x5c>
     220:	4a 15       	cp	r20, r10
     222:	81 f4       	brne	.+32     	; 0x244 <__floatundisf+0x5c>
     224:	59 15       	cp	r21, r9
     226:	71 f4       	brne	.+28     	; 0x244 <__floatundisf+0x5c>
     228:	68 15       	cp	r22, r8
     22a:	61 f4       	brne	.+24     	; 0x244 <__floatundisf+0x5c>
     22c:	73 15       	cp	r23, r3
     22e:	51 f4       	brne	.+20     	; 0x244 <__floatundisf+0x5c>
     230:	82 15       	cp	r24, r2
     232:	41 f4       	brne	.+16     	; 0x244 <__floatundisf+0x5c>
     234:	aa 81       	ldd	r26, Y+2	; 0x02
     236:	9a 17       	cp	r25, r26
     238:	29 f4       	brne	.+10     	; 0x244 <__floatundisf+0x5c>
     23a:	c7 01       	movw	r24, r14
     23c:	b6 01       	movw	r22, r12
     23e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
     242:	aa c0       	rjmp	.+340    	; 0x398 <__floatundisf+0x1b0>
     244:	21 2f       	mov	r18, r17
     246:	3b 2d       	mov	r19, r11
     248:	4a 2d       	mov	r20, r10
     24a:	59 2d       	mov	r21, r9
     24c:	68 2d       	mov	r22, r8
     24e:	73 2d       	mov	r23, r3
     250:	82 2d       	mov	r24, r2
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	00 e2       	ldi	r16, 0x20	; 32
     256:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__lshrdi3>
     25a:	c9 01       	movw	r24, r18
     25c:	da 01       	movw	r26, r20
     25e:	80 30       	cpi	r24, 0x00	; 0
     260:	e0 e0       	ldi	r30, 0x00	; 0
     262:	9e 07       	cpc	r25, r30
     264:	e1 e0       	ldi	r30, 0x01	; 1
     266:	ae 07       	cpc	r26, r30
     268:	e0 e0       	ldi	r30, 0x00	; 0
     26a:	be 07       	cpc	r27, r30
     26c:	80 f4       	brcc	.+32     	; 0x28e <__floatundisf+0xa6>
     26e:	8f 3f       	cpi	r24, 0xFF	; 255
     270:	91 05       	cpc	r25, r1
     272:	a1 05       	cpc	r26, r1
     274:	b1 05       	cpc	r27, r1
     276:	31 f0       	breq	.+12     	; 0x284 <__floatundisf+0x9c>
     278:	28 f0       	brcs	.+10     	; 0x284 <__floatundisf+0x9c>
     27a:	28 e0       	ldi	r18, 0x08	; 8
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	16 c0       	rjmp	.+44     	; 0x2b0 <__floatundisf+0xc8>
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	11 c0       	rjmp	.+34     	; 0x2b0 <__floatundisf+0xc8>
     28e:	80 30       	cpi	r24, 0x00	; 0
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	9f 07       	cpc	r25, r31
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	af 07       	cpc	r26, r31
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	bf 07       	cpc	r27, r31
     29c:	28 f0       	brcs	.+10     	; 0x2a8 <__floatundisf+0xc0>
     29e:	28 e1       	ldi	r18, 0x18	; 24
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <__floatundisf+0xc8>
     2a8:	20 e1       	ldi	r18, 0x10	; 16
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	02 2e       	mov	r0, r18
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <__floatundisf+0xd4>
     2b4:	b6 95       	lsr	r27
     2b6:	a7 95       	ror	r26
     2b8:	97 95       	ror	r25
     2ba:	87 95       	ror	r24
     2bc:	0a 94       	dec	r0
     2be:	d2 f7       	brpl	.-12     	; 0x2b4 <__floatundisf+0xcc>
     2c0:	fc 01       	movw	r30, r24
     2c2:	e8 59       	subi	r30, 0x98	; 152
     2c4:	ff 4f       	sbci	r31, 0xFF	; 255
     2c6:	80 81       	ld	r24, Z
     2c8:	29 01       	movw	r4, r18
     2ca:	3a 01       	movw	r6, r20
     2cc:	48 0e       	add	r4, r24
     2ce:	51 1c       	adc	r5, r1
     2d0:	61 1c       	adc	r6, r1
     2d2:	71 1c       	adc	r7, r1
     2d4:	49 82       	std	Y+1, r4	; 0x01
     2d6:	21 2f       	mov	r18, r17
     2d8:	3b 2d       	mov	r19, r11
     2da:	4a 2d       	mov	r20, r10
     2dc:	59 2d       	mov	r21, r9
     2de:	68 2d       	mov	r22, r8
     2e0:	73 2d       	mov	r23, r3
     2e2:	82 2d       	mov	r24, r2
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	04 2d       	mov	r16, r4
     2e8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__lshrdi3>
     2ec:	c9 01       	movw	r24, r18
     2ee:	da 01       	movw	r26, r20
     2f0:	4c 01       	movw	r8, r24
     2f2:	5d 01       	movw	r10, r26
     2f4:	80 e2       	ldi	r24, 0x20	; 32
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	84 19       	sub	r24, r4
     2fa:	95 09       	sbc	r25, r5
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <__floatundisf+0x11e>
     2fe:	cc 0c       	add	r12, r12
     300:	dd 1c       	adc	r13, r13
     302:	ee 1c       	adc	r14, r14
     304:	ff 1c       	adc	r15, r15
     306:	8a 95       	dec	r24
     308:	d2 f7       	brpl	.-12     	; 0x2fe <__floatundisf+0x116>
     30a:	c1 14       	cp	r12, r1
     30c:	d1 04       	cpc	r13, r1
     30e:	e1 04       	cpc	r14, r1
     310:	f1 04       	cpc	r15, r1
     312:	41 f0       	breq	.+16     	; 0x324 <__floatundisf+0x13c>
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	88 2a       	or	r8, r24
     31e:	99 2a       	or	r9, r25
     320:	aa 2a       	or	r10, r26
     322:	bb 2a       	or	r11, r27
     324:	90 e2       	ldi	r25, 0x20	; 32
     326:	49 16       	cp	r4, r25
     328:	51 04       	cpc	r5, r1
     32a:	61 04       	cpc	r6, r1
     32c:	71 04       	cpc	r7, r1
     32e:	59 f4       	brne	.+22     	; 0x346 <__floatundisf+0x15e>
     330:	0f 2e       	mov	r0, r31
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	ef 2e       	mov	r14, r31
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	ff 2e       	mov	r15, r31
     33a:	f0 e8       	ldi	r31, 0x80	; 128
     33c:	0f 2f       	mov	r16, r31
     33e:	ff e4       	ldi	r31, 0x4F	; 79
     340:	1f 2f       	mov	r17, r31
     342:	f0 2d       	mov	r31, r0
     344:	21 c0       	rjmp	.+66     	; 0x388 <__floatundisf+0x1a0>
     346:	af e1       	ldi	r26, 0x1F	; 31
     348:	4a 16       	cp	r4, r26
     34a:	51 04       	cpc	r5, r1
     34c:	61 04       	cpc	r6, r1
     34e:	71 04       	cpc	r7, r1
     350:	59 f4       	brne	.+22     	; 0x368 <__floatundisf+0x180>
     352:	0f 2e       	mov	r0, r31
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ef 2e       	mov	r14, r31
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	ff 2e       	mov	r15, r31
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	0f 2f       	mov	r16, r31
     360:	ff e4       	ldi	r31, 0x4F	; 79
     362:	1f 2f       	mov	r17, r31
     364:	f0 2d       	mov	r31, r0
     366:	10 c0       	rjmp	.+32     	; 0x388 <__floatundisf+0x1a0>
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	09 80       	ldd	r0, Y+1	; 0x01
     372:	04 c0       	rjmp	.+8      	; 0x37c <__floatundisf+0x194>
     374:	66 0f       	add	r22, r22
     376:	77 1f       	adc	r23, r23
     378:	88 1f       	adc	r24, r24
     37a:	99 1f       	adc	r25, r25
     37c:	0a 94       	dec	r0
     37e:	d2 f7       	brpl	.-12     	; 0x374 <__floatundisf+0x18c>
     380:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatsisf>
     384:	7b 01       	movw	r14, r22
     386:	8c 01       	movw	r16, r24
     388:	c5 01       	movw	r24, r10
     38a:	b4 01       	movw	r22, r8
     38c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
     390:	a8 01       	movw	r20, r16
     392:	97 01       	movw	r18, r14
     394:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
     398:	22 96       	adiw	r28, 0x02	; 2
     39a:	e2 e1       	ldi	r30, 0x12	; 18
     39c:	0c 94 39 2c 	jmp	0x5872	; 0x5872 <__epilogue_restores__>

000003a0 <_fpadd_parts>:
     3a0:	a0 e0       	ldi	r26, 0x00	; 0
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	e6 ed       	ldi	r30, 0xD6	; 214
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
     3a8:	0c 94 1d 2c 	jmp	0x583a	; 0x583a <__prologue_saves__>
     3ac:	dc 01       	movw	r26, r24
     3ae:	2b 01       	movw	r4, r22
     3b0:	fa 01       	movw	r30, r20
     3b2:	9c 91       	ld	r25, X
     3b4:	92 30       	cpi	r25, 0x02	; 2
     3b6:	08 f4       	brcc	.+2      	; 0x3ba <_fpadd_parts+0x1a>
     3b8:	39 c1       	rjmp	.+626    	; 0x62c <_fpadd_parts+0x28c>
     3ba:	eb 01       	movw	r28, r22
     3bc:	88 81       	ld	r24, Y
     3be:	82 30       	cpi	r24, 0x02	; 2
     3c0:	08 f4       	brcc	.+2      	; 0x3c4 <_fpadd_parts+0x24>
     3c2:	33 c1       	rjmp	.+614    	; 0x62a <_fpadd_parts+0x28a>
     3c4:	94 30       	cpi	r25, 0x04	; 4
     3c6:	69 f4       	brne	.+26     	; 0x3e2 <_fpadd_parts+0x42>
     3c8:	84 30       	cpi	r24, 0x04	; 4
     3ca:	09 f0       	breq	.+2      	; 0x3ce <_fpadd_parts+0x2e>
     3cc:	2f c1       	rjmp	.+606    	; 0x62c <_fpadd_parts+0x28c>
     3ce:	11 96       	adiw	r26, 0x01	; 1
     3d0:	9c 91       	ld	r25, X
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	98 17       	cp	r25, r24
     3d8:	09 f4       	brne	.+2      	; 0x3dc <_fpadd_parts+0x3c>
     3da:	28 c1       	rjmp	.+592    	; 0x62c <_fpadd_parts+0x28c>
     3dc:	a0 e6       	ldi	r26, 0x60	; 96
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	25 c1       	rjmp	.+586    	; 0x62c <_fpadd_parts+0x28c>
     3e2:	84 30       	cpi	r24, 0x04	; 4
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <_fpadd_parts+0x48>
     3e6:	21 c1       	rjmp	.+578    	; 0x62a <_fpadd_parts+0x28a>
     3e8:	82 30       	cpi	r24, 0x02	; 2
     3ea:	a9 f4       	brne	.+42     	; 0x416 <_fpadd_parts+0x76>
     3ec:	92 30       	cpi	r25, 0x02	; 2
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <_fpadd_parts+0x52>
     3f0:	1d c1       	rjmp	.+570    	; 0x62c <_fpadd_parts+0x28c>
     3f2:	9a 01       	movw	r18, r20
     3f4:	ad 01       	movw	r20, r26
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	ea 01       	movw	r28, r20
     3fa:	09 90       	ld	r0, Y+
     3fc:	ae 01       	movw	r20, r28
     3fe:	e9 01       	movw	r28, r18
     400:	09 92       	st	Y+, r0
     402:	9e 01       	movw	r18, r28
     404:	81 50       	subi	r24, 0x01	; 1
     406:	c1 f7       	brne	.-16     	; 0x3f8 <_fpadd_parts+0x58>
     408:	e2 01       	movw	r28, r4
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	11 96       	adiw	r26, 0x01	; 1
     40e:	9c 91       	ld	r25, X
     410:	89 23       	and	r24, r25
     412:	81 83       	std	Z+1, r24	; 0x01
     414:	08 c1       	rjmp	.+528    	; 0x626 <_fpadd_parts+0x286>
     416:	92 30       	cpi	r25, 0x02	; 2
     418:	09 f4       	brne	.+2      	; 0x41c <_fpadd_parts+0x7c>
     41a:	07 c1       	rjmp	.+526    	; 0x62a <_fpadd_parts+0x28a>
     41c:	12 96       	adiw	r26, 0x02	; 2
     41e:	2d 90       	ld	r2, X+
     420:	3c 90       	ld	r3, X
     422:	13 97       	sbiw	r26, 0x03	; 3
     424:	eb 01       	movw	r28, r22
     426:	8a 81       	ldd	r24, Y+2	; 0x02
     428:	9b 81       	ldd	r25, Y+3	; 0x03
     42a:	14 96       	adiw	r26, 0x04	; 4
     42c:	ad 90       	ld	r10, X+
     42e:	bd 90       	ld	r11, X+
     430:	cd 90       	ld	r12, X+
     432:	dc 90       	ld	r13, X
     434:	17 97       	sbiw	r26, 0x07	; 7
     436:	ec 80       	ldd	r14, Y+4	; 0x04
     438:	fd 80       	ldd	r15, Y+5	; 0x05
     43a:	0e 81       	ldd	r16, Y+6	; 0x06
     43c:	1f 81       	ldd	r17, Y+7	; 0x07
     43e:	91 01       	movw	r18, r2
     440:	28 1b       	sub	r18, r24
     442:	39 0b       	sbc	r19, r25
     444:	b9 01       	movw	r22, r18
     446:	37 ff       	sbrs	r19, 7
     448:	04 c0       	rjmp	.+8      	; 0x452 <_fpadd_parts+0xb2>
     44a:	66 27       	eor	r22, r22
     44c:	77 27       	eor	r23, r23
     44e:	62 1b       	sub	r22, r18
     450:	73 0b       	sbc	r23, r19
     452:	60 32       	cpi	r22, 0x20	; 32
     454:	71 05       	cpc	r23, r1
     456:	0c f0       	brlt	.+2      	; 0x45a <_fpadd_parts+0xba>
     458:	61 c0       	rjmp	.+194    	; 0x51c <_fpadd_parts+0x17c>
     45a:	12 16       	cp	r1, r18
     45c:	13 06       	cpc	r1, r19
     45e:	6c f5       	brge	.+90     	; 0x4ba <_fpadd_parts+0x11a>
     460:	37 01       	movw	r6, r14
     462:	48 01       	movw	r8, r16
     464:	06 2e       	mov	r0, r22
     466:	04 c0       	rjmp	.+8      	; 0x470 <_fpadd_parts+0xd0>
     468:	96 94       	lsr	r9
     46a:	87 94       	ror	r8
     46c:	77 94       	ror	r7
     46e:	67 94       	ror	r6
     470:	0a 94       	dec	r0
     472:	d2 f7       	brpl	.-12     	; 0x468 <_fpadd_parts+0xc8>
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	04 c0       	rjmp	.+8      	; 0x486 <_fpadd_parts+0xe6>
     47e:	22 0f       	add	r18, r18
     480:	33 1f       	adc	r19, r19
     482:	44 1f       	adc	r20, r20
     484:	55 1f       	adc	r21, r21
     486:	6a 95       	dec	r22
     488:	d2 f7       	brpl	.-12     	; 0x47e <_fpadd_parts+0xde>
     48a:	21 50       	subi	r18, 0x01	; 1
     48c:	30 40       	sbci	r19, 0x00	; 0
     48e:	40 40       	sbci	r20, 0x00	; 0
     490:	50 40       	sbci	r21, 0x00	; 0
     492:	2e 21       	and	r18, r14
     494:	3f 21       	and	r19, r15
     496:	40 23       	and	r20, r16
     498:	51 23       	and	r21, r17
     49a:	21 15       	cp	r18, r1
     49c:	31 05       	cpc	r19, r1
     49e:	41 05       	cpc	r20, r1
     4a0:	51 05       	cpc	r21, r1
     4a2:	21 f0       	breq	.+8      	; 0x4ac <_fpadd_parts+0x10c>
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	79 01       	movw	r14, r18
     4ae:	8a 01       	movw	r16, r20
     4b0:	e6 28       	or	r14, r6
     4b2:	f7 28       	or	r15, r7
     4b4:	08 29       	or	r16, r8
     4b6:	19 29       	or	r17, r9
     4b8:	3c c0       	rjmp	.+120    	; 0x532 <_fpadd_parts+0x192>
     4ba:	23 2b       	or	r18, r19
     4bc:	d1 f1       	breq	.+116    	; 0x532 <_fpadd_parts+0x192>
     4be:	26 0e       	add	r2, r22
     4c0:	37 1e       	adc	r3, r23
     4c2:	35 01       	movw	r6, r10
     4c4:	46 01       	movw	r8, r12
     4c6:	06 2e       	mov	r0, r22
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <_fpadd_parts+0x132>
     4ca:	96 94       	lsr	r9
     4cc:	87 94       	ror	r8
     4ce:	77 94       	ror	r7
     4d0:	67 94       	ror	r6
     4d2:	0a 94       	dec	r0
     4d4:	d2 f7       	brpl	.-12     	; 0x4ca <_fpadd_parts+0x12a>
     4d6:	21 e0       	ldi	r18, 0x01	; 1
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <_fpadd_parts+0x148>
     4e0:	22 0f       	add	r18, r18
     4e2:	33 1f       	adc	r19, r19
     4e4:	44 1f       	adc	r20, r20
     4e6:	55 1f       	adc	r21, r21
     4e8:	6a 95       	dec	r22
     4ea:	d2 f7       	brpl	.-12     	; 0x4e0 <_fpadd_parts+0x140>
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	30 40       	sbci	r19, 0x00	; 0
     4f0:	40 40       	sbci	r20, 0x00	; 0
     4f2:	50 40       	sbci	r21, 0x00	; 0
     4f4:	2a 21       	and	r18, r10
     4f6:	3b 21       	and	r19, r11
     4f8:	4c 21       	and	r20, r12
     4fa:	5d 21       	and	r21, r13
     4fc:	21 15       	cp	r18, r1
     4fe:	31 05       	cpc	r19, r1
     500:	41 05       	cpc	r20, r1
     502:	51 05       	cpc	r21, r1
     504:	21 f0       	breq	.+8      	; 0x50e <_fpadd_parts+0x16e>
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	59 01       	movw	r10, r18
     510:	6a 01       	movw	r12, r20
     512:	a6 28       	or	r10, r6
     514:	b7 28       	or	r11, r7
     516:	c8 28       	or	r12, r8
     518:	d9 28       	or	r13, r9
     51a:	0b c0       	rjmp	.+22     	; 0x532 <_fpadd_parts+0x192>
     51c:	82 15       	cp	r24, r2
     51e:	93 05       	cpc	r25, r3
     520:	2c f0       	brlt	.+10     	; 0x52c <_fpadd_parts+0x18c>
     522:	1c 01       	movw	r2, r24
     524:	aa 24       	eor	r10, r10
     526:	bb 24       	eor	r11, r11
     528:	65 01       	movw	r12, r10
     52a:	03 c0       	rjmp	.+6      	; 0x532 <_fpadd_parts+0x192>
     52c:	ee 24       	eor	r14, r14
     52e:	ff 24       	eor	r15, r15
     530:	87 01       	movw	r16, r14
     532:	11 96       	adiw	r26, 0x01	; 1
     534:	9c 91       	ld	r25, X
     536:	d2 01       	movw	r26, r4
     538:	11 96       	adiw	r26, 0x01	; 1
     53a:	8c 91       	ld	r24, X
     53c:	98 17       	cp	r25, r24
     53e:	09 f4       	brne	.+2      	; 0x542 <_fpadd_parts+0x1a2>
     540:	45 c0       	rjmp	.+138    	; 0x5cc <_fpadd_parts+0x22c>
     542:	99 23       	and	r25, r25
     544:	39 f0       	breq	.+14     	; 0x554 <_fpadd_parts+0x1b4>
     546:	a8 01       	movw	r20, r16
     548:	97 01       	movw	r18, r14
     54a:	2a 19       	sub	r18, r10
     54c:	3b 09       	sbc	r19, r11
     54e:	4c 09       	sbc	r20, r12
     550:	5d 09       	sbc	r21, r13
     552:	06 c0       	rjmp	.+12     	; 0x560 <_fpadd_parts+0x1c0>
     554:	a6 01       	movw	r20, r12
     556:	95 01       	movw	r18, r10
     558:	2e 19       	sub	r18, r14
     55a:	3f 09       	sbc	r19, r15
     55c:	40 0b       	sbc	r20, r16
     55e:	51 0b       	sbc	r21, r17
     560:	57 fd       	sbrc	r21, 7
     562:	08 c0       	rjmp	.+16     	; 0x574 <_fpadd_parts+0x1d4>
     564:	11 82       	std	Z+1, r1	; 0x01
     566:	33 82       	std	Z+3, r3	; 0x03
     568:	22 82       	std	Z+2, r2	; 0x02
     56a:	24 83       	std	Z+4, r18	; 0x04
     56c:	35 83       	std	Z+5, r19	; 0x05
     56e:	46 83       	std	Z+6, r20	; 0x06
     570:	57 83       	std	Z+7, r21	; 0x07
     572:	1d c0       	rjmp	.+58     	; 0x5ae <_fpadd_parts+0x20e>
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	81 83       	std	Z+1, r24	; 0x01
     578:	33 82       	std	Z+3, r3	; 0x03
     57a:	22 82       	std	Z+2, r2	; 0x02
     57c:	88 27       	eor	r24, r24
     57e:	99 27       	eor	r25, r25
     580:	dc 01       	movw	r26, r24
     582:	82 1b       	sub	r24, r18
     584:	93 0b       	sbc	r25, r19
     586:	a4 0b       	sbc	r26, r20
     588:	b5 0b       	sbc	r27, r21
     58a:	84 83       	std	Z+4, r24	; 0x04
     58c:	95 83       	std	Z+5, r25	; 0x05
     58e:	a6 83       	std	Z+6, r26	; 0x06
     590:	b7 83       	std	Z+7, r27	; 0x07
     592:	0d c0       	rjmp	.+26     	; 0x5ae <_fpadd_parts+0x20e>
     594:	22 0f       	add	r18, r18
     596:	33 1f       	adc	r19, r19
     598:	44 1f       	adc	r20, r20
     59a:	55 1f       	adc	r21, r21
     59c:	24 83       	std	Z+4, r18	; 0x04
     59e:	35 83       	std	Z+5, r19	; 0x05
     5a0:	46 83       	std	Z+6, r20	; 0x06
     5a2:	57 83       	std	Z+7, r21	; 0x07
     5a4:	82 81       	ldd	r24, Z+2	; 0x02
     5a6:	93 81       	ldd	r25, Z+3	; 0x03
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	93 83       	std	Z+3, r25	; 0x03
     5ac:	82 83       	std	Z+2, r24	; 0x02
     5ae:	24 81       	ldd	r18, Z+4	; 0x04
     5b0:	35 81       	ldd	r19, Z+5	; 0x05
     5b2:	46 81       	ldd	r20, Z+6	; 0x06
     5b4:	57 81       	ldd	r21, Z+7	; 0x07
     5b6:	da 01       	movw	r26, r20
     5b8:	c9 01       	movw	r24, r18
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	a1 09       	sbc	r26, r1
     5be:	b1 09       	sbc	r27, r1
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
     5c2:	9f 4f       	sbci	r25, 0xFF	; 255
     5c4:	af 4f       	sbci	r26, 0xFF	; 255
     5c6:	bf 43       	sbci	r27, 0x3F	; 63
     5c8:	28 f3       	brcs	.-54     	; 0x594 <_fpadd_parts+0x1f4>
     5ca:	0b c0       	rjmp	.+22     	; 0x5e2 <_fpadd_parts+0x242>
     5cc:	91 83       	std	Z+1, r25	; 0x01
     5ce:	33 82       	std	Z+3, r3	; 0x03
     5d0:	22 82       	std	Z+2, r2	; 0x02
     5d2:	ea 0c       	add	r14, r10
     5d4:	fb 1c       	adc	r15, r11
     5d6:	0c 1d       	adc	r16, r12
     5d8:	1d 1d       	adc	r17, r13
     5da:	e4 82       	std	Z+4, r14	; 0x04
     5dc:	f5 82       	std	Z+5, r15	; 0x05
     5de:	06 83       	std	Z+6, r16	; 0x06
     5e0:	17 83       	std	Z+7, r17	; 0x07
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	80 83       	st	Z, r24
     5e6:	24 81       	ldd	r18, Z+4	; 0x04
     5e8:	35 81       	ldd	r19, Z+5	; 0x05
     5ea:	46 81       	ldd	r20, Z+6	; 0x06
     5ec:	57 81       	ldd	r21, Z+7	; 0x07
     5ee:	57 ff       	sbrs	r21, 7
     5f0:	1a c0       	rjmp	.+52     	; 0x626 <_fpadd_parts+0x286>
     5f2:	c9 01       	movw	r24, r18
     5f4:	aa 27       	eor	r26, r26
     5f6:	97 fd       	sbrc	r25, 7
     5f8:	a0 95       	com	r26
     5fa:	ba 2f       	mov	r27, r26
     5fc:	81 70       	andi	r24, 0x01	; 1
     5fe:	90 70       	andi	r25, 0x00	; 0
     600:	a0 70       	andi	r26, 0x00	; 0
     602:	b0 70       	andi	r27, 0x00	; 0
     604:	56 95       	lsr	r21
     606:	47 95       	ror	r20
     608:	37 95       	ror	r19
     60a:	27 95       	ror	r18
     60c:	82 2b       	or	r24, r18
     60e:	93 2b       	or	r25, r19
     610:	a4 2b       	or	r26, r20
     612:	b5 2b       	or	r27, r21
     614:	84 83       	std	Z+4, r24	; 0x04
     616:	95 83       	std	Z+5, r25	; 0x05
     618:	a6 83       	std	Z+6, r26	; 0x06
     61a:	b7 83       	std	Z+7, r27	; 0x07
     61c:	82 81       	ldd	r24, Z+2	; 0x02
     61e:	93 81       	ldd	r25, Z+3	; 0x03
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	93 83       	std	Z+3, r25	; 0x03
     624:	82 83       	std	Z+2, r24	; 0x02
     626:	df 01       	movw	r26, r30
     628:	01 c0       	rjmp	.+2      	; 0x62c <_fpadd_parts+0x28c>
     62a:	d2 01       	movw	r26, r4
     62c:	cd 01       	movw	r24, r26
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	e2 e1       	ldi	r30, 0x12	; 18
     634:	0c 94 39 2c 	jmp	0x5872	; 0x5872 <__epilogue_restores__>

00000638 <__subsf3>:
     638:	a0 e2       	ldi	r26, 0x20	; 32
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e2 e2       	ldi	r30, 0x22	; 34
     63e:	f3 e0       	ldi	r31, 0x03	; 3
     640:	0c 94 29 2c 	jmp	0x5852	; 0x5852 <__prologue_saves__+0x18>
     644:	69 83       	std	Y+1, r22	; 0x01
     646:	7a 83       	std	Y+2, r23	; 0x02
     648:	8b 83       	std	Y+3, r24	; 0x03
     64a:	9c 83       	std	Y+4, r25	; 0x04
     64c:	2d 83       	std	Y+5, r18	; 0x05
     64e:	3e 83       	std	Y+6, r19	; 0x06
     650:	4f 83       	std	Y+7, r20	; 0x07
     652:	58 87       	std	Y+8, r21	; 0x08
     654:	e9 e0       	ldi	r30, 0x09	; 9
     656:	ee 2e       	mov	r14, r30
     658:	f1 2c       	mov	r15, r1
     65a:	ec 0e       	add	r14, r28
     65c:	fd 1e       	adc	r15, r29
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	b7 01       	movw	r22, r14
     664:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     668:	8e 01       	movw	r16, r28
     66a:	0f 5e       	subi	r16, 0xEF	; 239
     66c:	1f 4f       	sbci	r17, 0xFF	; 255
     66e:	ce 01       	movw	r24, r28
     670:	05 96       	adiw	r24, 0x05	; 5
     672:	b8 01       	movw	r22, r16
     674:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     678:	8a 89       	ldd	r24, Y+18	; 0x12
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	89 27       	eor	r24, r25
     67e:	8a 8b       	std	Y+18, r24	; 0x12
     680:	c7 01       	movw	r24, r14
     682:	b8 01       	movw	r22, r16
     684:	ae 01       	movw	r20, r28
     686:	47 5e       	subi	r20, 0xE7	; 231
     688:	5f 4f       	sbci	r21, 0xFF	; 255
     68a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_fpadd_parts>
     68e:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     692:	a0 96       	adiw	r28, 0x20	; 32
     694:	e6 e0       	ldi	r30, 0x06	; 6
     696:	0c 94 45 2c 	jmp	0x588a	; 0x588a <__epilogue_restores__+0x18>

0000069a <__addsf3>:
     69a:	a0 e2       	ldi	r26, 0x20	; 32
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e3 e5       	ldi	r30, 0x53	; 83
     6a0:	f3 e0       	ldi	r31, 0x03	; 3
     6a2:	0c 94 29 2c 	jmp	0x5852	; 0x5852 <__prologue_saves__+0x18>
     6a6:	69 83       	std	Y+1, r22	; 0x01
     6a8:	7a 83       	std	Y+2, r23	; 0x02
     6aa:	8b 83       	std	Y+3, r24	; 0x03
     6ac:	9c 83       	std	Y+4, r25	; 0x04
     6ae:	2d 83       	std	Y+5, r18	; 0x05
     6b0:	3e 83       	std	Y+6, r19	; 0x06
     6b2:	4f 83       	std	Y+7, r20	; 0x07
     6b4:	58 87       	std	Y+8, r21	; 0x08
     6b6:	f9 e0       	ldi	r31, 0x09	; 9
     6b8:	ef 2e       	mov	r14, r31
     6ba:	f1 2c       	mov	r15, r1
     6bc:	ec 0e       	add	r14, r28
     6be:	fd 1e       	adc	r15, r29
     6c0:	ce 01       	movw	r24, r28
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	b7 01       	movw	r22, r14
     6c6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     6ca:	8e 01       	movw	r16, r28
     6cc:	0f 5e       	subi	r16, 0xEF	; 239
     6ce:	1f 4f       	sbci	r17, 0xFF	; 255
     6d0:	ce 01       	movw	r24, r28
     6d2:	05 96       	adiw	r24, 0x05	; 5
     6d4:	b8 01       	movw	r22, r16
     6d6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     6da:	c7 01       	movw	r24, r14
     6dc:	b8 01       	movw	r22, r16
     6de:	ae 01       	movw	r20, r28
     6e0:	47 5e       	subi	r20, 0xE7	; 231
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
     6e4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_fpadd_parts>
     6e8:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     6ec:	a0 96       	adiw	r28, 0x20	; 32
     6ee:	e6 e0       	ldi	r30, 0x06	; 6
     6f0:	0c 94 45 2c 	jmp	0x588a	; 0x588a <__epilogue_restores__+0x18>

000006f4 <__mulsf3>:
     6f4:	a0 e2       	ldi	r26, 0x20	; 32
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	e0 e8       	ldi	r30, 0x80	; 128
     6fa:	f3 e0       	ldi	r31, 0x03	; 3
     6fc:	0c 94 1d 2c 	jmp	0x583a	; 0x583a <__prologue_saves__>
     700:	69 83       	std	Y+1, r22	; 0x01
     702:	7a 83       	std	Y+2, r23	; 0x02
     704:	8b 83       	std	Y+3, r24	; 0x03
     706:	9c 83       	std	Y+4, r25	; 0x04
     708:	2d 83       	std	Y+5, r18	; 0x05
     70a:	3e 83       	std	Y+6, r19	; 0x06
     70c:	4f 83       	std	Y+7, r20	; 0x07
     70e:	58 87       	std	Y+8, r21	; 0x08
     710:	ce 01       	movw	r24, r28
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	be 01       	movw	r22, r28
     716:	67 5f       	subi	r22, 0xF7	; 247
     718:	7f 4f       	sbci	r23, 0xFF	; 255
     71a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     71e:	ce 01       	movw	r24, r28
     720:	05 96       	adiw	r24, 0x05	; 5
     722:	be 01       	movw	r22, r28
     724:	6f 5e       	subi	r22, 0xEF	; 239
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     72c:	99 85       	ldd	r25, Y+9	; 0x09
     72e:	92 30       	cpi	r25, 0x02	; 2
     730:	88 f0       	brcs	.+34     	; 0x754 <__mulsf3+0x60>
     732:	89 89       	ldd	r24, Y+17	; 0x11
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	c8 f0       	brcs	.+50     	; 0x76a <__mulsf3+0x76>
     738:	94 30       	cpi	r25, 0x04	; 4
     73a:	19 f4       	brne	.+6      	; 0x742 <__mulsf3+0x4e>
     73c:	82 30       	cpi	r24, 0x02	; 2
     73e:	51 f4       	brne	.+20     	; 0x754 <__mulsf3+0x60>
     740:	04 c0       	rjmp	.+8      	; 0x74a <__mulsf3+0x56>
     742:	84 30       	cpi	r24, 0x04	; 4
     744:	29 f4       	brne	.+10     	; 0x750 <__mulsf3+0x5c>
     746:	92 30       	cpi	r25, 0x02	; 2
     748:	81 f4       	brne	.+32     	; 0x76a <__mulsf3+0x76>
     74a:	80 e6       	ldi	r24, 0x60	; 96
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	c6 c0       	rjmp	.+396    	; 0x8dc <__stack+0x7d>
     750:	92 30       	cpi	r25, 0x02	; 2
     752:	49 f4       	brne	.+18     	; 0x766 <__mulsf3+0x72>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	9a 85       	ldd	r25, Y+10	; 0x0a
     758:	8a 89       	ldd	r24, Y+18	; 0x12
     75a:	98 13       	cpse	r25, r24
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	2a 87       	std	Y+10, r18	; 0x0a
     760:	ce 01       	movw	r24, r28
     762:	09 96       	adiw	r24, 0x09	; 9
     764:	bb c0       	rjmp	.+374    	; 0x8dc <__stack+0x7d>
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	49 f4       	brne	.+18     	; 0x77c <__mulsf3+0x88>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	9a 85       	ldd	r25, Y+10	; 0x0a
     76e:	8a 89       	ldd	r24, Y+18	; 0x12
     770:	98 13       	cpse	r25, r24
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	2a 8b       	std	Y+18, r18	; 0x12
     776:	ce 01       	movw	r24, r28
     778:	41 96       	adiw	r24, 0x11	; 17
     77a:	b0 c0       	rjmp	.+352    	; 0x8dc <__stack+0x7d>
     77c:	2d 84       	ldd	r2, Y+13	; 0x0d
     77e:	3e 84       	ldd	r3, Y+14	; 0x0e
     780:	4f 84       	ldd	r4, Y+15	; 0x0f
     782:	58 88       	ldd	r5, Y+16	; 0x10
     784:	6d 88       	ldd	r6, Y+21	; 0x15
     786:	7e 88       	ldd	r7, Y+22	; 0x16
     788:	8f 88       	ldd	r8, Y+23	; 0x17
     78a:	98 8c       	ldd	r9, Y+24	; 0x18
     78c:	ee 24       	eor	r14, r14
     78e:	ff 24       	eor	r15, r15
     790:	87 01       	movw	r16, r14
     792:	aa 24       	eor	r10, r10
     794:	bb 24       	eor	r11, r11
     796:	65 01       	movw	r12, r10
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	e0 e0       	ldi	r30, 0x00	; 0
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	c1 01       	movw	r24, r2
     7a6:	81 70       	andi	r24, 0x01	; 1
     7a8:	90 70       	andi	r25, 0x00	; 0
     7aa:	89 2b       	or	r24, r25
     7ac:	e9 f0       	breq	.+58     	; 0x7e8 <__mulsf3+0xf4>
     7ae:	e6 0c       	add	r14, r6
     7b0:	f7 1c       	adc	r15, r7
     7b2:	08 1d       	adc	r16, r8
     7b4:	19 1d       	adc	r17, r9
     7b6:	9a 01       	movw	r18, r20
     7b8:	ab 01       	movw	r20, r22
     7ba:	2a 0d       	add	r18, r10
     7bc:	3b 1d       	adc	r19, r11
     7be:	4c 1d       	adc	r20, r12
     7c0:	5d 1d       	adc	r21, r13
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	a0 e0       	ldi	r26, 0x00	; 0
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e6 14       	cp	r14, r6
     7cc:	f7 04       	cpc	r15, r7
     7ce:	08 05       	cpc	r16, r8
     7d0:	19 05       	cpc	r17, r9
     7d2:	20 f4       	brcc	.+8      	; 0x7dc <__mulsf3+0xe8>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	a0 e0       	ldi	r26, 0x00	; 0
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	ba 01       	movw	r22, r20
     7de:	a9 01       	movw	r20, r18
     7e0:	48 0f       	add	r20, r24
     7e2:	59 1f       	adc	r21, r25
     7e4:	6a 1f       	adc	r22, r26
     7e6:	7b 1f       	adc	r23, r27
     7e8:	aa 0c       	add	r10, r10
     7ea:	bb 1c       	adc	r11, r11
     7ec:	cc 1c       	adc	r12, r12
     7ee:	dd 1c       	adc	r13, r13
     7f0:	97 fe       	sbrs	r9, 7
     7f2:	08 c0       	rjmp	.+16     	; 0x804 <__mulsf3+0x110>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	a0 e0       	ldi	r26, 0x00	; 0
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	a8 2a       	or	r10, r24
     7fe:	b9 2a       	or	r11, r25
     800:	ca 2a       	or	r12, r26
     802:	db 2a       	or	r13, r27
     804:	31 96       	adiw	r30, 0x01	; 1
     806:	e0 32       	cpi	r30, 0x20	; 32
     808:	f1 05       	cpc	r31, r1
     80a:	49 f0       	breq	.+18     	; 0x81e <__mulsf3+0x12a>
     80c:	66 0c       	add	r6, r6
     80e:	77 1c       	adc	r7, r7
     810:	88 1c       	adc	r8, r8
     812:	99 1c       	adc	r9, r9
     814:	56 94       	lsr	r5
     816:	47 94       	ror	r4
     818:	37 94       	ror	r3
     81a:	27 94       	ror	r2
     81c:	c3 cf       	rjmp	.-122    	; 0x7a4 <__mulsf3+0xb0>
     81e:	fa 85       	ldd	r31, Y+10	; 0x0a
     820:	ea 89       	ldd	r30, Y+18	; 0x12
     822:	2b 89       	ldd	r18, Y+19	; 0x13
     824:	3c 89       	ldd	r19, Y+20	; 0x14
     826:	8b 85       	ldd	r24, Y+11	; 0x0b
     828:	9c 85       	ldd	r25, Y+12	; 0x0c
     82a:	28 0f       	add	r18, r24
     82c:	39 1f       	adc	r19, r25
     82e:	2e 5f       	subi	r18, 0xFE	; 254
     830:	3f 4f       	sbci	r19, 0xFF	; 255
     832:	17 c0       	rjmp	.+46     	; 0x862 <__stack+0x3>
     834:	ca 01       	movw	r24, r20
     836:	81 70       	andi	r24, 0x01	; 1
     838:	90 70       	andi	r25, 0x00	; 0
     83a:	89 2b       	or	r24, r25
     83c:	61 f0       	breq	.+24     	; 0x856 <__mulsf3+0x162>
     83e:	16 95       	lsr	r17
     840:	07 95       	ror	r16
     842:	f7 94       	ror	r15
     844:	e7 94       	ror	r14
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	a0 e0       	ldi	r26, 0x00	; 0
     84c:	b0 e8       	ldi	r27, 0x80	; 128
     84e:	e8 2a       	or	r14, r24
     850:	f9 2a       	or	r15, r25
     852:	0a 2b       	or	r16, r26
     854:	1b 2b       	or	r17, r27
     856:	76 95       	lsr	r23
     858:	67 95       	ror	r22
     85a:	57 95       	ror	r21
     85c:	47 95       	ror	r20
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	77 fd       	sbrc	r23, 7
     864:	e7 cf       	rjmp	.-50     	; 0x834 <__mulsf3+0x140>
     866:	0c c0       	rjmp	.+24     	; 0x880 <__stack+0x21>
     868:	44 0f       	add	r20, r20
     86a:	55 1f       	adc	r21, r21
     86c:	66 1f       	adc	r22, r22
     86e:	77 1f       	adc	r23, r23
     870:	17 fd       	sbrc	r17, 7
     872:	41 60       	ori	r20, 0x01	; 1
     874:	ee 0c       	add	r14, r14
     876:	ff 1c       	adc	r15, r15
     878:	00 1f       	adc	r16, r16
     87a:	11 1f       	adc	r17, r17
     87c:	21 50       	subi	r18, 0x01	; 1
     87e:	30 40       	sbci	r19, 0x00	; 0
     880:	40 30       	cpi	r20, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	59 07       	cpc	r21, r25
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	69 07       	cpc	r22, r25
     88a:	90 e4       	ldi	r25, 0x40	; 64
     88c:	79 07       	cpc	r23, r25
     88e:	60 f3       	brcs	.-40     	; 0x868 <__stack+0x9>
     890:	2b 8f       	std	Y+27, r18	; 0x1b
     892:	3c 8f       	std	Y+28, r19	; 0x1c
     894:	db 01       	movw	r26, r22
     896:	ca 01       	movw	r24, r20
     898:	8f 77       	andi	r24, 0x7F	; 127
     89a:	90 70       	andi	r25, 0x00	; 0
     89c:	a0 70       	andi	r26, 0x00	; 0
     89e:	b0 70       	andi	r27, 0x00	; 0
     8a0:	80 34       	cpi	r24, 0x40	; 64
     8a2:	91 05       	cpc	r25, r1
     8a4:	a1 05       	cpc	r26, r1
     8a6:	b1 05       	cpc	r27, r1
     8a8:	61 f4       	brne	.+24     	; 0x8c2 <__stack+0x63>
     8aa:	47 fd       	sbrc	r20, 7
     8ac:	0a c0       	rjmp	.+20     	; 0x8c2 <__stack+0x63>
     8ae:	e1 14       	cp	r14, r1
     8b0:	f1 04       	cpc	r15, r1
     8b2:	01 05       	cpc	r16, r1
     8b4:	11 05       	cpc	r17, r1
     8b6:	29 f0       	breq	.+10     	; 0x8c2 <__stack+0x63>
     8b8:	40 5c       	subi	r20, 0xC0	; 192
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	6f 4f       	sbci	r22, 0xFF	; 255
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	40 78       	andi	r20, 0x80	; 128
     8c2:	1a 8e       	std	Y+26, r1	; 0x1a
     8c4:	fe 17       	cp	r31, r30
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__stack+0x6d>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	8a 8f       	std	Y+26, r24	; 0x1a
     8cc:	4d 8f       	std	Y+29, r20	; 0x1d
     8ce:	5e 8f       	std	Y+30, r21	; 0x1e
     8d0:	6f 8f       	std	Y+31, r22	; 0x1f
     8d2:	78 a3       	std	Y+32, r23	; 0x20
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	89 8f       	std	Y+25, r24	; 0x19
     8d8:	ce 01       	movw	r24, r28
     8da:	49 96       	adiw	r24, 0x19	; 25
     8dc:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     8e0:	a0 96       	adiw	r28, 0x20	; 32
     8e2:	e2 e1       	ldi	r30, 0x12	; 18
     8e4:	0c 94 39 2c 	jmp	0x5872	; 0x5872 <__epilogue_restores__>

000008e8 <__divsf3>:
     8e8:	a8 e1       	ldi	r26, 0x18	; 24
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	ea e7       	ldi	r30, 0x7A	; 122
     8ee:	f4 e0       	ldi	r31, 0x04	; 4
     8f0:	0c 94 25 2c 	jmp	0x584a	; 0x584a <__prologue_saves__+0x10>
     8f4:	69 83       	std	Y+1, r22	; 0x01
     8f6:	7a 83       	std	Y+2, r23	; 0x02
     8f8:	8b 83       	std	Y+3, r24	; 0x03
     8fa:	9c 83       	std	Y+4, r25	; 0x04
     8fc:	2d 83       	std	Y+5, r18	; 0x05
     8fe:	3e 83       	std	Y+6, r19	; 0x06
     900:	4f 83       	std	Y+7, r20	; 0x07
     902:	58 87       	std	Y+8, r21	; 0x08
     904:	b9 e0       	ldi	r27, 0x09	; 9
     906:	eb 2e       	mov	r14, r27
     908:	f1 2c       	mov	r15, r1
     90a:	ec 0e       	add	r14, r28
     90c:	fd 1e       	adc	r15, r29
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	b7 01       	movw	r22, r14
     914:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     918:	8e 01       	movw	r16, r28
     91a:	0f 5e       	subi	r16, 0xEF	; 239
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	ce 01       	movw	r24, r28
     920:	05 96       	adiw	r24, 0x05	; 5
     922:	b8 01       	movw	r22, r16
     924:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     928:	29 85       	ldd	r18, Y+9	; 0x09
     92a:	22 30       	cpi	r18, 0x02	; 2
     92c:	08 f4       	brcc	.+2      	; 0x930 <__divsf3+0x48>
     92e:	7e c0       	rjmp	.+252    	; 0xa2c <__divsf3+0x144>
     930:	39 89       	ldd	r19, Y+17	; 0x11
     932:	32 30       	cpi	r19, 0x02	; 2
     934:	10 f4       	brcc	.+4      	; 0x93a <__divsf3+0x52>
     936:	b8 01       	movw	r22, r16
     938:	7c c0       	rjmp	.+248    	; 0xa32 <__divsf3+0x14a>
     93a:	8a 85       	ldd	r24, Y+10	; 0x0a
     93c:	9a 89       	ldd	r25, Y+18	; 0x12
     93e:	89 27       	eor	r24, r25
     940:	8a 87       	std	Y+10, r24	; 0x0a
     942:	24 30       	cpi	r18, 0x04	; 4
     944:	11 f0       	breq	.+4      	; 0x94a <__divsf3+0x62>
     946:	22 30       	cpi	r18, 0x02	; 2
     948:	31 f4       	brne	.+12     	; 0x956 <__divsf3+0x6e>
     94a:	23 17       	cp	r18, r19
     94c:	09 f0       	breq	.+2      	; 0x950 <__divsf3+0x68>
     94e:	6e c0       	rjmp	.+220    	; 0xa2c <__divsf3+0x144>
     950:	60 e6       	ldi	r22, 0x60	; 96
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	6e c0       	rjmp	.+220    	; 0xa32 <__divsf3+0x14a>
     956:	34 30       	cpi	r19, 0x04	; 4
     958:	39 f4       	brne	.+14     	; 0x968 <__divsf3+0x80>
     95a:	1d 86       	std	Y+13, r1	; 0x0d
     95c:	1e 86       	std	Y+14, r1	; 0x0e
     95e:	1f 86       	std	Y+15, r1	; 0x0f
     960:	18 8a       	std	Y+16, r1	; 0x10
     962:	1c 86       	std	Y+12, r1	; 0x0c
     964:	1b 86       	std	Y+11, r1	; 0x0b
     966:	04 c0       	rjmp	.+8      	; 0x970 <__divsf3+0x88>
     968:	32 30       	cpi	r19, 0x02	; 2
     96a:	21 f4       	brne	.+8      	; 0x974 <__divsf3+0x8c>
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	89 87       	std	Y+9, r24	; 0x09
     970:	b7 01       	movw	r22, r14
     972:	5f c0       	rjmp	.+190    	; 0xa32 <__divsf3+0x14a>
     974:	2b 85       	ldd	r18, Y+11	; 0x0b
     976:	3c 85       	ldd	r19, Y+12	; 0x0c
     978:	8b 89       	ldd	r24, Y+19	; 0x13
     97a:	9c 89       	ldd	r25, Y+20	; 0x14
     97c:	28 1b       	sub	r18, r24
     97e:	39 0b       	sbc	r19, r25
     980:	3c 87       	std	Y+12, r19	; 0x0c
     982:	2b 87       	std	Y+11, r18	; 0x0b
     984:	ed 84       	ldd	r14, Y+13	; 0x0d
     986:	fe 84       	ldd	r15, Y+14	; 0x0e
     988:	0f 85       	ldd	r16, Y+15	; 0x0f
     98a:	18 89       	ldd	r17, Y+16	; 0x10
     98c:	ad 88       	ldd	r10, Y+21	; 0x15
     98e:	be 88       	ldd	r11, Y+22	; 0x16
     990:	cf 88       	ldd	r12, Y+23	; 0x17
     992:	d8 8c       	ldd	r13, Y+24	; 0x18
     994:	ea 14       	cp	r14, r10
     996:	fb 04       	cpc	r15, r11
     998:	0c 05       	cpc	r16, r12
     99a:	1d 05       	cpc	r17, r13
     99c:	40 f4       	brcc	.+16     	; 0x9ae <__divsf3+0xc6>
     99e:	ee 0c       	add	r14, r14
     9a0:	ff 1c       	adc	r15, r15
     9a2:	00 1f       	adc	r16, r16
     9a4:	11 1f       	adc	r17, r17
     9a6:	21 50       	subi	r18, 0x01	; 1
     9a8:	30 40       	sbci	r19, 0x00	; 0
     9aa:	3c 87       	std	Y+12, r19	; 0x0c
     9ac:	2b 87       	std	Y+11, r18	; 0x0b
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a0 e0       	ldi	r26, 0x00	; 0
     9bc:	b0 e4       	ldi	r27, 0x40	; 64
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	ea 14       	cp	r14, r10
     9c4:	fb 04       	cpc	r15, r11
     9c6:	0c 05       	cpc	r16, r12
     9c8:	1d 05       	cpc	r17, r13
     9ca:	40 f0       	brcs	.+16     	; 0x9dc <__divsf3+0xf4>
     9cc:	28 2b       	or	r18, r24
     9ce:	39 2b       	or	r19, r25
     9d0:	4a 2b       	or	r20, r26
     9d2:	5b 2b       	or	r21, r27
     9d4:	ea 18       	sub	r14, r10
     9d6:	fb 08       	sbc	r15, r11
     9d8:	0c 09       	sbc	r16, r12
     9da:	1d 09       	sbc	r17, r13
     9dc:	b6 95       	lsr	r27
     9de:	a7 95       	ror	r26
     9e0:	97 95       	ror	r25
     9e2:	87 95       	ror	r24
     9e4:	ee 0c       	add	r14, r14
     9e6:	ff 1c       	adc	r15, r15
     9e8:	00 1f       	adc	r16, r16
     9ea:	11 1f       	adc	r17, r17
     9ec:	6f 5f       	subi	r22, 0xFF	; 255
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255
     9f0:	6f 31       	cpi	r22, 0x1F	; 31
     9f2:	71 05       	cpc	r23, r1
     9f4:	31 f7       	brne	.-52     	; 0x9c2 <__divsf3+0xda>
     9f6:	da 01       	movw	r26, r20
     9f8:	c9 01       	movw	r24, r18
     9fa:	8f 77       	andi	r24, 0x7F	; 127
     9fc:	90 70       	andi	r25, 0x00	; 0
     9fe:	a0 70       	andi	r26, 0x00	; 0
     a00:	b0 70       	andi	r27, 0x00	; 0
     a02:	80 34       	cpi	r24, 0x40	; 64
     a04:	91 05       	cpc	r25, r1
     a06:	a1 05       	cpc	r26, r1
     a08:	b1 05       	cpc	r27, r1
     a0a:	61 f4       	brne	.+24     	; 0xa24 <__divsf3+0x13c>
     a0c:	27 fd       	sbrc	r18, 7
     a0e:	0a c0       	rjmp	.+20     	; 0xa24 <__divsf3+0x13c>
     a10:	e1 14       	cp	r14, r1
     a12:	f1 04       	cpc	r15, r1
     a14:	01 05       	cpc	r16, r1
     a16:	11 05       	cpc	r17, r1
     a18:	29 f0       	breq	.+10     	; 0xa24 <__divsf3+0x13c>
     a1a:	20 5c       	subi	r18, 0xC0	; 192
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	20 78       	andi	r18, 0x80	; 128
     a24:	2d 87       	std	Y+13, r18	; 0x0d
     a26:	3e 87       	std	Y+14, r19	; 0x0e
     a28:	4f 87       	std	Y+15, r20	; 0x0f
     a2a:	58 8b       	std	Y+16, r21	; 0x10
     a2c:	be 01       	movw	r22, r28
     a2e:	67 5f       	subi	r22, 0xF7	; 247
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	cb 01       	movw	r24, r22
     a34:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     a38:	68 96       	adiw	r28, 0x18	; 24
     a3a:	ea e0       	ldi	r30, 0x0A	; 10
     a3c:	0c 94 41 2c 	jmp	0x5882	; 0x5882 <__epilogue_restores__+0x10>

00000a40 <__gtsf2>:
     a40:	a8 e1       	ldi	r26, 0x18	; 24
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	e6 e2       	ldi	r30, 0x26	; 38
     a46:	f5 e0       	ldi	r31, 0x05	; 5
     a48:	0c 94 29 2c 	jmp	0x5852	; 0x5852 <__prologue_saves__+0x18>
     a4c:	69 83       	std	Y+1, r22	; 0x01
     a4e:	7a 83       	std	Y+2, r23	; 0x02
     a50:	8b 83       	std	Y+3, r24	; 0x03
     a52:	9c 83       	std	Y+4, r25	; 0x04
     a54:	2d 83       	std	Y+5, r18	; 0x05
     a56:	3e 83       	std	Y+6, r19	; 0x06
     a58:	4f 83       	std	Y+7, r20	; 0x07
     a5a:	58 87       	std	Y+8, r21	; 0x08
     a5c:	89 e0       	ldi	r24, 0x09	; 9
     a5e:	e8 2e       	mov	r14, r24
     a60:	f1 2c       	mov	r15, r1
     a62:	ec 0e       	add	r14, r28
     a64:	fd 1e       	adc	r15, r29
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	b7 01       	movw	r22, r14
     a6c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     a70:	8e 01       	movw	r16, r28
     a72:	0f 5e       	subi	r16, 0xEF	; 239
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	ce 01       	movw	r24, r28
     a78:	05 96       	adiw	r24, 0x05	; 5
     a7a:	b8 01       	movw	r22, r16
     a7c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     a80:	89 85       	ldd	r24, Y+9	; 0x09
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	40 f0       	brcs	.+16     	; 0xa96 <__gtsf2+0x56>
     a86:	89 89       	ldd	r24, Y+17	; 0x11
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	28 f0       	brcs	.+10     	; 0xa96 <__gtsf2+0x56>
     a8c:	c7 01       	movw	r24, r14
     a8e:	b8 01       	movw	r22, r16
     a90:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fpcmp_parts_f>
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <__gtsf2+0x58>
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	68 96       	adiw	r28, 0x18	; 24
     a9a:	e6 e0       	ldi	r30, 0x06	; 6
     a9c:	0c 94 45 2c 	jmp	0x588a	; 0x588a <__epilogue_restores__+0x18>

00000aa0 <__gesf2>:
     aa0:	a8 e1       	ldi	r26, 0x18	; 24
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	e6 e5       	ldi	r30, 0x56	; 86
     aa6:	f5 e0       	ldi	r31, 0x05	; 5
     aa8:	0c 94 29 2c 	jmp	0x5852	; 0x5852 <__prologue_saves__+0x18>
     aac:	69 83       	std	Y+1, r22	; 0x01
     aae:	7a 83       	std	Y+2, r23	; 0x02
     ab0:	8b 83       	std	Y+3, r24	; 0x03
     ab2:	9c 83       	std	Y+4, r25	; 0x04
     ab4:	2d 83       	std	Y+5, r18	; 0x05
     ab6:	3e 83       	std	Y+6, r19	; 0x06
     ab8:	4f 83       	std	Y+7, r20	; 0x07
     aba:	58 87       	std	Y+8, r21	; 0x08
     abc:	89 e0       	ldi	r24, 0x09	; 9
     abe:	e8 2e       	mov	r14, r24
     ac0:	f1 2c       	mov	r15, r1
     ac2:	ec 0e       	add	r14, r28
     ac4:	fd 1e       	adc	r15, r29
     ac6:	ce 01       	movw	r24, r28
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	b7 01       	movw	r22, r14
     acc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     ad0:	8e 01       	movw	r16, r28
     ad2:	0f 5e       	subi	r16, 0xEF	; 239
     ad4:	1f 4f       	sbci	r17, 0xFF	; 255
     ad6:	ce 01       	movw	r24, r28
     ad8:	05 96       	adiw	r24, 0x05	; 5
     ada:	b8 01       	movw	r22, r16
     adc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     ae0:	89 85       	ldd	r24, Y+9	; 0x09
     ae2:	82 30       	cpi	r24, 0x02	; 2
     ae4:	40 f0       	brcs	.+16     	; 0xaf6 <__gesf2+0x56>
     ae6:	89 89       	ldd	r24, Y+17	; 0x11
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	28 f0       	brcs	.+10     	; 0xaf6 <__gesf2+0x56>
     aec:	c7 01       	movw	r24, r14
     aee:	b8 01       	movw	r22, r16
     af0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fpcmp_parts_f>
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <__gesf2+0x58>
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	68 96       	adiw	r28, 0x18	; 24
     afa:	e6 e0       	ldi	r30, 0x06	; 6
     afc:	0c 94 45 2c 	jmp	0x588a	; 0x588a <__epilogue_restores__+0x18>

00000b00 <__ltsf2>:
     b00:	a8 e1       	ldi	r26, 0x18	; 24
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e6 e8       	ldi	r30, 0x86	; 134
     b06:	f5 e0       	ldi	r31, 0x05	; 5
     b08:	0c 94 29 2c 	jmp	0x5852	; 0x5852 <__prologue_saves__+0x18>
     b0c:	69 83       	std	Y+1, r22	; 0x01
     b0e:	7a 83       	std	Y+2, r23	; 0x02
     b10:	8b 83       	std	Y+3, r24	; 0x03
     b12:	9c 83       	std	Y+4, r25	; 0x04
     b14:	2d 83       	std	Y+5, r18	; 0x05
     b16:	3e 83       	std	Y+6, r19	; 0x06
     b18:	4f 83       	std	Y+7, r20	; 0x07
     b1a:	58 87       	std	Y+8, r21	; 0x08
     b1c:	89 e0       	ldi	r24, 0x09	; 9
     b1e:	e8 2e       	mov	r14, r24
     b20:	f1 2c       	mov	r15, r1
     b22:	ec 0e       	add	r14, r28
     b24:	fd 1e       	adc	r15, r29
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	b7 01       	movw	r22, r14
     b2c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     b30:	8e 01       	movw	r16, r28
     b32:	0f 5e       	subi	r16, 0xEF	; 239
     b34:	1f 4f       	sbci	r17, 0xFF	; 255
     b36:	ce 01       	movw	r24, r28
     b38:	05 96       	adiw	r24, 0x05	; 5
     b3a:	b8 01       	movw	r22, r16
     b3c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     b40:	89 85       	ldd	r24, Y+9	; 0x09
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	40 f0       	brcs	.+16     	; 0xb56 <__ltsf2+0x56>
     b46:	89 89       	ldd	r24, Y+17	; 0x11
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	28 f0       	brcs	.+10     	; 0xb56 <__ltsf2+0x56>
     b4c:	c7 01       	movw	r24, r14
     b4e:	b8 01       	movw	r22, r16
     b50:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fpcmp_parts_f>
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <__ltsf2+0x58>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	68 96       	adiw	r28, 0x18	; 24
     b5a:	e6 e0       	ldi	r30, 0x06	; 6
     b5c:	0c 94 45 2c 	jmp	0x588a	; 0x588a <__epilogue_restores__+0x18>

00000b60 <__floatsisf>:
     b60:	a8 e0       	ldi	r26, 0x08	; 8
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e6 eb       	ldi	r30, 0xB6	; 182
     b66:	f5 e0       	ldi	r31, 0x05	; 5
     b68:	0c 94 26 2c 	jmp	0x584c	; 0x584c <__prologue_saves__+0x12>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	da 01       	movw	r26, r20
     b76:	c9 01       	movw	r24, r18
     b78:	88 27       	eor	r24, r24
     b7a:	b7 fd       	sbrc	r27, 7
     b7c:	83 95       	inc	r24
     b7e:	99 27       	eor	r25, r25
     b80:	aa 27       	eor	r26, r26
     b82:	bb 27       	eor	r27, r27
     b84:	b8 2e       	mov	r11, r24
     b86:	21 15       	cp	r18, r1
     b88:	31 05       	cpc	r19, r1
     b8a:	41 05       	cpc	r20, r1
     b8c:	51 05       	cpc	r21, r1
     b8e:	19 f4       	brne	.+6      	; 0xb96 <__floatsisf+0x36>
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	3a c0       	rjmp	.+116    	; 0xc0a <__floatsisf+0xaa>
     b96:	88 23       	and	r24, r24
     b98:	a9 f0       	breq	.+42     	; 0xbc4 <__floatsisf+0x64>
     b9a:	20 30       	cpi	r18, 0x00	; 0
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	38 07       	cpc	r19, r24
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	48 07       	cpc	r20, r24
     ba4:	80 e8       	ldi	r24, 0x80	; 128
     ba6:	58 07       	cpc	r21, r24
     ba8:	29 f4       	brne	.+10     	; 0xbb4 <__floatsisf+0x54>
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	9f ec       	ldi	r25, 0xCF	; 207
     bb2:	30 c0       	rjmp	.+96     	; 0xc14 <__floatsisf+0xb4>
     bb4:	ee 24       	eor	r14, r14
     bb6:	ff 24       	eor	r15, r15
     bb8:	87 01       	movw	r16, r14
     bba:	e2 1a       	sub	r14, r18
     bbc:	f3 0a       	sbc	r15, r19
     bbe:	04 0b       	sbc	r16, r20
     bc0:	15 0b       	sbc	r17, r21
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <__floatsisf+0x68>
     bc4:	79 01       	movw	r14, r18
     bc6:	8a 01       	movw	r16, r20
     bc8:	8e e1       	ldi	r24, 0x1E	; 30
     bca:	c8 2e       	mov	r12, r24
     bcc:	d1 2c       	mov	r13, r1
     bce:	dc 82       	std	Y+4, r13	; 0x04
     bd0:	cb 82       	std	Y+3, r12	; 0x03
     bd2:	ed 82       	std	Y+5, r14	; 0x05
     bd4:	fe 82       	std	Y+6, r15	; 0x06
     bd6:	0f 83       	std	Y+7, r16	; 0x07
     bd8:	18 87       	std	Y+8, r17	; 0x08
     bda:	c8 01       	movw	r24, r16
     bdc:	b7 01       	movw	r22, r14
     bde:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__clzsi2>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	18 16       	cp	r1, r24
     be6:	19 06       	cpc	r1, r25
     be8:	84 f4       	brge	.+32     	; 0xc0a <__floatsisf+0xaa>
     bea:	08 2e       	mov	r0, r24
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <__floatsisf+0x96>
     bee:	ee 0c       	add	r14, r14
     bf0:	ff 1c       	adc	r15, r15
     bf2:	00 1f       	adc	r16, r16
     bf4:	11 1f       	adc	r17, r17
     bf6:	0a 94       	dec	r0
     bf8:	d2 f7       	brpl	.-12     	; 0xbee <__floatsisf+0x8e>
     bfa:	ed 82       	std	Y+5, r14	; 0x05
     bfc:	fe 82       	std	Y+6, r15	; 0x06
     bfe:	0f 83       	std	Y+7, r16	; 0x07
     c00:	18 87       	std	Y+8, r17	; 0x08
     c02:	c8 1a       	sub	r12, r24
     c04:	d9 0a       	sbc	r13, r25
     c06:	dc 82       	std	Y+4, r13	; 0x04
     c08:	cb 82       	std	Y+3, r12	; 0x03
     c0a:	ba 82       	std	Y+2, r11	; 0x02
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     c14:	28 96       	adiw	r28, 0x08	; 8
     c16:	e9 e0       	ldi	r30, 0x09	; 9
     c18:	0c 94 42 2c 	jmp	0x5884	; 0x5884 <__epilogue_restores__+0x12>

00000c1c <__fixsfsi>:
     c1c:	ac e0       	ldi	r26, 0x0C	; 12
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e4 e1       	ldi	r30, 0x14	; 20
     c22:	f6 e0       	ldi	r31, 0x06	; 6
     c24:	0c 94 2d 2c 	jmp	0x585a	; 0x585a <__prologue_saves__+0x20>
     c28:	69 83       	std	Y+1, r22	; 0x01
     c2a:	7a 83       	std	Y+2, r23	; 0x02
     c2c:	8b 83       	std	Y+3, r24	; 0x03
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	be 01       	movw	r22, r28
     c36:	6b 5f       	subi	r22, 0xFB	; 251
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	61 f1       	breq	.+88     	; 0xc9c <__fixsfsi+0x80>
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	50 f1       	brcs	.+84     	; 0xc9c <__fixsfsi+0x80>
     c48:	84 30       	cpi	r24, 0x04	; 4
     c4a:	21 f4       	brne	.+8      	; 0xc54 <__fixsfsi+0x38>
     c4c:	8e 81       	ldd	r24, Y+6	; 0x06
     c4e:	88 23       	and	r24, r24
     c50:	51 f1       	breq	.+84     	; 0xca6 <__fixsfsi+0x8a>
     c52:	2e c0       	rjmp	.+92     	; 0xcb0 <__fixsfsi+0x94>
     c54:	2f 81       	ldd	r18, Y+7	; 0x07
     c56:	38 85       	ldd	r19, Y+8	; 0x08
     c58:	37 fd       	sbrc	r19, 7
     c5a:	20 c0       	rjmp	.+64     	; 0xc9c <__fixsfsi+0x80>
     c5c:	6e 81       	ldd	r22, Y+6	; 0x06
     c5e:	2f 31       	cpi	r18, 0x1F	; 31
     c60:	31 05       	cpc	r19, r1
     c62:	1c f0       	brlt	.+6      	; 0xc6a <__fixsfsi+0x4e>
     c64:	66 23       	and	r22, r22
     c66:	f9 f0       	breq	.+62     	; 0xca6 <__fixsfsi+0x8a>
     c68:	23 c0       	rjmp	.+70     	; 0xcb0 <__fixsfsi+0x94>
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	82 1b       	sub	r24, r18
     c70:	93 0b       	sbc	r25, r19
     c72:	29 85       	ldd	r18, Y+9	; 0x09
     c74:	3a 85       	ldd	r19, Y+10	; 0x0a
     c76:	4b 85       	ldd	r20, Y+11	; 0x0b
     c78:	5c 85       	ldd	r21, Y+12	; 0x0c
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__fixsfsi+0x68>
     c7c:	56 95       	lsr	r21
     c7e:	47 95       	ror	r20
     c80:	37 95       	ror	r19
     c82:	27 95       	ror	r18
     c84:	8a 95       	dec	r24
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__fixsfsi+0x60>
     c88:	66 23       	and	r22, r22
     c8a:	b1 f0       	breq	.+44     	; 0xcb8 <__fixsfsi+0x9c>
     c8c:	50 95       	com	r21
     c8e:	40 95       	com	r20
     c90:	30 95       	com	r19
     c92:	21 95       	neg	r18
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	4f 4f       	sbci	r20, 0xFF	; 255
     c98:	5f 4f       	sbci	r21, 0xFF	; 255
     c9a:	0e c0       	rjmp	.+28     	; 0xcb8 <__fixsfsi+0x9c>
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	09 c0       	rjmp	.+18     	; 0xcb8 <__fixsfsi+0x9c>
     ca6:	2f ef       	ldi	r18, 0xFF	; 255
     ca8:	3f ef       	ldi	r19, 0xFF	; 255
     caa:	4f ef       	ldi	r20, 0xFF	; 255
     cac:	5f e7       	ldi	r21, 0x7F	; 127
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__fixsfsi+0x9c>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	50 e8       	ldi	r21, 0x80	; 128
     cb8:	b9 01       	movw	r22, r18
     cba:	ca 01       	movw	r24, r20
     cbc:	2c 96       	adiw	r28, 0x0c	; 12
     cbe:	e2 e0       	ldi	r30, 0x02	; 2
     cc0:	0c 94 49 2c 	jmp	0x5892	; 0x5892 <__epilogue_restores__+0x20>

00000cc4 <__floatunsisf>:
     cc4:	a8 e0       	ldi	r26, 0x08	; 8
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e8 e6       	ldi	r30, 0x68	; 104
     cca:	f6 e0       	ldi	r31, 0x06	; 6
     ccc:	0c 94 25 2c 	jmp	0x584a	; 0x584a <__prologue_saves__+0x10>
     cd0:	7b 01       	movw	r14, r22
     cd2:	8c 01       	movw	r16, r24
     cd4:	61 15       	cp	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	81 05       	cpc	r24, r1
     cda:	91 05       	cpc	r25, r1
     cdc:	19 f4       	brne	.+6      	; 0xce4 <__floatunsisf+0x20>
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	60 c0       	rjmp	.+192    	; 0xda4 <__floatunsisf+0xe0>
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	8e e1       	ldi	r24, 0x1E	; 30
     cea:	c8 2e       	mov	r12, r24
     cec:	d1 2c       	mov	r13, r1
     cee:	dc 82       	std	Y+4, r13	; 0x04
     cf0:	cb 82       	std	Y+3, r12	; 0x03
     cf2:	ed 82       	std	Y+5, r14	; 0x05
     cf4:	fe 82       	std	Y+6, r15	; 0x06
     cf6:	0f 83       	std	Y+7, r16	; 0x07
     cf8:	18 87       	std	Y+8, r17	; 0x08
     cfa:	c8 01       	movw	r24, r16
     cfc:	b7 01       	movw	r22, r14
     cfe:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__clzsi2>
     d02:	fc 01       	movw	r30, r24
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	f7 ff       	sbrs	r31, 7
     d08:	3b c0       	rjmp	.+118    	; 0xd80 <__floatunsisf+0xbc>
     d0a:	22 27       	eor	r18, r18
     d0c:	33 27       	eor	r19, r19
     d0e:	2e 1b       	sub	r18, r30
     d10:	3f 0b       	sbc	r19, r31
     d12:	57 01       	movw	r10, r14
     d14:	68 01       	movw	r12, r16
     d16:	02 2e       	mov	r0, r18
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <__floatunsisf+0x5e>
     d1a:	d6 94       	lsr	r13
     d1c:	c7 94       	ror	r12
     d1e:	b7 94       	ror	r11
     d20:	a7 94       	ror	r10
     d22:	0a 94       	dec	r0
     d24:	d2 f7       	brpl	.-12     	; 0xd1a <__floatunsisf+0x56>
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	a0 e0       	ldi	r26, 0x00	; 0
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	04 c0       	rjmp	.+8      	; 0xd40 <__floatunsisf+0x7c>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	aa 1f       	adc	r26, r26
     d3e:	bb 1f       	adc	r27, r27
     d40:	2a 95       	dec	r18
     d42:	d2 f7       	brpl	.-12     	; 0xd38 <__floatunsisf+0x74>
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	a1 09       	sbc	r26, r1
     d48:	b1 09       	sbc	r27, r1
     d4a:	8e 21       	and	r24, r14
     d4c:	9f 21       	and	r25, r15
     d4e:	a0 23       	and	r26, r16
     d50:	b1 23       	and	r27, r17
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	a1 05       	cpc	r26, r1
     d56:	b1 05       	cpc	r27, r1
     d58:	21 f0       	breq	.+8      	; 0xd62 <__floatunsisf+0x9e>
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	4a 29       	or	r20, r10
     d64:	5b 29       	or	r21, r11
     d66:	6c 29       	or	r22, r12
     d68:	7d 29       	or	r23, r13
     d6a:	4d 83       	std	Y+5, r20	; 0x05
     d6c:	5e 83       	std	Y+6, r21	; 0x06
     d6e:	6f 83       	std	Y+7, r22	; 0x07
     d70:	78 87       	std	Y+8, r23	; 0x08
     d72:	8e e1       	ldi	r24, 0x1E	; 30
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	8e 1b       	sub	r24, r30
     d78:	9f 0b       	sbc	r25, r31
     d7a:	9c 83       	std	Y+4, r25	; 0x04
     d7c:	8b 83       	std	Y+3, r24	; 0x03
     d7e:	12 c0       	rjmp	.+36     	; 0xda4 <__floatunsisf+0xe0>
     d80:	30 97       	sbiw	r30, 0x00	; 0
     d82:	81 f0       	breq	.+32     	; 0xda4 <__floatunsisf+0xe0>
     d84:	0e 2e       	mov	r0, r30
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <__floatunsisf+0xcc>
     d88:	ee 0c       	add	r14, r14
     d8a:	ff 1c       	adc	r15, r15
     d8c:	00 1f       	adc	r16, r16
     d8e:	11 1f       	adc	r17, r17
     d90:	0a 94       	dec	r0
     d92:	d2 f7       	brpl	.-12     	; 0xd88 <__floatunsisf+0xc4>
     d94:	ed 82       	std	Y+5, r14	; 0x05
     d96:	fe 82       	std	Y+6, r15	; 0x06
     d98:	0f 83       	std	Y+7, r16	; 0x07
     d9a:	18 87       	std	Y+8, r17	; 0x08
     d9c:	ce 1a       	sub	r12, r30
     d9e:	df 0a       	sbc	r13, r31
     da0:	dc 82       	std	Y+4, r13	; 0x04
     da2:	cb 82       	std	Y+3, r12	; 0x03
     da4:	1a 82       	std	Y+2, r1	; 0x02
     da6:	ce 01       	movw	r24, r28
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     dae:	28 96       	adiw	r28, 0x08	; 8
     db0:	ea e0       	ldi	r30, 0x0A	; 10
     db2:	0c 94 41 2c 	jmp	0x5882	; 0x5882 <__epilogue_restores__+0x10>

00000db6 <__lshrdi3>:
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	60 97       	sbiw	r28, 0x10	; 16
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	a8 2f       	mov	r26, r24
     dd2:	00 23       	and	r16, r16
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <__lshrdi3+0x22>
     dd6:	61 c0       	rjmp	.+194    	; 0xe9a <__lshrdi3+0xe4>
     dd8:	7e 01       	movw	r14, r28
     dda:	08 94       	sec
     ddc:	e1 1c       	adc	r14, r1
     dde:	f1 1c       	adc	r15, r1
     de0:	88 e0       	ldi	r24, 0x08	; 8
     de2:	f7 01       	movw	r30, r14
     de4:	11 92       	st	Z+, r1
     de6:	8a 95       	dec	r24
     de8:	e9 f7       	brne	.-6      	; 0xde4 <__lshrdi3+0x2e>
     dea:	29 83       	std	Y+1, r18	; 0x01
     dec:	3a 83       	std	Y+2, r19	; 0x02
     dee:	4b 83       	std	Y+3, r20	; 0x03
     df0:	5c 83       	std	Y+4, r21	; 0x04
     df2:	6d 83       	std	Y+5, r22	; 0x05
     df4:	7e 83       	std	Y+6, r23	; 0x06
     df6:	af 83       	std	Y+7, r26	; 0x07
     df8:	98 87       	std	Y+8, r25	; 0x08
     dfa:	80 e2       	ldi	r24, 0x20	; 32
     dfc:	80 1b       	sub	r24, r16
     dfe:	e8 2f       	mov	r30, r24
     e00:	ff 27       	eor	r31, r31
     e02:	e7 fd       	sbrc	r30, 7
     e04:	f0 95       	com	r31
     e06:	4d 81       	ldd	r20, Y+5	; 0x05
     e08:	5e 81       	ldd	r21, Y+6	; 0x06
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	18 16       	cp	r1, r24
     e10:	84 f0       	brlt	.+32     	; 0xe32 <__lshrdi3+0x7c>
     e12:	1d 86       	std	Y+13, r1	; 0x0d
     e14:	1e 86       	std	Y+14, r1	; 0x0e
     e16:	1f 86       	std	Y+15, r1	; 0x0f
     e18:	18 8a       	std	Y+16, r1	; 0x10
     e1a:	88 27       	eor	r24, r24
     e1c:	99 27       	eor	r25, r25
     e1e:	8e 1b       	sub	r24, r30
     e20:	9f 0b       	sbc	r25, r31
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <__lshrdi3+0x76>
     e24:	76 95       	lsr	r23
     e26:	67 95       	ror	r22
     e28:	57 95       	ror	r21
     e2a:	47 95       	ror	r20
     e2c:	8a 95       	dec	r24
     e2e:	d2 f7       	brpl	.-12     	; 0xe24 <__lshrdi3+0x6e>
     e30:	28 c0       	rjmp	.+80     	; 0xe82 <__lshrdi3+0xcc>
     e32:	20 2f       	mov	r18, r16
     e34:	33 27       	eor	r19, r19
     e36:	27 fd       	sbrc	r18, 7
     e38:	30 95       	com	r19
     e3a:	db 01       	movw	r26, r22
     e3c:	ca 01       	movw	r24, r20
     e3e:	02 2e       	mov	r0, r18
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <__lshrdi3+0x94>
     e42:	b6 95       	lsr	r27
     e44:	a7 95       	ror	r26
     e46:	97 95       	ror	r25
     e48:	87 95       	ror	r24
     e4a:	0a 94       	dec	r0
     e4c:	d2 f7       	brpl	.-12     	; 0xe42 <__lshrdi3+0x8c>
     e4e:	8d 87       	std	Y+13, r24	; 0x0d
     e50:	9e 87       	std	Y+14, r25	; 0x0e
     e52:	af 87       	std	Y+15, r26	; 0x0f
     e54:	b8 8b       	std	Y+16, r27	; 0x10
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <__lshrdi3+0xaa>
     e58:	44 0f       	add	r20, r20
     e5a:	55 1f       	adc	r21, r21
     e5c:	66 1f       	adc	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	ea 95       	dec	r30
     e62:	d2 f7       	brpl	.-12     	; 0xe58 <__lshrdi3+0xa2>
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	ab 81       	ldd	r26, Y+3	; 0x03
     e6a:	bc 81       	ldd	r27, Y+4	; 0x04
     e6c:	04 c0       	rjmp	.+8      	; 0xe76 <__lshrdi3+0xc0>
     e6e:	b6 95       	lsr	r27
     e70:	a7 95       	ror	r26
     e72:	97 95       	ror	r25
     e74:	87 95       	ror	r24
     e76:	2a 95       	dec	r18
     e78:	d2 f7       	brpl	.-12     	; 0xe6e <__lshrdi3+0xb8>
     e7a:	48 2b       	or	r20, r24
     e7c:	59 2b       	or	r21, r25
     e7e:	6a 2b       	or	r22, r26
     e80:	7b 2b       	or	r23, r27
     e82:	49 87       	std	Y+9, r20	; 0x09
     e84:	5a 87       	std	Y+10, r21	; 0x0a
     e86:	6b 87       	std	Y+11, r22	; 0x0b
     e88:	7c 87       	std	Y+12, r23	; 0x0c
     e8a:	29 85       	ldd	r18, Y+9	; 0x09
     e8c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e8e:	4b 85       	ldd	r20, Y+11	; 0x0b
     e90:	5c 85       	ldd	r21, Y+12	; 0x0c
     e92:	6d 85       	ldd	r22, Y+13	; 0x0d
     e94:	7e 85       	ldd	r23, Y+14	; 0x0e
     e96:	af 85       	ldd	r26, Y+15	; 0x0f
     e98:	98 89       	ldd	r25, Y+16	; 0x10
     e9a:	8a 2f       	mov	r24, r26
     e9c:	60 96       	adiw	r28, 0x10	; 16
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	08 95       	ret

00000eb4 <__clzsi2>:
     eb4:	ef 92       	push	r14
     eb6:	ff 92       	push	r15
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	7b 01       	movw	r14, r22
     ebe:	8c 01       	movw	r16, r24
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	e8 16       	cp	r14, r24
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	f8 06       	cpc	r15, r24
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	08 07       	cpc	r16, r24
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	18 07       	cpc	r17, r24
     ed0:	88 f4       	brcc	.+34     	; 0xef4 <__clzsi2+0x40>
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	e8 16       	cp	r14, r24
     ed6:	f1 04       	cpc	r15, r1
     ed8:	01 05       	cpc	r16, r1
     eda:	11 05       	cpc	r17, r1
     edc:	31 f0       	breq	.+12     	; 0xeea <__clzsi2+0x36>
     ede:	28 f0       	brcs	.+10     	; 0xeea <__clzsi2+0x36>
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	17 c0       	rjmp	.+46     	; 0xf18 <__clzsi2+0x64>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	a0 e0       	ldi	r26, 0x00	; 0
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	12 c0       	rjmp	.+36     	; 0xf18 <__clzsi2+0x64>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	e8 16       	cp	r14, r24
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	f8 06       	cpc	r15, r24
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	08 07       	cpc	r16, r24
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	18 07       	cpc	r17, r24
     f04:	28 f0       	brcs	.+10     	; 0xf10 <__clzsi2+0x5c>
     f06:	88 e1       	ldi	r24, 0x18	; 24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	a0 e0       	ldi	r26, 0x00	; 0
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <__clzsi2+0x64>
     f10:	80 e1       	ldi	r24, 0x10	; 16
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a0 e0       	ldi	r26, 0x00	; 0
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	20 e2       	ldi	r18, 0x20	; 32
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	28 1b       	sub	r18, r24
     f22:	39 0b       	sbc	r19, r25
     f24:	4a 0b       	sbc	r20, r26
     f26:	5b 0b       	sbc	r21, r27
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <__clzsi2+0x7e>
     f2a:	16 95       	lsr	r17
     f2c:	07 95       	ror	r16
     f2e:	f7 94       	ror	r15
     f30:	e7 94       	ror	r14
     f32:	8a 95       	dec	r24
     f34:	d2 f7       	brpl	.-12     	; 0xf2a <__clzsi2+0x76>
     f36:	f7 01       	movw	r30, r14
     f38:	e8 59       	subi	r30, 0x98	; 152
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	80 81       	ld	r24, Z
     f3e:	28 1b       	sub	r18, r24
     f40:	31 09       	sbc	r19, r1
     f42:	41 09       	sbc	r20, r1
     f44:	51 09       	sbc	r21, r1
     f46:	c9 01       	movw	r24, r18
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
     f50:	08 95       	ret

00000f52 <__pack_f>:
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	fc 01       	movw	r30, r24
     f5e:	e4 80       	ldd	r14, Z+4	; 0x04
     f60:	f5 80       	ldd	r15, Z+5	; 0x05
     f62:	06 81       	ldd	r16, Z+6	; 0x06
     f64:	17 81       	ldd	r17, Z+7	; 0x07
     f66:	d1 80       	ldd	r13, Z+1	; 0x01
     f68:	80 81       	ld	r24, Z
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	48 f4       	brcc	.+18     	; 0xf80 <__pack_f+0x2e>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	a0 e1       	ldi	r26, 0x10	; 16
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e8 2a       	or	r14, r24
     f78:	f9 2a       	or	r15, r25
     f7a:	0a 2b       	or	r16, r26
     f7c:	1b 2b       	or	r17, r27
     f7e:	a5 c0       	rjmp	.+330    	; 0x10ca <__pack_f+0x178>
     f80:	84 30       	cpi	r24, 0x04	; 4
     f82:	09 f4       	brne	.+2      	; 0xf86 <__pack_f+0x34>
     f84:	9f c0       	rjmp	.+318    	; 0x10c4 <__pack_f+0x172>
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	21 f4       	brne	.+8      	; 0xf92 <__pack_f+0x40>
     f8a:	ee 24       	eor	r14, r14
     f8c:	ff 24       	eor	r15, r15
     f8e:	87 01       	movw	r16, r14
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <__pack_f+0x4a>
     f92:	e1 14       	cp	r14, r1
     f94:	f1 04       	cpc	r15, r1
     f96:	01 05       	cpc	r16, r1
     f98:	11 05       	cpc	r17, r1
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <__pack_f+0x50>
     f9c:	e0 e0       	ldi	r30, 0x00	; 0
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	96 c0       	rjmp	.+300    	; 0x10ce <__pack_f+0x17c>
     fa2:	62 81       	ldd	r22, Z+2	; 0x02
     fa4:	73 81       	ldd	r23, Z+3	; 0x03
     fa6:	9f ef       	ldi	r25, 0xFF	; 255
     fa8:	62 38       	cpi	r22, 0x82	; 130
     faa:	79 07       	cpc	r23, r25
     fac:	0c f0       	brlt	.+2      	; 0xfb0 <__pack_f+0x5e>
     fae:	5b c0       	rjmp	.+182    	; 0x1066 <__pack_f+0x114>
     fb0:	22 e8       	ldi	r18, 0x82	; 130
     fb2:	3f ef       	ldi	r19, 0xFF	; 255
     fb4:	26 1b       	sub	r18, r22
     fb6:	37 0b       	sbc	r19, r23
     fb8:	2a 31       	cpi	r18, 0x1A	; 26
     fba:	31 05       	cpc	r19, r1
     fbc:	2c f0       	brlt	.+10     	; 0xfc8 <__pack_f+0x76>
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	2a c0       	rjmp	.+84     	; 0x101c <__pack_f+0xca>
     fc8:	b8 01       	movw	r22, r16
     fca:	a7 01       	movw	r20, r14
     fcc:	02 2e       	mov	r0, r18
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <__pack_f+0x86>
     fd0:	76 95       	lsr	r23
     fd2:	67 95       	ror	r22
     fd4:	57 95       	ror	r21
     fd6:	47 95       	ror	r20
     fd8:	0a 94       	dec	r0
     fda:	d2 f7       	brpl	.-12     	; 0xfd0 <__pack_f+0x7e>
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a0 e0       	ldi	r26, 0x00	; 0
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <__pack_f+0x9c>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	aa 1f       	adc	r26, r26
     fec:	bb 1f       	adc	r27, r27
     fee:	2a 95       	dec	r18
     ff0:	d2 f7       	brpl	.-12     	; 0xfe6 <__pack_f+0x94>
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	a1 09       	sbc	r26, r1
     ff6:	b1 09       	sbc	r27, r1
     ff8:	8e 21       	and	r24, r14
     ffa:	9f 21       	and	r25, r15
     ffc:	a0 23       	and	r26, r16
     ffe:	b1 23       	and	r27, r17
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	a1 05       	cpc	r26, r1
    1004:	b1 05       	cpc	r27, r1
    1006:	21 f0       	breq	.+8      	; 0x1010 <__pack_f+0xbe>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	9a 01       	movw	r18, r20
    1012:	ab 01       	movw	r20, r22
    1014:	28 2b       	or	r18, r24
    1016:	39 2b       	or	r19, r25
    1018:	4a 2b       	or	r20, r26
    101a:	5b 2b       	or	r21, r27
    101c:	da 01       	movw	r26, r20
    101e:	c9 01       	movw	r24, r18
    1020:	8f 77       	andi	r24, 0x7F	; 127
    1022:	90 70       	andi	r25, 0x00	; 0
    1024:	a0 70       	andi	r26, 0x00	; 0
    1026:	b0 70       	andi	r27, 0x00	; 0
    1028:	80 34       	cpi	r24, 0x40	; 64
    102a:	91 05       	cpc	r25, r1
    102c:	a1 05       	cpc	r26, r1
    102e:	b1 05       	cpc	r27, r1
    1030:	39 f4       	brne	.+14     	; 0x1040 <__pack_f+0xee>
    1032:	27 ff       	sbrs	r18, 7
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <__pack_f+0xf6>
    1036:	20 5c       	subi	r18, 0xC0	; 192
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	4f 4f       	sbci	r20, 0xFF	; 255
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <__pack_f+0xf6>
    1040:	21 5c       	subi	r18, 0xC1	; 193
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
    1044:	4f 4f       	sbci	r20, 0xFF	; 255
    1046:	5f 4f       	sbci	r21, 0xFF	; 255
    1048:	e0 e0       	ldi	r30, 0x00	; 0
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	20 30       	cpi	r18, 0x00	; 0
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	3a 07       	cpc	r19, r26
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	4a 07       	cpc	r20, r26
    1056:	a0 e4       	ldi	r26, 0x40	; 64
    1058:	5a 07       	cpc	r21, r26
    105a:	10 f0       	brcs	.+4      	; 0x1060 <__pack_f+0x10e>
    105c:	e1 e0       	ldi	r30, 0x01	; 1
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	79 01       	movw	r14, r18
    1062:	8a 01       	movw	r16, r20
    1064:	27 c0       	rjmp	.+78     	; 0x10b4 <__pack_f+0x162>
    1066:	60 38       	cpi	r22, 0x80	; 128
    1068:	71 05       	cpc	r23, r1
    106a:	64 f5       	brge	.+88     	; 0x10c4 <__pack_f+0x172>
    106c:	fb 01       	movw	r30, r22
    106e:	e1 58       	subi	r30, 0x81	; 129
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	d8 01       	movw	r26, r16
    1074:	c7 01       	movw	r24, r14
    1076:	8f 77       	andi	r24, 0x7F	; 127
    1078:	90 70       	andi	r25, 0x00	; 0
    107a:	a0 70       	andi	r26, 0x00	; 0
    107c:	b0 70       	andi	r27, 0x00	; 0
    107e:	80 34       	cpi	r24, 0x40	; 64
    1080:	91 05       	cpc	r25, r1
    1082:	a1 05       	cpc	r26, r1
    1084:	b1 05       	cpc	r27, r1
    1086:	39 f4       	brne	.+14     	; 0x1096 <__pack_f+0x144>
    1088:	e7 fe       	sbrs	r14, 7
    108a:	0d c0       	rjmp	.+26     	; 0x10a6 <__pack_f+0x154>
    108c:	80 e4       	ldi	r24, 0x40	; 64
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	04 c0       	rjmp	.+8      	; 0x109e <__pack_f+0x14c>
    1096:	8f e3       	ldi	r24, 0x3F	; 63
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a0 e0       	ldi	r26, 0x00	; 0
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e8 0e       	add	r14, r24
    10a0:	f9 1e       	adc	r15, r25
    10a2:	0a 1f       	adc	r16, r26
    10a4:	1b 1f       	adc	r17, r27
    10a6:	17 ff       	sbrs	r17, 7
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <__pack_f+0x162>
    10aa:	16 95       	lsr	r17
    10ac:	07 95       	ror	r16
    10ae:	f7 94       	ror	r15
    10b0:	e7 94       	ror	r14
    10b2:	31 96       	adiw	r30, 0x01	; 1
    10b4:	87 e0       	ldi	r24, 0x07	; 7
    10b6:	16 95       	lsr	r17
    10b8:	07 95       	ror	r16
    10ba:	f7 94       	ror	r15
    10bc:	e7 94       	ror	r14
    10be:	8a 95       	dec	r24
    10c0:	d1 f7       	brne	.-12     	; 0x10b6 <__pack_f+0x164>
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <__pack_f+0x17c>
    10c4:	ee 24       	eor	r14, r14
    10c6:	ff 24       	eor	r15, r15
    10c8:	87 01       	movw	r16, r14
    10ca:	ef ef       	ldi	r30, 0xFF	; 255
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	6e 2f       	mov	r22, r30
    10d0:	67 95       	ror	r22
    10d2:	66 27       	eor	r22, r22
    10d4:	67 95       	ror	r22
    10d6:	90 2f       	mov	r25, r16
    10d8:	9f 77       	andi	r25, 0x7F	; 127
    10da:	d7 94       	ror	r13
    10dc:	dd 24       	eor	r13, r13
    10de:	d7 94       	ror	r13
    10e0:	8e 2f       	mov	r24, r30
    10e2:	86 95       	lsr	r24
    10e4:	49 2f       	mov	r20, r25
    10e6:	46 2b       	or	r20, r22
    10e8:	58 2f       	mov	r21, r24
    10ea:	5d 29       	or	r21, r13
    10ec:	b7 01       	movw	r22, r14
    10ee:	ca 01       	movw	r24, r20
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	df 90       	pop	r13
    10fa:	08 95       	ret

000010fc <__unpack_f>:
    10fc:	fc 01       	movw	r30, r24
    10fe:	db 01       	movw	r26, r22
    1100:	40 81       	ld	r20, Z
    1102:	51 81       	ldd	r21, Z+1	; 0x01
    1104:	22 81       	ldd	r18, Z+2	; 0x02
    1106:	62 2f       	mov	r22, r18
    1108:	6f 77       	andi	r22, 0x7F	; 127
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	22 1f       	adc	r18, r18
    110e:	22 27       	eor	r18, r18
    1110:	22 1f       	adc	r18, r18
    1112:	93 81       	ldd	r25, Z+3	; 0x03
    1114:	89 2f       	mov	r24, r25
    1116:	88 0f       	add	r24, r24
    1118:	82 2b       	or	r24, r18
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	99 1f       	adc	r25, r25
    1120:	99 27       	eor	r25, r25
    1122:	99 1f       	adc	r25, r25
    1124:	11 96       	adiw	r26, 0x01	; 1
    1126:	9c 93       	st	X, r25
    1128:	11 97       	sbiw	r26, 0x01	; 1
    112a:	21 15       	cp	r18, r1
    112c:	31 05       	cpc	r19, r1
    112e:	a9 f5       	brne	.+106    	; 0x119a <__unpack_f+0x9e>
    1130:	41 15       	cp	r20, r1
    1132:	51 05       	cpc	r21, r1
    1134:	61 05       	cpc	r22, r1
    1136:	71 05       	cpc	r23, r1
    1138:	11 f4       	brne	.+4      	; 0x113e <__unpack_f+0x42>
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	37 c0       	rjmp	.+110    	; 0x11ac <__unpack_f+0xb0>
    113e:	82 e8       	ldi	r24, 0x82	; 130
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	13 96       	adiw	r26, 0x03	; 3
    1144:	9c 93       	st	X, r25
    1146:	8e 93       	st	-X, r24
    1148:	12 97       	sbiw	r26, 0x02	; 2
    114a:	9a 01       	movw	r18, r20
    114c:	ab 01       	movw	r20, r22
    114e:	67 e0       	ldi	r22, 0x07	; 7
    1150:	22 0f       	add	r18, r18
    1152:	33 1f       	adc	r19, r19
    1154:	44 1f       	adc	r20, r20
    1156:	55 1f       	adc	r21, r21
    1158:	6a 95       	dec	r22
    115a:	d1 f7       	brne	.-12     	; 0x1150 <__unpack_f+0x54>
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	8c 93       	st	X, r24
    1160:	0d c0       	rjmp	.+26     	; 0x117c <__unpack_f+0x80>
    1162:	22 0f       	add	r18, r18
    1164:	33 1f       	adc	r19, r19
    1166:	44 1f       	adc	r20, r20
    1168:	55 1f       	adc	r21, r21
    116a:	12 96       	adiw	r26, 0x02	; 2
    116c:	8d 91       	ld	r24, X+
    116e:	9c 91       	ld	r25, X
    1170:	13 97       	sbiw	r26, 0x03	; 3
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	13 96       	adiw	r26, 0x03	; 3
    1176:	9c 93       	st	X, r25
    1178:	8e 93       	st	-X, r24
    117a:	12 97       	sbiw	r26, 0x02	; 2
    117c:	20 30       	cpi	r18, 0x00	; 0
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	38 07       	cpc	r19, r24
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	48 07       	cpc	r20, r24
    1186:	80 e4       	ldi	r24, 0x40	; 64
    1188:	58 07       	cpc	r21, r24
    118a:	58 f3       	brcs	.-42     	; 0x1162 <__unpack_f+0x66>
    118c:	14 96       	adiw	r26, 0x04	; 4
    118e:	2d 93       	st	X+, r18
    1190:	3d 93       	st	X+, r19
    1192:	4d 93       	st	X+, r20
    1194:	5c 93       	st	X, r21
    1196:	17 97       	sbiw	r26, 0x07	; 7
    1198:	08 95       	ret
    119a:	2f 3f       	cpi	r18, 0xFF	; 255
    119c:	31 05       	cpc	r19, r1
    119e:	79 f4       	brne	.+30     	; 0x11be <__unpack_f+0xc2>
    11a0:	41 15       	cp	r20, r1
    11a2:	51 05       	cpc	r21, r1
    11a4:	61 05       	cpc	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	19 f4       	brne	.+6      	; 0x11b0 <__unpack_f+0xb4>
    11aa:	84 e0       	ldi	r24, 0x04	; 4
    11ac:	8c 93       	st	X, r24
    11ae:	08 95       	ret
    11b0:	64 ff       	sbrs	r22, 4
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <__unpack_f+0xbe>
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	8c 93       	st	X, r24
    11b8:	12 c0       	rjmp	.+36     	; 0x11de <__unpack_f+0xe2>
    11ba:	1c 92       	st	X, r1
    11bc:	10 c0       	rjmp	.+32     	; 0x11de <__unpack_f+0xe2>
    11be:	2f 57       	subi	r18, 0x7F	; 127
    11c0:	30 40       	sbci	r19, 0x00	; 0
    11c2:	13 96       	adiw	r26, 0x03	; 3
    11c4:	3c 93       	st	X, r19
    11c6:	2e 93       	st	-X, r18
    11c8:	12 97       	sbiw	r26, 0x02	; 2
    11ca:	83 e0       	ldi	r24, 0x03	; 3
    11cc:	8c 93       	st	X, r24
    11ce:	87 e0       	ldi	r24, 0x07	; 7
    11d0:	44 0f       	add	r20, r20
    11d2:	55 1f       	adc	r21, r21
    11d4:	66 1f       	adc	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	8a 95       	dec	r24
    11da:	d1 f7       	brne	.-12     	; 0x11d0 <__unpack_f+0xd4>
    11dc:	70 64       	ori	r23, 0x40	; 64
    11de:	14 96       	adiw	r26, 0x04	; 4
    11e0:	4d 93       	st	X+, r20
    11e2:	5d 93       	st	X+, r21
    11e4:	6d 93       	st	X+, r22
    11e6:	7c 93       	st	X, r23
    11e8:	17 97       	sbiw	r26, 0x07	; 7
    11ea:	08 95       	ret

000011ec <__fpcmp_parts_f>:
    11ec:	1f 93       	push	r17
    11ee:	dc 01       	movw	r26, r24
    11f0:	fb 01       	movw	r30, r22
    11f2:	9c 91       	ld	r25, X
    11f4:	92 30       	cpi	r25, 0x02	; 2
    11f6:	08 f4       	brcc	.+2      	; 0x11fa <__fpcmp_parts_f+0xe>
    11f8:	47 c0       	rjmp	.+142    	; 0x1288 <__fpcmp_parts_f+0x9c>
    11fa:	80 81       	ld	r24, Z
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <__fpcmp_parts_f+0x16>
    1200:	43 c0       	rjmp	.+134    	; 0x1288 <__fpcmp_parts_f+0x9c>
    1202:	94 30       	cpi	r25, 0x04	; 4
    1204:	51 f4       	brne	.+20     	; 0x121a <__fpcmp_parts_f+0x2e>
    1206:	11 96       	adiw	r26, 0x01	; 1
    1208:	1c 91       	ld	r17, X
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	99 f5       	brne	.+102    	; 0x1274 <__fpcmp_parts_f+0x88>
    120e:	81 81       	ldd	r24, Z+1	; 0x01
    1210:	68 2f       	mov	r22, r24
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	61 1b       	sub	r22, r17
    1216:	71 09       	sbc	r23, r1
    1218:	3f c0       	rjmp	.+126    	; 0x1298 <__fpcmp_parts_f+0xac>
    121a:	84 30       	cpi	r24, 0x04	; 4
    121c:	21 f0       	breq	.+8      	; 0x1226 <__fpcmp_parts_f+0x3a>
    121e:	92 30       	cpi	r25, 0x02	; 2
    1220:	31 f4       	brne	.+12     	; 0x122e <__fpcmp_parts_f+0x42>
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	b9 f1       	breq	.+110    	; 0x1294 <__fpcmp_parts_f+0xa8>
    1226:	81 81       	ldd	r24, Z+1	; 0x01
    1228:	88 23       	and	r24, r24
    122a:	89 f1       	breq	.+98     	; 0x128e <__fpcmp_parts_f+0xa2>
    122c:	2d c0       	rjmp	.+90     	; 0x1288 <__fpcmp_parts_f+0x9c>
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	1c 91       	ld	r17, X
    1232:	11 97       	sbiw	r26, 0x01	; 1
    1234:	82 30       	cpi	r24, 0x02	; 2
    1236:	f1 f0       	breq	.+60     	; 0x1274 <__fpcmp_parts_f+0x88>
    1238:	81 81       	ldd	r24, Z+1	; 0x01
    123a:	18 17       	cp	r17, r24
    123c:	d9 f4       	brne	.+54     	; 0x1274 <__fpcmp_parts_f+0x88>
    123e:	12 96       	adiw	r26, 0x02	; 2
    1240:	2d 91       	ld	r18, X+
    1242:	3c 91       	ld	r19, X
    1244:	13 97       	sbiw	r26, 0x03	; 3
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	82 17       	cp	r24, r18
    124c:	93 07       	cpc	r25, r19
    124e:	94 f0       	brlt	.+36     	; 0x1274 <__fpcmp_parts_f+0x88>
    1250:	28 17       	cp	r18, r24
    1252:	39 07       	cpc	r19, r25
    1254:	bc f0       	brlt	.+46     	; 0x1284 <__fpcmp_parts_f+0x98>
    1256:	14 96       	adiw	r26, 0x04	; 4
    1258:	8d 91       	ld	r24, X+
    125a:	9d 91       	ld	r25, X+
    125c:	0d 90       	ld	r0, X+
    125e:	bc 91       	ld	r27, X
    1260:	a0 2d       	mov	r26, r0
    1262:	24 81       	ldd	r18, Z+4	; 0x04
    1264:	35 81       	ldd	r19, Z+5	; 0x05
    1266:	46 81       	ldd	r20, Z+6	; 0x06
    1268:	57 81       	ldd	r21, Z+7	; 0x07
    126a:	28 17       	cp	r18, r24
    126c:	39 07       	cpc	r19, r25
    126e:	4a 07       	cpc	r20, r26
    1270:	5b 07       	cpc	r21, r27
    1272:	18 f4       	brcc	.+6      	; 0x127a <__fpcmp_parts_f+0x8e>
    1274:	11 23       	and	r17, r17
    1276:	41 f0       	breq	.+16     	; 0x1288 <__fpcmp_parts_f+0x9c>
    1278:	0a c0       	rjmp	.+20     	; 0x128e <__fpcmp_parts_f+0xa2>
    127a:	82 17       	cp	r24, r18
    127c:	93 07       	cpc	r25, r19
    127e:	a4 07       	cpc	r26, r20
    1280:	b5 07       	cpc	r27, r21
    1282:	40 f4       	brcc	.+16     	; 0x1294 <__fpcmp_parts_f+0xa8>
    1284:	11 23       	and	r17, r17
    1286:	19 f0       	breq	.+6      	; 0x128e <__fpcmp_parts_f+0xa2>
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <__fpcmp_parts_f+0xac>
    128e:	6f ef       	ldi	r22, 0xFF	; 255
    1290:	7f ef       	ldi	r23, 0xFF	; 255
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <__fpcmp_parts_f+0xac>
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	cb 01       	movw	r24, r22
    129a:	1f 91       	pop	r17
    129c:	08 95       	ret

0000129e <DIO_VidSetPinDirection>:
#include "../Serivecs_driver/BIT_MATH.h"

/* Lower Layer Interface Files*/
#include"DIO_private.h"

void DIO_VidSetPinDirection (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Dir ) {
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	27 97       	sbiw	r28, 0x07	; 7
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	6a 83       	std	Y+2, r22	; 0x02
    12b6:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Dir ){
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <DIO_VidSetPinDirection+0x22>
    12be:	6f c0       	rjmp	.+222    	; 0x139e <DIO_VidSetPinDirection+0x100>
		switch (Copy_U8Port){
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	3f 83       	std	Y+7, r19	; 0x07
    12c8:	2e 83       	std	Y+6, r18	; 0x06
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	9f 81       	ldd	r25, Y+7	; 0x07
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	49 f1       	breq	.+82     	; 0x1326 <DIO_VidSetPinDirection+0x88>
    12d4:	2e 81       	ldd	r18, Y+6	; 0x06
    12d6:	3f 81       	ldd	r19, Y+7	; 0x07
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <DIO_VidSetPinDirection+0x4a>
    12de:	8e 81       	ldd	r24, Y+6	; 0x06
    12e0:	9f 81       	ldd	r25, Y+7	; 0x07
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	61 f0       	breq	.+24     	; 0x12fe <DIO_VidSetPinDirection+0x60>
    12e6:	d2 c0       	rjmp	.+420    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
    12e8:	2e 81       	ldd	r18, Y+6	; 0x06
    12ea:	3f 81       	ldd	r19, Y+7	; 0x07
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	71 f1       	breq	.+92     	; 0x134e <DIO_VidSetPinDirection+0xb0>
    12f2:	8e 81       	ldd	r24, Y+6	; 0x06
    12f4:	9f 81       	ldd	r25, Y+7	; 0x07
    12f6:	83 30       	cpi	r24, 0x03	; 3
    12f8:	91 05       	cpc	r25, r1
    12fa:	e9 f1       	breq	.+122    	; 0x1376 <DIO_VidSetPinDirection+0xd8>
    12fc:	c7 c0       	rjmp	.+398    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    SET_BIT(DDRA,Copy_U8Pin);
    12fe:	aa e3       	ldi	r26, 0x3A	; 58
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ea e3       	ldi	r30, 0x3A	; 58
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_VidSetPinDirection+0x7e>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_VidSetPinDirection+0x7a>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	b3 c0       	rjmp	.+358    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(DDRB,Copy_U8Pin);
    1326:	a7 e3       	ldi	r26, 0x37	; 55
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e7 e3       	ldi	r30, 0x37	; 55
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_VidSetPinDirection+0xa6>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_VidSetPinDirection+0xa2>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	9f c0       	rjmp	.+318    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(DDRC,Copy_U8Pin);
    134e:	a4 e3       	ldi	r26, 0x34	; 52
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_VidSetPinDirection+0xce>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_VidSetPinDirection+0xca>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	8b c0       	rjmp	.+278    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(DDRD,Copy_U8Pin);
    1376:	a1 e3       	ldi	r26, 0x31	; 49
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e1 e3       	ldi	r30, 0x31	; 49
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_VidSetPinDirection+0xf6>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_VidSetPinDirection+0xf2>
    1398:	84 2b       	or	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	77 c0       	rjmp	.+238    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Dir ) {
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	88 23       	and	r24, r24
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <DIO_VidSetPinDirection+0x108>
    13a4:	73 c0       	rjmp	.+230    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
		switch (Copy_U8Port){
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3d 83       	std	Y+5, r19	; 0x05
    13ae:	2c 83       	std	Y+4, r18	; 0x04
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	59 f1       	breq	.+86     	; 0x1410 <DIO_VidSetPinDirection+0x172>
    13ba:	2c 81       	ldd	r18, Y+4	; 0x04
    13bc:	3d 81       	ldd	r19, Y+5	; 0x05
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	2c f4       	brge	.+10     	; 0x13ce <DIO_VidSetPinDirection+0x130>
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	69 f0       	breq	.+26     	; 0x13e6 <DIO_VidSetPinDirection+0x148>
    13cc:	5f c0       	rjmp	.+190    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
    13ce:	2c 81       	ldd	r18, Y+4	; 0x04
    13d0:	3d 81       	ldd	r19, Y+5	; 0x05
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	89 f1       	breq	.+98     	; 0x143a <DIO_VidSetPinDirection+0x19c>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DIO_VidSetPinDirection+0x146>
    13e2:	40 c0       	rjmp	.+128    	; 0x1464 <DIO_VidSetPinDirection+0x1c6>
    13e4:	53 c0       	rjmp	.+166    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    CLR_BIT(DDRA,Copy_U8Pin);
    13e6:	aa e3       	ldi	r26, 0x3A	; 58
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ea e3       	ldi	r30, 0x3A	; 58
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_VidSetPinDirection+0x166>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_VidSetPinDirection+0x162>
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	3e c0       	rjmp	.+124    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(DDRB,Copy_U8Pin);
    1410:	a7 e3       	ldi	r26, 0x37	; 55
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e7 e3       	ldi	r30, 0x37	; 55
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_VidSetPinDirection+0x190>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_VidSetPinDirection+0x18c>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	29 c0       	rjmp	.+82     	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(DDRC,Copy_U8Pin);
    143a:	a4 e3       	ldi	r26, 0x34	; 52
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e4 e3       	ldi	r30, 0x34	; 52
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_VidSetPinDirection+0x1ba>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_VidSetPinDirection+0x1b6>
    145c:	80 95       	com	r24
    145e:	84 23       	and	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	14 c0       	rjmp	.+40     	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(DDRD,Copy_U8Pin);
    1464:	a1 e3       	ldi	r26, 0x31	; 49
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e1 e3       	ldi	r30, 0x31	; 49
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_VidSetPinDirection+0x1e4>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_VidSetPinDirection+0x1e0>
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if 
}//end FUNC DIO_VidSetPinDirection
    148c:	27 96       	adiw	r28, 0x07	; 7
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection (u8 Copy_U8Port , u8 Copy_U8Dir ) {
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <DIO_VidSetPortDirection+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <DIO_VidSetPortDirection+0x8>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	3c 83       	std	Y+4, r19	; 0x04
    14b6:	2b 83       	std	Y+3, r18	; 0x03
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	91 05       	cpc	r25, r1
    14c0:	d1 f0       	breq	.+52     	; 0x14f6 <DIO_VidSetPortDirection+0x58>
    14c2:	2b 81       	ldd	r18, Y+3	; 0x03
    14c4:	3c 81       	ldd	r19, Y+4	; 0x04
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	2c f4       	brge	.+10     	; 0x14d6 <DIO_VidSetPortDirection+0x38>
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	61 f0       	breq	.+24     	; 0x14ec <DIO_VidSetPortDirection+0x4e>
    14d4:	1e c0       	rjmp	.+60     	; 0x1512 <DIO_VidSetPortDirection+0x74>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	81 f0       	breq	.+32     	; 0x1500 <DIO_VidSetPortDirection+0x62>
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	83 30       	cpi	r24, 0x03	; 3
    14e6:	91 05       	cpc	r25, r1
    14e8:	81 f0       	breq	.+32     	; 0x150a <DIO_VidSetPortDirection+0x6c>
    14ea:	13 c0       	rjmp	.+38     	; 0x1512 <DIO_VidSetPortDirection+0x74>
		case 0 : 
			DDRA = Copy_U8Dir ;
    14ec:	ea e3       	ldi	r30, 0x3A	; 58
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	80 83       	st	Z, r24
    14f4:	0e c0       	rjmp	.+28     	; 0x1512 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 1 : 
			DDRB = Copy_U8Dir ;
    14f6:	e7 e3       	ldi	r30, 0x37	; 55
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 83       	st	Z, r24
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <DIO_VidSetPortDirection+0x74>
			break ;			
		case 2 : 
			DDRC = Copy_U8Dir ;
    1500:	e4 e3       	ldi	r30, 0x34	; 52
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	80 83       	st	Z, r24
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 3 : 
			DDRD = Copy_U8Dir ;
    150a:	e1 e3       	ldi	r30, 0x31	; 49
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	80 83       	st	Z, r24
			break ; 
		}//end switch
}// end FUNC DIO_VidSetPortDirection
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Val ) {
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	27 97       	sbiw	r28, 0x07	; 7
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	6a 83       	std	Y+2, r22	; 0x02
    1538:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Val ){
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	09 f0       	breq	.+2      	; 0x1542 <DIO_VidSetPinValue+0x22>
    1540:	6f c0       	rjmp	.+222    	; 0x1620 <DIO_VidSetPinValue+0x100>
		switch (Copy_U8Port){
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	3f 83       	std	Y+7, r19	; 0x07
    154a:	2e 83       	std	Y+6, r18	; 0x06
    154c:	8e 81       	ldd	r24, Y+6	; 0x06
    154e:	9f 81       	ldd	r25, Y+7	; 0x07
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	91 05       	cpc	r25, r1
    1554:	49 f1       	breq	.+82     	; 0x15a8 <DIO_VidSetPinValue+0x88>
    1556:	2e 81       	ldd	r18, Y+6	; 0x06
    1558:	3f 81       	ldd	r19, Y+7	; 0x07
    155a:	22 30       	cpi	r18, 0x02	; 2
    155c:	31 05       	cpc	r19, r1
    155e:	2c f4       	brge	.+10     	; 0x156a <DIO_VidSetPinValue+0x4a>
    1560:	8e 81       	ldd	r24, Y+6	; 0x06
    1562:	9f 81       	ldd	r25, Y+7	; 0x07
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	61 f0       	breq	.+24     	; 0x1580 <DIO_VidSetPinValue+0x60>
    1568:	d2 c0       	rjmp	.+420    	; 0x170e <DIO_VidSetPinValue+0x1ee>
    156a:	2e 81       	ldd	r18, Y+6	; 0x06
    156c:	3f 81       	ldd	r19, Y+7	; 0x07
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	71 f1       	breq	.+92     	; 0x15d0 <DIO_VidSetPinValue+0xb0>
    1574:	8e 81       	ldd	r24, Y+6	; 0x06
    1576:	9f 81       	ldd	r25, Y+7	; 0x07
    1578:	83 30       	cpi	r24, 0x03	; 3
    157a:	91 05       	cpc	r25, r1
    157c:	e9 f1       	breq	.+122    	; 0x15f8 <DIO_VidSetPinValue+0xd8>
    157e:	c7 c0       	rjmp	.+398    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    SET_BIT(PORTA,Copy_U8Pin);
    1580:	ab e3       	ldi	r26, 0x3B	; 59
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_VidSetPinValue+0x7e>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_VidSetPinValue+0x7a>
    15a2:	84 2b       	or	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	b3 c0       	rjmp	.+358    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(PORTB,Copy_U8Pin);
    15a8:	a8 e3       	ldi	r26, 0x38	; 56
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e8 e3       	ldi	r30, 0x38	; 56
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_VidSetPinValue+0xa6>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_VidSetPinValue+0xa2>
    15ca:	84 2b       	or	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	9f c0       	rjmp	.+318    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(PORTC,Copy_U8Pin);
    15d0:	a5 e3       	ldi	r26, 0x35	; 53
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e3       	ldi	r30, 0x35	; 53
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_VidSetPinValue+0xce>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_VidSetPinValue+0xca>
    15f2:	84 2b       	or	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	8b c0       	rjmp	.+278    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(PORTD,Copy_U8Pin);
    15f8:	a2 e3       	ldi	r26, 0x32	; 50
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e2 e3       	ldi	r30, 0x32	; 50
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_VidSetPinValue+0xf6>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_VidSetPinValue+0xf2>
    161a:	84 2b       	or	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	77 c0       	rjmp	.+238    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Val){
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	88 23       	and	r24, r24
    1624:	09 f0       	breq	.+2      	; 0x1628 <DIO_VidSetPinValue+0x108>
    1626:	73 c0       	rjmp	.+230    	; 0x170e <DIO_VidSetPinValue+0x1ee>
		switch (Copy_U8Port){
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	3d 83       	std	Y+5, r19	; 0x05
    1630:	2c 83       	std	Y+4, r18	; 0x04
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	91 05       	cpc	r25, r1
    163a:	59 f1       	breq	.+86     	; 0x1692 <DIO_VidSetPinValue+0x172>
    163c:	2c 81       	ldd	r18, Y+4	; 0x04
    163e:	3d 81       	ldd	r19, Y+5	; 0x05
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	2c f4       	brge	.+10     	; 0x1650 <DIO_VidSetPinValue+0x130>
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	69 f0       	breq	.+26     	; 0x1668 <DIO_VidSetPinValue+0x148>
    164e:	5f c0       	rjmp	.+190    	; 0x170e <DIO_VidSetPinValue+0x1ee>
    1650:	2c 81       	ldd	r18, Y+4	; 0x04
    1652:	3d 81       	ldd	r19, Y+5	; 0x05
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	89 f1       	breq	.+98     	; 0x16bc <DIO_VidSetPinValue+0x19c>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	91 05       	cpc	r25, r1
    1662:	09 f4       	brne	.+2      	; 0x1666 <DIO_VidSetPinValue+0x146>
    1664:	40 c0       	rjmp	.+128    	; 0x16e6 <DIO_VidSetPinValue+0x1c6>
    1666:	53 c0       	rjmp	.+166    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    CLR_BIT(PORTA,Copy_U8Pin);
    1668:	ab e3       	ldi	r26, 0x3B	; 59
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	eb e3       	ldi	r30, 0x3B	; 59
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_VidSetPinValue+0x166>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_VidSetPinValue+0x162>
    168a:	80 95       	com	r24
    168c:	84 23       	and	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	3e c0       	rjmp	.+124    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(PORTB,Copy_U8Pin);
    1692:	a8 e3       	ldi	r26, 0x38	; 56
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e8 e3       	ldi	r30, 0x38	; 56
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_VidSetPinValue+0x190>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_VidSetPinValue+0x18c>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	29 c0       	rjmp	.+82     	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(PORTC,Copy_U8Pin);
    16bc:	a5 e3       	ldi	r26, 0x35	; 53
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e3       	ldi	r30, 0x35	; 53
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_VidSetPinValue+0x1ba>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_VidSetPinValue+0x1b6>
    16de:	80 95       	com	r24
    16e0:	84 23       	and	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	14 c0       	rjmp	.+40     	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(PORTD,Copy_U8Pin);
    16e6:	a2 e3       	ldi	r26, 0x32	; 50
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e2 e3       	ldi	r30, 0x32	; 50
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_VidSetPinValue+0x1e4>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_VidSetPinValue+0x1e0>
    1708:	80 95       	com	r24
    170a:	84 23       	and	r24, r20
    170c:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if
}// end FUNC DIO_VidSetPinValue
    170e:	27 96       	adiw	r28, 0x07	; 7
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue (u8 Copy_U8Port , u8 Copy_U8Val ) {
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <DIO_VidSetPortValue+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <DIO_VidSetPortValue+0x8>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3c 83       	std	Y+4, r19	; 0x04
    1738:	2b 83       	std	Y+3, r18	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	91 05       	cpc	r25, r1
    1742:	d1 f0       	breq	.+52     	; 0x1778 <DIO_VidSetPortValue+0x58>
    1744:	2b 81       	ldd	r18, Y+3	; 0x03
    1746:	3c 81       	ldd	r19, Y+4	; 0x04
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	2c f4       	brge	.+10     	; 0x1758 <DIO_VidSetPortValue+0x38>
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	61 f0       	breq	.+24     	; 0x176e <DIO_VidSetPortValue+0x4e>
    1756:	1e c0       	rjmp	.+60     	; 0x1794 <DIO_VidSetPortValue+0x74>
    1758:	2b 81       	ldd	r18, Y+3	; 0x03
    175a:	3c 81       	ldd	r19, Y+4	; 0x04
    175c:	22 30       	cpi	r18, 0x02	; 2
    175e:	31 05       	cpc	r19, r1
    1760:	81 f0       	breq	.+32     	; 0x1782 <DIO_VidSetPortValue+0x62>
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	83 30       	cpi	r24, 0x03	; 3
    1768:	91 05       	cpc	r25, r1
    176a:	81 f0       	breq	.+32     	; 0x178c <DIO_VidSetPortValue+0x6c>
    176c:	13 c0       	rjmp	.+38     	; 0x1794 <DIO_VidSetPortValue+0x74>
		case 0 : 
			PORTA = Copy_U8Val ;
    176e:	eb e3       	ldi	r30, 0x3B	; 59
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	80 83       	st	Z, r24
    1776:	0e c0       	rjmp	.+28     	; 0x1794 <DIO_VidSetPortValue+0x74>
			break ;  
		case 1 : 
			PORTB = Copy_U8Val ;
    1778:	e8 e3       	ldi	r30, 0x38	; 56
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	80 83       	st	Z, r24
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <DIO_VidSetPortValue+0x74>
			break ;			
		case 2 : 
			PORTC = Copy_U8Val ;
    1782:	e5 e3       	ldi	r30, 0x35	; 53
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	80 83       	st	Z, r24
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <DIO_VidSetPortValue+0x74>
			break ;  
		case 3 : 
			PORTD = Copy_U8Val ;
    178c:	e2 e3       	ldi	r30, 0x32	; 50
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	80 83       	st	Z, r24
			break ; 
		}//end switch
}//end FUNC DIO_VidSetPortValue
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <DIO_VidTogglePinValue>:
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <DIO_VidTogglePinValue+0x6>
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <DIO_VidTogglePinValue+0x8>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3c 83       	std	Y+4, r19	; 0x04
    17ba:	2b 83       	std	Y+3, r18	; 0x03
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	49 f1       	breq	.+82     	; 0x1818 <DIO_VidTogglePinValue+0x76>
    17c6:	2b 81       	ldd	r18, Y+3	; 0x03
    17c8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	2c f4       	brge	.+10     	; 0x17da <DIO_VidTogglePinValue+0x38>
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <DIO_VidTogglePinValue+0x4e>
    17d8:	5a c0       	rjmp	.+180    	; 0x188e <DIO_VidTogglePinValue+0xec>
    17da:	2b 81       	ldd	r18, Y+3	; 0x03
    17dc:	3c 81       	ldd	r19, Y+4	; 0x04
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	71 f1       	breq	.+92     	; 0x1840 <DIO_VidTogglePinValue+0x9e>
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	91 05       	cpc	r25, r1
    17ec:	e9 f1       	breq	.+122    	; 0x1868 <DIO_VidTogglePinValue+0xc6>
    17ee:	4f c0       	rjmp	.+158    	; 0x188e <DIO_VidTogglePinValue+0xec>
		case 0 : 
		    TOGGLE_BIT( PORTA , Copy_U8Pin ) ;
    17f0:	ab e3       	ldi	r26, 0x3B	; 59
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	eb e3       	ldi	r30, 0x3B	; 59
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DIO_VidTogglePinValue+0x6c>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <DIO_VidTogglePinValue+0x68>
    1812:	84 27       	eor	r24, r20
    1814:	8c 93       	st	X, r24
    1816:	3b c0       	rjmp	.+118    	; 0x188e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 1 : 
			TOGGLE_BIT( PORTB , Copy_U8Pin ) ;
    1818:	a8 e3       	ldi	r26, 0x38	; 56
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e8 e3       	ldi	r30, 0x38	; 56
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <DIO_VidTogglePinValue+0x94>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <DIO_VidTogglePinValue+0x90>
    183a:	84 27       	eor	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	27 c0       	rjmp	.+78     	; 0x188e <DIO_VidTogglePinValue+0xec>
			break ;			
		case 2 : 
			TOGGLE_BIT( PORTC , Copy_U8Pin ) ;
    1840:	a5 e3       	ldi	r26, 0x35	; 53
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e5 e3       	ldi	r30, 0x35	; 53
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <DIO_VidTogglePinValue+0xbc>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <DIO_VidTogglePinValue+0xb8>
    1862:	84 27       	eor	r24, r20
    1864:	8c 93       	st	X, r24
    1866:	13 c0       	rjmp	.+38     	; 0x188e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 3 : 
			TOGGLE_BIT( PORTD , Copy_U8Pin ) ;
    1868:	a2 e3       	ldi	r26, 0x32	; 50
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e2 e3       	ldi	r30, 0x32	; 50
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_VidTogglePinValue+0xe4>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_VidTogglePinValue+0xe0>
    188a:	84 27       	eor	r24, r20
    188c:	8c 93       	st	X, r24
			break ; 
	}//end switch
}//end FUNC DIO_VidTogglePinValue
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <DIO_U8GetPinValue+0x6>
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <DIO_U8GetPinValue+0x8>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <DIO_U8GetPinValue+0xa>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3d 83       	std	Y+5, r19	; 0x05
    18b6:	2c 83       	std	Y+4, r18	; 0x04
    18b8:	4c 81       	ldd	r20, Y+4	; 0x04
    18ba:	5d 81       	ldd	r21, Y+5	; 0x05
    18bc:	41 30       	cpi	r20, 0x01	; 1
    18be:	51 05       	cpc	r21, r1
    18c0:	49 f1       	breq	.+82     	; 0x1914 <DIO_U8GetPinValue+0x78>
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	82 30       	cpi	r24, 0x02	; 2
    18c8:	91 05       	cpc	r25, r1
    18ca:	34 f4       	brge	.+12     	; 0x18d8 <DIO_U8GetPinValue+0x3c>
    18cc:	2c 81       	ldd	r18, Y+4	; 0x04
    18ce:	3d 81       	ldd	r19, Y+5	; 0x05
    18d0:	21 15       	cp	r18, r1
    18d2:	31 05       	cpc	r19, r1
    18d4:	61 f0       	breq	.+24     	; 0x18ee <DIO_U8GetPinValue+0x52>
    18d6:	57 c0       	rjmp	.+174    	; 0x1986 <DIO_U8GetPinValue+0xea>
    18d8:	4c 81       	ldd	r20, Y+4	; 0x04
    18da:	5d 81       	ldd	r21, Y+5	; 0x05
    18dc:	42 30       	cpi	r20, 0x02	; 2
    18de:	51 05       	cpc	r21, r1
    18e0:	61 f1       	breq	.+88     	; 0x193a <DIO_U8GetPinValue+0x9e>
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	9d 81       	ldd	r25, Y+5	; 0x05
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	91 05       	cpc	r25, r1
    18ea:	d1 f1       	breq	.+116    	; 0x1960 <DIO_U8GetPinValue+0xc4>
    18ec:	4c c0       	rjmp	.+152    	; 0x1986 <DIO_U8GetPinValue+0xea>
		case 0 : 
		   return GET_BIT( PINA , Copy_U8Pin ) ;
    18ee:	e9 e3       	ldi	r30, 0x39	; 57
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a9 01       	movw	r20, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_U8GetPinValue+0x6a>
    1902:	55 95       	asr	r21
    1904:	47 95       	ror	r20
    1906:	8a 95       	dec	r24
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_U8GetPinValue+0x66>
    190a:	ca 01       	movw	r24, r20
    190c:	58 2f       	mov	r21, r24
    190e:	51 70       	andi	r21, 0x01	; 1
    1910:	5b 83       	std	Y+3, r21	; 0x03
    1912:	3a c0       	rjmp	.+116    	; 0x1988 <DIO_U8GetPinValue+0xec>
		case 1 : 
			return GET_BIT( PINB , Copy_U8Pin ) ;
    1914:	e6 e3       	ldi	r30, 0x36	; 54
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a9 01       	movw	r20, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_U8GetPinValue+0x90>
    1928:	55 95       	asr	r21
    192a:	47 95       	ror	r20
    192c:	8a 95       	dec	r24
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <DIO_U8GetPinValue+0x8c>
    1930:	ca 01       	movw	r24, r20
    1932:	58 2f       	mov	r21, r24
    1934:	51 70       	andi	r21, 0x01	; 1
    1936:	5b 83       	std	Y+3, r21	; 0x03
    1938:	27 c0       	rjmp	.+78     	; 0x1988 <DIO_U8GetPinValue+0xec>
		case 2 : 
			return GET_BIT( PINC , Copy_U8Pin ) ;
    193a:	e3 e3       	ldi	r30, 0x33	; 51
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a9 01       	movw	r20, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <DIO_U8GetPinValue+0xb6>
    194e:	55 95       	asr	r21
    1950:	47 95       	ror	r20
    1952:	8a 95       	dec	r24
    1954:	e2 f7       	brpl	.-8      	; 0x194e <DIO_U8GetPinValue+0xb2>
    1956:	ca 01       	movw	r24, r20
    1958:	58 2f       	mov	r21, r24
    195a:	51 70       	andi	r21, 0x01	; 1
    195c:	5b 83       	std	Y+3, r21	; 0x03
    195e:	14 c0       	rjmp	.+40     	; 0x1988 <DIO_U8GetPinValue+0xec>
		case 3 : 
			return GET_BIT( PIND , Copy_U8Pin ) ;
    1960:	e0 e3       	ldi	r30, 0x30	; 48
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	88 2f       	mov	r24, r24
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a9 01       	movw	r20, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <DIO_U8GetPinValue+0xdc>
    1974:	55 95       	asr	r21
    1976:	47 95       	ror	r20
    1978:	8a 95       	dec	r24
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <DIO_U8GetPinValue+0xd8>
    197c:	ca 01       	movw	r24, r20
    197e:	58 2f       	mov	r21, r24
    1980:	51 70       	andi	r21, 0x01	; 1
    1982:	5b 83       	std	Y+3, r21	; 0x03
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <DIO_U8GetPinValue+0xec>
    1986:	02 c0       	rjmp	.+4      	; 0x198c <DIO_U8GetPinValue+0xf0>
	}//end switch	
}//end FUNC DIO_VidU8PinValue 
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	8e 83       	std	Y+6, r24	; 0x06
    198c:	8e 81       	ldd	r24, Y+6	; 0x06
    198e:	26 96       	adiw	r28, 0x06	; 6
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <GIE_VidEnable>:
#include "../Serivecs_driver/BIT_MATH.h"
#include "DIO_interface.h"
#include "INTERRUPT_Interface.h"
#include "INTERRUPT_private.h"

void GIE_VidEnable (void){
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
	//to enable general interrupt
	SET_BIT(SREG,I_BIT);
    19a8:	af e5       	ldi	r26, 0x5F	; 95
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ef e5       	ldi	r30, 0x5F	; 95
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	80 68       	ori	r24, 0x80	; 128
    19b4:	8c 93       	st	X, r24
}
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <GIE_VidDisable>:

void GIE_VidDisable (void){
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
	//to disable general interrupt
	CLR_BIT(SREG,I_BIT);
    19c4:	af e5       	ldi	r26, 0x5F	; 95
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	ef e5       	ldi	r30, 0x5F	; 95
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	8f 77       	andi	r24, 0x7F	; 127
    19d0:	8c 93       	st	X, r24
}
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <TIMER_VidSetCallBack>:
static u16 PRE_SCALAR_TIMER2 ;
static f32 T_OV_TIMER2  ;
static f32 NUM_OV_TIMER2 ;
static f32 PRE_LOAD_TIMER2 ;

void TIMER_VidSetCallBack (u8 Copy_NumOfINT , void (*ptr)(void)){
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <TIMER_VidSetCallBack+0x6>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <TIMER_VidSetCallBack+0x8>
    19e0:	0f 92       	push	r0
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	7b 83       	std	Y+3, r23	; 0x03
    19ea:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_NumOfINT){
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	3d 83       	std	Y+5, r19	; 0x05
    19f4:	2c 83       	std	Y+4, r18	; 0x04
    19f6:	8c 81       	ldd	r24, Y+4	; 0x04
    19f8:	9d 81       	ldd	r25, Y+5	; 0x05
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	91 05       	cpc	r25, r1
    19fe:	81 f0       	breq	.+32     	; 0x1a20 <TIMER_VidSetCallBack+0x48>
    1a00:	2c 81       	ldd	r18, Y+4	; 0x04
    1a02:	3d 81       	ldd	r19, Y+5	; 0x05
    1a04:	22 30       	cpi	r18, 0x02	; 2
    1a06:	31 05       	cpc	r19, r1
    1a08:	91 f0       	breq	.+36     	; 0x1a2e <TIMER_VidSetCallBack+0x56>
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	a1 f4       	brne	.+40     	; 0x1a3a <TIMER_VidSetCallBack+0x62>
	case 0 :TIMER0_PFUNC = ptr ;            break ;
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	9b 81       	ldd	r25, Y+3	; 0x03
    1a16:	90 93 69 01 	sts	0x0169, r25
    1a1a:	80 93 68 01 	sts	0x0168, r24
    1a1e:	0d c0       	rjmp	.+26     	; 0x1a3a <TIMER_VidSetCallBack+0x62>
	case 1 :TIMER1_PFUNC = ptr ;             break ;
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	9b 81       	ldd	r25, Y+3	; 0x03
    1a24:	90 93 6b 01 	sts	0x016B, r25
    1a28:	80 93 6a 01 	sts	0x016A, r24
    1a2c:	06 c0       	rjmp	.+12     	; 0x1a3a <TIMER_VidSetCallBack+0x62>
	case 2 :TIMER2_PFUNC = ptr ;             break ;
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	9b 81       	ldd	r25, Y+3	; 0x03
    1a32:	90 93 6d 01 	sts	0x016D, r25
    1a36:	80 93 6c 01 	sts	0x016C, r24
	}
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <TIMER0_VidInitialize>:

/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
void TIMER0_VidInitialize (void) {
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62

#if TIMER0_MODE == OV
	/*   overflow mode , to clear FOC0 and register
	     to enable interrupt , when rising flag jump to ISR     */
	TCCR0 = 0 ;
    1a52:	e3 e5       	ldi	r30, 0x53	; 83
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TOIE0);
    1a58:	a9 e5       	ldi	r26, 0x59	; 89
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e9 e5       	ldi	r30, 0x59	; 89
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	81 60       	ori	r24, 0x01	; 1
    1a64:	8c 93       	st	X, r24
#if PRE_TYPE_TIMER0 == NO_PRE
	CLR_BIT(TCCR0,CS02);
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);
#elif PRE_TYPE_TIMER0 == PRE_8
	CLR_BIT(TCCR0,CS02);
    1a66:	a3 e5       	ldi	r26, 0x53	; 83
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e3 e5       	ldi	r30, 0x53	; 83
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8b 7f       	andi	r24, 0xFB	; 251
    1a72:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    1a74:	a3 e5       	ldi	r26, 0x53	; 83
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e3 e5       	ldi	r30, 0x53	; 83
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	82 60       	ori	r24, 0x02	; 2
    1a80:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS00);
    1a82:	a3 e5       	ldi	r26, 0x53	; 83
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e3 e5       	ldi	r30, 0x53	; 83
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	8e 7f       	andi	r24, 0xFE	; 254
    1a8e:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER0 = 8 ;
    1a90:	88 e0       	ldi	r24, 0x08	; 8
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	90 93 7b 01 	sts	0x017B, r25
    1a98:	80 93 7a 01 	sts	0x017A, r24
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);
	PRE_SCALAR_TIMER0 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <TIMER0_Set_Time_S>:

/******************** The part that use to count time  *************************/
//to check that you don't use OV or COMPARE mode
void TIMER0_Set_Time_S (u8 Copy_U8Time){
    1aa2:	6f 92       	push	r6
    1aa4:	7f 92       	push	r7
    1aa6:	8f 92       	push	r8
    1aa8:	9f 92       	push	r9
    1aaa:	af 92       	push	r10
    1aac:	bf 92       	push	r11
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	cf 54       	subi	r28, 0x4F	; 79
    1ac4:	d0 40       	sbci	r29, 0x00	; 0
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER0 = (u64)Copy_U8Time*1000 ;                                    //time in ms
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	08 2f       	mov	r16, r24
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	50 e0       	ldi	r21, 0x00	; 0
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	0a 83       	std	Y+2, r16	; 0x02
    1ae6:	1b 83       	std	Y+3, r17	; 0x03
    1ae8:	2c 83       	std	Y+4, r18	; 0x04
    1aea:	3d 83       	std	Y+5, r19	; 0x05
    1aec:	4e 83       	std	Y+6, r20	; 0x06
    1aee:	5f 83       	std	Y+7, r21	; 0x07
    1af0:	68 87       	std	Y+8, r22	; 0x08
    1af2:	79 87       	std	Y+9, r23	; 0x09
    1af4:	aa 80       	ldd	r10, Y+2	; 0x02
    1af6:	bb 80       	ldd	r11, Y+3	; 0x03
    1af8:	cc 80       	ldd	r12, Y+4	; 0x04
    1afa:	dd 80       	ldd	r13, Y+5	; 0x05
    1afc:	ee 80       	ldd	r14, Y+6	; 0x06
    1afe:	ff 80       	ldd	r15, Y+7	; 0x07
    1b00:	08 85       	ldd	r16, Y+8	; 0x08
    1b02:	19 85       	ldd	r17, Y+9	; 0x09
    1b04:	2a 2d       	mov	r18, r10
    1b06:	3b 2d       	mov	r19, r11
    1b08:	4c 2d       	mov	r20, r12
    1b0a:	5d 2d       	mov	r21, r13
    1b0c:	6e 2d       	mov	r22, r14
    1b0e:	7f 2d       	mov	r23, r15
    1b10:	80 2f       	mov	r24, r16
    1b12:	91 2f       	mov	r25, r17
    1b14:	02 e0       	ldi	r16, 0x02	; 2
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    1b1a:	2a 87       	std	Y+10, r18	; 0x0a
    1b1c:	3b 87       	std	Y+11, r19	; 0x0b
    1b1e:	4c 87       	std	Y+12, r20	; 0x0c
    1b20:	5d 87       	std	Y+13, r21	; 0x0d
    1b22:	6e 87       	std	Y+14, r22	; 0x0e
    1b24:	7f 87       	std	Y+15, r23	; 0x0f
    1b26:	88 8b       	std	Y+16, r24	; 0x10
    1b28:	99 8b       	std	Y+17, r25	; 0x11
    1b2a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b2c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b2e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1b30:	5d 85       	ldd	r21, Y+13	; 0x0d
    1b32:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b34:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b36:	88 89       	ldd	r24, Y+16	; 0x10
    1b38:	99 89       	ldd	r25, Y+17	; 0x11
    1b3a:	05 e0       	ldi	r16, 0x05	; 5
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    1b40:	2a 8b       	std	Y+18, r18	; 0x12
    1b42:	3b 8b       	std	Y+19, r19	; 0x13
    1b44:	4c 8b       	std	Y+20, r20	; 0x14
    1b46:	5d 8b       	std	Y+21, r21	; 0x15
    1b48:	6e 8b       	std	Y+22, r22	; 0x16
    1b4a:	7f 8b       	std	Y+23, r23	; 0x17
    1b4c:	88 8f       	std	Y+24, r24	; 0x18
    1b4e:	99 8f       	std	Y+25, r25	; 0x19
    1b50:	1a 89       	ldd	r17, Y+18	; 0x12
    1b52:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b54:	12 1b       	sub	r17, r18
    1b56:	1a 8f       	std	Y+26, r17	; 0x1a
    1b58:	31 e0       	ldi	r19, 0x01	; 1
    1b5a:	3a a3       	std	Y+34, r19	; 0x22
    1b5c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1b5e:	5a 89       	ldd	r21, Y+18	; 0x12
    1b60:	54 17       	cp	r21, r20
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <TIMER0_Set_Time_S+0xc4>
    1b64:	1a a2       	std	Y+34, r1	; 0x22
    1b66:	6b 89       	ldd	r22, Y+19	; 0x13
    1b68:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b6a:	67 1b       	sub	r22, r23
    1b6c:	6b 8f       	std	Y+27, r22	; 0x1b
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	8b a3       	std	Y+35, r24	; 0x23
    1b72:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b74:	eb 89       	ldd	r30, Y+19	; 0x13
    1b76:	e9 17       	cp	r30, r25
    1b78:	08 f0       	brcs	.+2      	; 0x1b7c <TIMER0_Set_Time_S+0xda>
    1b7a:	1b a2       	std	Y+35, r1	; 0x23
    1b7c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1b7e:	0a a1       	ldd	r16, Y+34	; 0x22
    1b80:	f0 1b       	sub	r31, r16
    1b82:	fc a3       	std	Y+36, r31	; 0x24
    1b84:	11 e0       	ldi	r17, 0x01	; 1
    1b86:	1d a3       	std	Y+37, r17	; 0x25
    1b88:	2c a1       	ldd	r18, Y+36	; 0x24
    1b8a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1b8c:	32 17       	cp	r19, r18
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <TIMER0_Set_Time_S+0xf0>
    1b90:	1d a2       	std	Y+37, r1	; 0x25
    1b92:	4b a1       	ldd	r20, Y+35	; 0x23
    1b94:	5d a1       	ldd	r21, Y+37	; 0x25
    1b96:	45 2b       	or	r20, r21
    1b98:	4b a3       	std	Y+35, r20	; 0x23
    1b9a:	6c a1       	ldd	r22, Y+36	; 0x24
    1b9c:	6b 8f       	std	Y+27, r22	; 0x1b
    1b9e:	7c 89       	ldd	r23, Y+20	; 0x14
    1ba0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ba2:	78 1b       	sub	r23, r24
    1ba4:	7c 8f       	std	Y+28, r23	; 0x1c
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
    1ba8:	9e a3       	std	Y+38, r25	; 0x26
    1baa:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1bac:	fc 89       	ldd	r31, Y+20	; 0x14
    1bae:	fe 17       	cp	r31, r30
    1bb0:	08 f0       	brcs	.+2      	; 0x1bb4 <TIMER0_Set_Time_S+0x112>
    1bb2:	1e a2       	std	Y+38, r1	; 0x26
    1bb4:	0c 8d       	ldd	r16, Y+28	; 0x1c
    1bb6:	1b a1       	ldd	r17, Y+35	; 0x23
    1bb8:	01 1b       	sub	r16, r17
    1bba:	0f a3       	std	Y+39, r16	; 0x27
    1bbc:	21 e0       	ldi	r18, 0x01	; 1
    1bbe:	28 a7       	std	Y+40, r18	; 0x28
    1bc0:	3f a1       	ldd	r19, Y+39	; 0x27
    1bc2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1bc4:	43 17       	cp	r20, r19
    1bc6:	08 f0       	brcs	.+2      	; 0x1bca <TIMER0_Set_Time_S+0x128>
    1bc8:	18 a6       	std	Y+40, r1	; 0x28
    1bca:	5e a1       	ldd	r21, Y+38	; 0x26
    1bcc:	68 a5       	ldd	r22, Y+40	; 0x28
    1bce:	56 2b       	or	r21, r22
    1bd0:	5e a3       	std	Y+38, r21	; 0x26
    1bd2:	7f a1       	ldd	r23, Y+39	; 0x27
    1bd4:	7c 8f       	std	Y+28, r23	; 0x1c
    1bd6:	8d 89       	ldd	r24, Y+21	; 0x15
    1bd8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bda:	89 1b       	sub	r24, r25
    1bdc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bde:	e1 e0       	ldi	r30, 0x01	; 1
    1be0:	e9 a7       	std	Y+41, r30	; 0x29
    1be2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1be4:	0d 89       	ldd	r16, Y+21	; 0x15
    1be6:	0f 17       	cp	r16, r31
    1be8:	08 f0       	brcs	.+2      	; 0x1bec <TIMER0_Set_Time_S+0x14a>
    1bea:	19 a6       	std	Y+41, r1	; 0x29
    1bec:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1bee:	2e a1       	ldd	r18, Y+38	; 0x26
    1bf0:	12 1b       	sub	r17, r18
    1bf2:	1a a7       	std	Y+42, r17	; 0x2a
    1bf4:	31 e0       	ldi	r19, 0x01	; 1
    1bf6:	3b a7       	std	Y+43, r19	; 0x2b
    1bf8:	4a a5       	ldd	r20, Y+42	; 0x2a
    1bfa:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1bfc:	54 17       	cp	r21, r20
    1bfe:	08 f0       	brcs	.+2      	; 0x1c02 <TIMER0_Set_Time_S+0x160>
    1c00:	1b a6       	std	Y+43, r1	; 0x2b
    1c02:	69 a5       	ldd	r22, Y+41	; 0x29
    1c04:	7b a5       	ldd	r23, Y+43	; 0x2b
    1c06:	67 2b       	or	r22, r23
    1c08:	69 a7       	std	Y+41, r22	; 0x29
    1c0a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c0e:	9e 89       	ldd	r25, Y+22	; 0x16
    1c10:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c12:	9e 1b       	sub	r25, r30
    1c14:	9e 8f       	std	Y+30, r25	; 0x1e
    1c16:	f1 e0       	ldi	r31, 0x01	; 1
    1c18:	fc a7       	std	Y+44, r31	; 0x2c
    1c1a:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1c1c:	1e 89       	ldd	r17, Y+22	; 0x16
    1c1e:	10 17       	cp	r17, r16
    1c20:	08 f0       	brcs	.+2      	; 0x1c24 <TIMER0_Set_Time_S+0x182>
    1c22:	1c a6       	std	Y+44, r1	; 0x2c
    1c24:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1c26:	39 a5       	ldd	r19, Y+41	; 0x29
    1c28:	23 1b       	sub	r18, r19
    1c2a:	2d a7       	std	Y+45, r18	; 0x2d
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	4e a7       	std	Y+46, r20	; 0x2e
    1c30:	5d a5       	ldd	r21, Y+45	; 0x2d
    1c32:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1c34:	65 17       	cp	r22, r21
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <TIMER0_Set_Time_S+0x198>
    1c38:	1e a6       	std	Y+46, r1	; 0x2e
    1c3a:	7c a5       	ldd	r23, Y+44	; 0x2c
    1c3c:	8e a5       	ldd	r24, Y+46	; 0x2e
    1c3e:	78 2b       	or	r23, r24
    1c40:	7c a7       	std	Y+44, r23	; 0x2c
    1c42:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c44:	9e 8f       	std	Y+30, r25	; 0x1e
    1c46:	ef 89       	ldd	r30, Y+23	; 0x17
    1c48:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c4a:	ef 1b       	sub	r30, r31
    1c4c:	ef 8f       	std	Y+31, r30	; 0x1f
    1c4e:	01 e0       	ldi	r16, 0x01	; 1
    1c50:	0f a7       	std	Y+47, r16	; 0x2f
    1c52:	1f 8d       	ldd	r17, Y+31	; 0x1f
    1c54:	2f 89       	ldd	r18, Y+23	; 0x17
    1c56:	21 17       	cp	r18, r17
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <TIMER0_Set_Time_S+0x1ba>
    1c5a:	1f a6       	std	Y+47, r1	; 0x2f
    1c5c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1c5e:	4c a5       	ldd	r20, Y+44	; 0x2c
    1c60:	34 1b       	sub	r19, r20
    1c62:	38 ab       	std	Y+48, r19	; 0x30
    1c64:	51 e0       	ldi	r21, 0x01	; 1
    1c66:	59 ab       	std	Y+49, r21	; 0x31
    1c68:	68 a9       	ldd	r22, Y+48	; 0x30
    1c6a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1c6c:	76 17       	cp	r23, r22
    1c6e:	08 f0       	brcs	.+2      	; 0x1c72 <TIMER0_Set_Time_S+0x1d0>
    1c70:	19 aa       	std	Y+49, r1	; 0x31
    1c72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c74:	99 a9       	ldd	r25, Y+49	; 0x31
    1c76:	89 2b       	or	r24, r25
    1c78:	8f a7       	std	Y+47, r24	; 0x2f
    1c7a:	e8 a9       	ldd	r30, Y+48	; 0x30
    1c7c:	ef 8f       	std	Y+31, r30	; 0x1f
    1c7e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1c80:	08 89       	ldd	r16, Y+16	; 0x10
    1c82:	f0 1b       	sub	r31, r16
    1c84:	f8 a3       	std	Y+32, r31	; 0x20
    1c86:	11 e0       	ldi	r17, 0x01	; 1
    1c88:	1a ab       	std	Y+50, r17	; 0x32
    1c8a:	28 a1       	ldd	r18, Y+32	; 0x20
    1c8c:	38 8d       	ldd	r19, Y+24	; 0x18
    1c8e:	32 17       	cp	r19, r18
    1c90:	08 f0       	brcs	.+2      	; 0x1c94 <TIMER0_Set_Time_S+0x1f2>
    1c92:	1a aa       	std	Y+50, r1	; 0x32
    1c94:	48 a1       	ldd	r20, Y+32	; 0x20
    1c96:	5f a5       	ldd	r21, Y+47	; 0x2f
    1c98:	45 1b       	sub	r20, r21
    1c9a:	4b ab       	std	Y+51, r20	; 0x33
    1c9c:	61 e0       	ldi	r22, 0x01	; 1
    1c9e:	6c ab       	std	Y+52, r22	; 0x34
    1ca0:	7b a9       	ldd	r23, Y+51	; 0x33
    1ca2:	88 a1       	ldd	r24, Y+32	; 0x20
    1ca4:	87 17       	cp	r24, r23
    1ca6:	08 f0       	brcs	.+2      	; 0x1caa <TIMER0_Set_Time_S+0x208>
    1ca8:	1c aa       	std	Y+52, r1	; 0x34
    1caa:	9a a9       	ldd	r25, Y+50	; 0x32
    1cac:	ec a9       	ldd	r30, Y+52	; 0x34
    1cae:	9e 2b       	or	r25, r30
    1cb0:	9a ab       	std	Y+50, r25	; 0x32
    1cb2:	fb a9       	ldd	r31, Y+51	; 0x33
    1cb4:	f8 a3       	std	Y+32, r31	; 0x20
    1cb6:	09 8d       	ldd	r16, Y+25	; 0x19
    1cb8:	19 89       	ldd	r17, Y+17	; 0x11
    1cba:	01 1b       	sub	r16, r17
    1cbc:	09 a3       	std	Y+33, r16	; 0x21
    1cbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc0:	2a a9       	ldd	r18, Y+50	; 0x32
    1cc2:	82 1b       	sub	r24, r18
    1cc4:	89 a3       	std	Y+33, r24	; 0x21
    1cc6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1cc8:	3a 8b       	std	Y+18, r19	; 0x12
    1cca:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1ccc:	4b 8b       	std	Y+19, r20	; 0x13
    1cce:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1cd0:	5c 8b       	std	Y+20, r21	; 0x14
    1cd2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cd4:	6d 8b       	std	Y+21, r22	; 0x15
    1cd6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1cd8:	7e 8b       	std	Y+22, r23	; 0x16
    1cda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cdc:	8f 8b       	std	Y+23, r24	; 0x17
    1cde:	98 a1       	ldd	r25, Y+32	; 0x20
    1ce0:	98 8f       	std	Y+24, r25	; 0x18
    1ce2:	e9 a1       	ldd	r30, Y+33	; 0x21
    1ce4:	e9 8f       	std	Y+25, r30	; 0x19
    1ce6:	fa 89       	ldd	r31, Y+18	; 0x12
    1ce8:	0a 81       	ldd	r16, Y+2	; 0x02
    1cea:	f0 0f       	add	r31, r16
    1cec:	fd ab       	std	Y+53, r31	; 0x35
    1cee:	11 e0       	ldi	r17, 0x01	; 1
    1cf0:	1d af       	std	Y+61, r17	; 0x3d
    1cf2:	2d a9       	ldd	r18, Y+53	; 0x35
    1cf4:	3a 89       	ldd	r19, Y+18	; 0x12
    1cf6:	23 17       	cp	r18, r19
    1cf8:	08 f0       	brcs	.+2      	; 0x1cfc <TIMER0_Set_Time_S+0x25a>
    1cfa:	1d ae       	std	Y+61, r1	; 0x3d
    1cfc:	4b 89       	ldd	r20, Y+19	; 0x13
    1cfe:	5b 81       	ldd	r21, Y+3	; 0x03
    1d00:	45 0f       	add	r20, r21
    1d02:	4e ab       	std	Y+54, r20	; 0x36
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	6e af       	std	Y+62, r22	; 0x3e
    1d08:	7e a9       	ldd	r23, Y+54	; 0x36
    1d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0c:	78 17       	cp	r23, r24
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <TIMER0_Set_Time_S+0x270>
    1d10:	1e ae       	std	Y+62, r1	; 0x3e
    1d12:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d14:	ee a9       	ldd	r30, Y+54	; 0x36
    1d16:	9e 0f       	add	r25, r30
    1d18:	9f af       	std	Y+63, r25	; 0x3f
    1d1a:	f1 e0       	ldi	r31, 0x01	; 1
    1d1c:	21 96       	adiw	r28, 0x01	; 1
    1d1e:	ff af       	std	Y+63, r31	; 0x3f
    1d20:	21 97       	sbiw	r28, 0x01	; 1
    1d22:	0f ad       	ldd	r16, Y+63	; 0x3f
    1d24:	1e a9       	ldd	r17, Y+54	; 0x36
    1d26:	01 17       	cp	r16, r17
    1d28:	18 f0       	brcs	.+6      	; 0x1d30 <TIMER0_Set_Time_S+0x28e>
    1d2a:	21 96       	adiw	r28, 0x01	; 1
    1d2c:	1f ae       	std	Y+63, r1	; 0x3f
    1d2e:	21 97       	sbiw	r28, 0x01	; 1
    1d30:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d32:	21 96       	adiw	r28, 0x01	; 1
    1d34:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d36:	21 97       	sbiw	r28, 0x01	; 1
    1d38:	23 2b       	or	r18, r19
    1d3a:	2e af       	std	Y+62, r18	; 0x3e
    1d3c:	4f ad       	ldd	r20, Y+63	; 0x3f
    1d3e:	4e ab       	std	Y+54, r20	; 0x36
    1d40:	5c 89       	ldd	r21, Y+20	; 0x14
    1d42:	6c 81       	ldd	r22, Y+4	; 0x04
    1d44:	56 0f       	add	r21, r22
    1d46:	5f ab       	std	Y+55, r21	; 0x37
    1d48:	71 e0       	ldi	r23, 0x01	; 1
    1d4a:	22 96       	adiw	r28, 0x02	; 2
    1d4c:	7f af       	std	Y+63, r23	; 0x3f
    1d4e:	22 97       	sbiw	r28, 0x02	; 2
    1d50:	8f a9       	ldd	r24, Y+55	; 0x37
    1d52:	9c 89       	ldd	r25, Y+20	; 0x14
    1d54:	89 17       	cp	r24, r25
    1d56:	18 f0       	brcs	.+6      	; 0x1d5e <TIMER0_Set_Time_S+0x2bc>
    1d58:	22 96       	adiw	r28, 0x02	; 2
    1d5a:	1f ae       	std	Y+63, r1	; 0x3f
    1d5c:	22 97       	sbiw	r28, 0x02	; 2
    1d5e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d60:	ff a9       	ldd	r31, Y+55	; 0x37
    1d62:	ef 0f       	add	r30, r31
    1d64:	23 96       	adiw	r28, 0x03	; 3
    1d66:	ef af       	std	Y+63, r30	; 0x3f
    1d68:	23 97       	sbiw	r28, 0x03	; 3
    1d6a:	01 e0       	ldi	r16, 0x01	; 1
    1d6c:	24 96       	adiw	r28, 0x04	; 4
    1d6e:	0f af       	std	Y+63, r16	; 0x3f
    1d70:	24 97       	sbiw	r28, 0x04	; 4
    1d72:	23 96       	adiw	r28, 0x03	; 3
    1d74:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d76:	23 97       	sbiw	r28, 0x03	; 3
    1d78:	2f a9       	ldd	r18, Y+55	; 0x37
    1d7a:	12 17       	cp	r17, r18
    1d7c:	18 f0       	brcs	.+6      	; 0x1d84 <TIMER0_Set_Time_S+0x2e2>
    1d7e:	24 96       	adiw	r28, 0x04	; 4
    1d80:	1f ae       	std	Y+63, r1	; 0x3f
    1d82:	24 97       	sbiw	r28, 0x04	; 4
    1d84:	22 96       	adiw	r28, 0x02	; 2
    1d86:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d88:	22 97       	sbiw	r28, 0x02	; 2
    1d8a:	24 96       	adiw	r28, 0x04	; 4
    1d8c:	4f ad       	ldd	r20, Y+63	; 0x3f
    1d8e:	24 97       	sbiw	r28, 0x04	; 4
    1d90:	34 2b       	or	r19, r20
    1d92:	22 96       	adiw	r28, 0x02	; 2
    1d94:	3f af       	std	Y+63, r19	; 0x3f
    1d96:	22 97       	sbiw	r28, 0x02	; 2
    1d98:	23 96       	adiw	r28, 0x03	; 3
    1d9a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d9c:	23 97       	sbiw	r28, 0x03	; 3
    1d9e:	5f ab       	std	Y+55, r21	; 0x37
    1da0:	6d 89       	ldd	r22, Y+21	; 0x15
    1da2:	7d 81       	ldd	r23, Y+5	; 0x05
    1da4:	67 0f       	add	r22, r23
    1da6:	68 af       	std	Y+56, r22	; 0x38
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	25 96       	adiw	r28, 0x05	; 5
    1dac:	8f af       	std	Y+63, r24	; 0x3f
    1dae:	25 97       	sbiw	r28, 0x05	; 5
    1db0:	98 ad       	ldd	r25, Y+56	; 0x38
    1db2:	ed 89       	ldd	r30, Y+21	; 0x15
    1db4:	9e 17       	cp	r25, r30
    1db6:	18 f0       	brcs	.+6      	; 0x1dbe <TIMER0_Set_Time_S+0x31c>
    1db8:	25 96       	adiw	r28, 0x05	; 5
    1dba:	1f ae       	std	Y+63, r1	; 0x3f
    1dbc:	25 97       	sbiw	r28, 0x05	; 5
    1dbe:	22 96       	adiw	r28, 0x02	; 2
    1dc0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1dc2:	22 97       	sbiw	r28, 0x02	; 2
    1dc4:	08 ad       	ldd	r16, Y+56	; 0x38
    1dc6:	f0 0f       	add	r31, r16
    1dc8:	26 96       	adiw	r28, 0x06	; 6
    1dca:	ff af       	std	Y+63, r31	; 0x3f
    1dcc:	26 97       	sbiw	r28, 0x06	; 6
    1dce:	11 e0       	ldi	r17, 0x01	; 1
    1dd0:	27 96       	adiw	r28, 0x07	; 7
    1dd2:	1f af       	std	Y+63, r17	; 0x3f
    1dd4:	27 97       	sbiw	r28, 0x07	; 7
    1dd6:	26 96       	adiw	r28, 0x06	; 6
    1dd8:	2f ad       	ldd	r18, Y+63	; 0x3f
    1dda:	26 97       	sbiw	r28, 0x06	; 6
    1ddc:	38 ad       	ldd	r19, Y+56	; 0x38
    1dde:	23 17       	cp	r18, r19
    1de0:	18 f0       	brcs	.+6      	; 0x1de8 <TIMER0_Set_Time_S+0x346>
    1de2:	27 96       	adiw	r28, 0x07	; 7
    1de4:	1f ae       	std	Y+63, r1	; 0x3f
    1de6:	27 97       	sbiw	r28, 0x07	; 7
    1de8:	25 96       	adiw	r28, 0x05	; 5
    1dea:	4f ad       	ldd	r20, Y+63	; 0x3f
    1dec:	25 97       	sbiw	r28, 0x05	; 5
    1dee:	27 96       	adiw	r28, 0x07	; 7
    1df0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1df2:	27 97       	sbiw	r28, 0x07	; 7
    1df4:	45 2b       	or	r20, r21
    1df6:	25 96       	adiw	r28, 0x05	; 5
    1df8:	4f af       	std	Y+63, r20	; 0x3f
    1dfa:	25 97       	sbiw	r28, 0x05	; 5
    1dfc:	26 96       	adiw	r28, 0x06	; 6
    1dfe:	6f ad       	ldd	r22, Y+63	; 0x3f
    1e00:	26 97       	sbiw	r28, 0x06	; 6
    1e02:	68 af       	std	Y+56, r22	; 0x38
    1e04:	7e 89       	ldd	r23, Y+22	; 0x16
    1e06:	8e 81       	ldd	r24, Y+6	; 0x06
    1e08:	78 0f       	add	r23, r24
    1e0a:	79 af       	std	Y+57, r23	; 0x39
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	28 96       	adiw	r28, 0x08	; 8
    1e10:	9f af       	std	Y+63, r25	; 0x3f
    1e12:	28 97       	sbiw	r28, 0x08	; 8
    1e14:	e9 ad       	ldd	r30, Y+57	; 0x39
    1e16:	fe 89       	ldd	r31, Y+22	; 0x16
    1e18:	ef 17       	cp	r30, r31
    1e1a:	18 f0       	brcs	.+6      	; 0x1e22 <TIMER0_Set_Time_S+0x380>
    1e1c:	28 96       	adiw	r28, 0x08	; 8
    1e1e:	1f ae       	std	Y+63, r1	; 0x3f
    1e20:	28 97       	sbiw	r28, 0x08	; 8
    1e22:	25 96       	adiw	r28, 0x05	; 5
    1e24:	0f ad       	ldd	r16, Y+63	; 0x3f
    1e26:	25 97       	sbiw	r28, 0x05	; 5
    1e28:	19 ad       	ldd	r17, Y+57	; 0x39
    1e2a:	01 0f       	add	r16, r17
    1e2c:	29 96       	adiw	r28, 0x09	; 9
    1e2e:	0f af       	std	Y+63, r16	; 0x3f
    1e30:	29 97       	sbiw	r28, 0x09	; 9
    1e32:	21 e0       	ldi	r18, 0x01	; 1
    1e34:	2a 96       	adiw	r28, 0x0a	; 10
    1e36:	2f af       	std	Y+63, r18	; 0x3f
    1e38:	2a 97       	sbiw	r28, 0x0a	; 10
    1e3a:	29 96       	adiw	r28, 0x09	; 9
    1e3c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1e3e:	29 97       	sbiw	r28, 0x09	; 9
    1e40:	49 ad       	ldd	r20, Y+57	; 0x39
    1e42:	34 17       	cp	r19, r20
    1e44:	18 f0       	brcs	.+6      	; 0x1e4c <TIMER0_Set_Time_S+0x3aa>
    1e46:	2a 96       	adiw	r28, 0x0a	; 10
    1e48:	1f ae       	std	Y+63, r1	; 0x3f
    1e4a:	2a 97       	sbiw	r28, 0x0a	; 10
    1e4c:	28 96       	adiw	r28, 0x08	; 8
    1e4e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e50:	28 97       	sbiw	r28, 0x08	; 8
    1e52:	2a 96       	adiw	r28, 0x0a	; 10
    1e54:	6f ad       	ldd	r22, Y+63	; 0x3f
    1e56:	2a 97       	sbiw	r28, 0x0a	; 10
    1e58:	56 2b       	or	r21, r22
    1e5a:	28 96       	adiw	r28, 0x08	; 8
    1e5c:	5f af       	std	Y+63, r21	; 0x3f
    1e5e:	28 97       	sbiw	r28, 0x08	; 8
    1e60:	29 96       	adiw	r28, 0x09	; 9
    1e62:	7f ad       	ldd	r23, Y+63	; 0x3f
    1e64:	29 97       	sbiw	r28, 0x09	; 9
    1e66:	79 af       	std	Y+57, r23	; 0x39
    1e68:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6c:	89 0f       	add	r24, r25
    1e6e:	8a af       	std	Y+58, r24	; 0x3a
    1e70:	e1 e0       	ldi	r30, 0x01	; 1
    1e72:	2b 96       	adiw	r28, 0x0b	; 11
    1e74:	ef af       	std	Y+63, r30	; 0x3f
    1e76:	2b 97       	sbiw	r28, 0x0b	; 11
    1e78:	fa ad       	ldd	r31, Y+58	; 0x3a
    1e7a:	0f 89       	ldd	r16, Y+23	; 0x17
    1e7c:	f0 17       	cp	r31, r16
    1e7e:	18 f0       	brcs	.+6      	; 0x1e86 <TIMER0_Set_Time_S+0x3e4>
    1e80:	2b 96       	adiw	r28, 0x0b	; 11
    1e82:	1f ae       	std	Y+63, r1	; 0x3f
    1e84:	2b 97       	sbiw	r28, 0x0b	; 11
    1e86:	28 96       	adiw	r28, 0x08	; 8
    1e88:	1f ad       	ldd	r17, Y+63	; 0x3f
    1e8a:	28 97       	sbiw	r28, 0x08	; 8
    1e8c:	2a ad       	ldd	r18, Y+58	; 0x3a
    1e8e:	12 0f       	add	r17, r18
    1e90:	2c 96       	adiw	r28, 0x0c	; 12
    1e92:	1f af       	std	Y+63, r17	; 0x3f
    1e94:	2c 97       	sbiw	r28, 0x0c	; 12
    1e96:	31 e0       	ldi	r19, 0x01	; 1
    1e98:	2d 96       	adiw	r28, 0x0d	; 13
    1e9a:	3f af       	std	Y+63, r19	; 0x3f
    1e9c:	2d 97       	sbiw	r28, 0x0d	; 13
    1e9e:	2c 96       	adiw	r28, 0x0c	; 12
    1ea0:	4f ad       	ldd	r20, Y+63	; 0x3f
    1ea2:	2c 97       	sbiw	r28, 0x0c	; 12
    1ea4:	5a ad       	ldd	r21, Y+58	; 0x3a
    1ea6:	45 17       	cp	r20, r21
    1ea8:	18 f0       	brcs	.+6      	; 0x1eb0 <TIMER0_Set_Time_S+0x40e>
    1eaa:	2d 96       	adiw	r28, 0x0d	; 13
    1eac:	1f ae       	std	Y+63, r1	; 0x3f
    1eae:	2d 97       	sbiw	r28, 0x0d	; 13
    1eb0:	2b 96       	adiw	r28, 0x0b	; 11
    1eb2:	6f ad       	ldd	r22, Y+63	; 0x3f
    1eb4:	2b 97       	sbiw	r28, 0x0b	; 11
    1eb6:	2d 96       	adiw	r28, 0x0d	; 13
    1eb8:	7f ad       	ldd	r23, Y+63	; 0x3f
    1eba:	2d 97       	sbiw	r28, 0x0d	; 13
    1ebc:	67 2b       	or	r22, r23
    1ebe:	2b 96       	adiw	r28, 0x0b	; 11
    1ec0:	6f af       	std	Y+63, r22	; 0x3f
    1ec2:	2b 97       	sbiw	r28, 0x0b	; 11
    1ec4:	2c 96       	adiw	r28, 0x0c	; 12
    1ec6:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ec8:	2c 97       	sbiw	r28, 0x0c	; 12
    1eca:	8a af       	std	Y+58, r24	; 0x3a
    1ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ece:	e8 85       	ldd	r30, Y+8	; 0x08
    1ed0:	9e 0f       	add	r25, r30
    1ed2:	9b af       	std	Y+59, r25	; 0x3b
    1ed4:	f1 e0       	ldi	r31, 0x01	; 1
    1ed6:	2e 96       	adiw	r28, 0x0e	; 14
    1ed8:	ff af       	std	Y+63, r31	; 0x3f
    1eda:	2e 97       	sbiw	r28, 0x0e	; 14
    1edc:	0b ad       	ldd	r16, Y+59	; 0x3b
    1ede:	18 8d       	ldd	r17, Y+24	; 0x18
    1ee0:	01 17       	cp	r16, r17
    1ee2:	18 f0       	brcs	.+6      	; 0x1eea <TIMER0_Set_Time_S+0x448>
    1ee4:	2e 96       	adiw	r28, 0x0e	; 14
    1ee6:	1f ae       	std	Y+63, r1	; 0x3f
    1ee8:	2e 97       	sbiw	r28, 0x0e	; 14
    1eea:	2b 96       	adiw	r28, 0x0b	; 11
    1eec:	2f ad       	ldd	r18, Y+63	; 0x3f
    1eee:	2b 97       	sbiw	r28, 0x0b	; 11
    1ef0:	3b ad       	ldd	r19, Y+59	; 0x3b
    1ef2:	23 0f       	add	r18, r19
    1ef4:	2f 96       	adiw	r28, 0x0f	; 15
    1ef6:	2f af       	std	Y+63, r18	; 0x3f
    1ef8:	2f 97       	sbiw	r28, 0x0f	; 15
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	60 96       	adiw	r28, 0x10	; 16
    1efe:	4f af       	std	Y+63, r20	; 0x3f
    1f00:	60 97       	sbiw	r28, 0x10	; 16
    1f02:	2f 96       	adiw	r28, 0x0f	; 15
    1f04:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f06:	2f 97       	sbiw	r28, 0x0f	; 15
    1f08:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f0a:	56 17       	cp	r21, r22
    1f0c:	18 f0       	brcs	.+6      	; 0x1f14 <TIMER0_Set_Time_S+0x472>
    1f0e:	60 96       	adiw	r28, 0x10	; 16
    1f10:	1f ae       	std	Y+63, r1	; 0x3f
    1f12:	60 97       	sbiw	r28, 0x10	; 16
    1f14:	2e 96       	adiw	r28, 0x0e	; 14
    1f16:	7f ad       	ldd	r23, Y+63	; 0x3f
    1f18:	2e 97       	sbiw	r28, 0x0e	; 14
    1f1a:	60 96       	adiw	r28, 0x10	; 16
    1f1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f1e:	60 97       	sbiw	r28, 0x10	; 16
    1f20:	78 2b       	or	r23, r24
    1f22:	2e 96       	adiw	r28, 0x0e	; 14
    1f24:	7f af       	std	Y+63, r23	; 0x3f
    1f26:	2e 97       	sbiw	r28, 0x0e	; 14
    1f28:	2f 96       	adiw	r28, 0x0f	; 15
    1f2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f2c:	2f 97       	sbiw	r28, 0x0f	; 15
    1f2e:	9b af       	std	Y+59, r25	; 0x3b
    1f30:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f32:	f9 85       	ldd	r31, Y+9	; 0x09
    1f34:	ef 0f       	add	r30, r31
    1f36:	ec af       	std	Y+60, r30	; 0x3c
    1f38:	2e 96       	adiw	r28, 0x0e	; 14
    1f3a:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f3c:	2e 97       	sbiw	r28, 0x0e	; 14
    1f3e:	0c ad       	ldd	r16, Y+60	; 0x3c
    1f40:	80 0f       	add	r24, r16
    1f42:	8c af       	std	Y+60, r24	; 0x3c
    1f44:	1d a9       	ldd	r17, Y+53	; 0x35
    1f46:	1a 8b       	std	Y+18, r17	; 0x12
    1f48:	2e a9       	ldd	r18, Y+54	; 0x36
    1f4a:	2b 8b       	std	Y+19, r18	; 0x13
    1f4c:	3f a9       	ldd	r19, Y+55	; 0x37
    1f4e:	3c 8b       	std	Y+20, r19	; 0x14
    1f50:	48 ad       	ldd	r20, Y+56	; 0x38
    1f52:	4d 8b       	std	Y+21, r20	; 0x15
    1f54:	59 ad       	ldd	r21, Y+57	; 0x39
    1f56:	5e 8b       	std	Y+22, r21	; 0x16
    1f58:	6a ad       	ldd	r22, Y+58	; 0x3a
    1f5a:	6f 8b       	std	Y+23, r22	; 0x17
    1f5c:	7b ad       	ldd	r23, Y+59	; 0x3b
    1f5e:	78 8f       	std	Y+24, r23	; 0x18
    1f60:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f62:	89 8f       	std	Y+25, r24	; 0x19
    1f64:	2a 89       	ldd	r18, Y+18	; 0x12
    1f66:	3b 89       	ldd	r19, Y+19	; 0x13
    1f68:	4c 89       	ldd	r20, Y+20	; 0x14
    1f6a:	5d 89       	ldd	r21, Y+21	; 0x15
    1f6c:	6e 89       	ldd	r22, Y+22	; 0x16
    1f6e:	7f 89       	ldd	r23, Y+23	; 0x17
    1f70:	88 8d       	ldd	r24, Y+24	; 0x18
    1f72:	99 8d       	ldd	r25, Y+25	; 0x19
    1f74:	03 e0       	ldi	r16, 0x03	; 3
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    1f7a:	a2 2e       	mov	r10, r18
    1f7c:	b3 2e       	mov	r11, r19
    1f7e:	c4 2e       	mov	r12, r20
    1f80:	d5 2e       	mov	r13, r21
    1f82:	e6 2e       	mov	r14, r22
    1f84:	f7 2e       	mov	r15, r23
    1f86:	08 2f       	mov	r16, r24
    1f88:	19 2f       	mov	r17, r25
    1f8a:	2a 2d       	mov	r18, r10
    1f8c:	3b 2d       	mov	r19, r11
    1f8e:	4c 2d       	mov	r20, r12
    1f90:	5d 2d       	mov	r21, r13
    1f92:	6e 2d       	mov	r22, r14
    1f94:	7f 2d       	mov	r23, r15
    1f96:	80 2f       	mov	r24, r16
    1f98:	91 2f       	mov	r25, r17
    1f9a:	20 93 72 01 	sts	0x0172, r18
    1f9e:	30 93 73 01 	sts	0x0173, r19
    1fa2:	40 93 74 01 	sts	0x0174, r20
    1fa6:	50 93 75 01 	sts	0x0175, r21
    1faa:	60 93 76 01 	sts	0x0176, r22
    1fae:	70 93 77 01 	sts	0x0177, r23
    1fb2:	80 93 78 01 	sts	0x0178, r24
    1fb6:	90 93 79 01 	sts	0x0179, r25
    T_OV_TIMER0 = (256*(f32)PRE_SCALAR_TIMER0)/8000 ;                                //time in ms
    1fba:	80 91 7a 01 	lds	r24, 0x017A
    1fbe:	90 91 7b 01 	lds	r25, 0x017B
    1fc2:	cc 01       	movw	r24, r24
    1fc4:	a0 e0       	ldi	r26, 0x00	; 0
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	bc 01       	movw	r22, r24
    1fca:	cd 01       	movw	r24, r26
    1fcc:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	53 e4       	ldi	r21, 0x43	; 67
    1fe0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4a ef       	ldi	r20, 0xFA	; 250
    1ff2:	55 e4       	ldi	r21, 0x45	; 69
    1ff4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	80 93 7c 01 	sts	0x017C, r24
    2000:	90 93 7d 01 	sts	0x017D, r25
    2004:	a0 93 7e 01 	sts	0x017E, r26
    2008:	b0 93 7f 01 	sts	0x017F, r27
	NUM_OV_TIMER0 = DESIRED_TIME_TIMER0 / T_OV_TIMER0 ;                              //number of overflow wanted in entered if
    200c:	a0 90 72 01 	lds	r10, 0x0172
    2010:	b0 90 73 01 	lds	r11, 0x0173
    2014:	c0 90 74 01 	lds	r12, 0x0174
    2018:	d0 90 75 01 	lds	r13, 0x0175
    201c:	e0 90 76 01 	lds	r14, 0x0176
    2020:	f0 90 77 01 	lds	r15, 0x0177
    2024:	00 91 78 01 	lds	r16, 0x0178
    2028:	10 91 79 01 	lds	r17, 0x0179
    202c:	2a 2d       	mov	r18, r10
    202e:	3b 2d       	mov	r19, r11
    2030:	4c 2d       	mov	r20, r12
    2032:	5d 2d       	mov	r21, r13
    2034:	6e 2d       	mov	r22, r14
    2036:	7f 2d       	mov	r23, r15
    2038:	80 2f       	mov	r24, r16
    203a:	91 2f       	mov	r25, r17
    203c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	20 91 7c 01 	lds	r18, 0x017C
    2048:	30 91 7d 01 	lds	r19, 0x017D
    204c:	40 91 7e 01 	lds	r20, 0x017E
    2050:	50 91 7f 01 	lds	r21, 0x017F
    2054:	bc 01       	movw	r22, r24
    2056:	cd 01       	movw	r24, r26
    2058:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	80 93 80 01 	sts	0x0180, r24
    2064:	90 93 81 01 	sts	0x0181, r25
    2068:	a0 93 82 01 	sts	0x0182, r26
    206c:	b0 93 83 01 	sts	0x0183, r27
	PRE_LOAD_TIMER0  = NUM_OV_TIMER0 -( (u32)(DESIRED_TIME_TIMER0 /T_OV_TIMER0) );   //the value which should be in TCNT to make time more accurate
    2070:	60 90 80 01 	lds	r6, 0x0180
    2074:	70 90 81 01 	lds	r7, 0x0181
    2078:	80 90 82 01 	lds	r8, 0x0182
    207c:	90 90 83 01 	lds	r9, 0x0183
    2080:	a0 90 72 01 	lds	r10, 0x0172
    2084:	b0 90 73 01 	lds	r11, 0x0173
    2088:	c0 90 74 01 	lds	r12, 0x0174
    208c:	d0 90 75 01 	lds	r13, 0x0175
    2090:	e0 90 76 01 	lds	r14, 0x0176
    2094:	f0 90 77 01 	lds	r15, 0x0177
    2098:	00 91 78 01 	lds	r16, 0x0178
    209c:	10 91 79 01 	lds	r17, 0x0179
    20a0:	2a 2d       	mov	r18, r10
    20a2:	3b 2d       	mov	r19, r11
    20a4:	4c 2d       	mov	r20, r12
    20a6:	5d 2d       	mov	r21, r13
    20a8:	6e 2d       	mov	r22, r14
    20aa:	7f 2d       	mov	r23, r15
    20ac:	80 2f       	mov	r24, r16
    20ae:	91 2f       	mov	r25, r17
    20b0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	20 91 7c 01 	lds	r18, 0x017C
    20bc:	30 91 7d 01 	lds	r19, 0x017D
    20c0:	40 91 7e 01 	lds	r20, 0x017E
    20c4:	50 91 7f 01 	lds	r21, 0x017F
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	cc 01       	movw	r24, r24
    20e2:	a0 e0       	ldi	r26, 0x00	; 0
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    20ee:	9b 01       	movw	r18, r22
    20f0:	ac 01       	movw	r20, r24
    20f2:	c4 01       	movw	r24, r8
    20f4:	b3 01       	movw	r22, r6
    20f6:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	80 93 84 01 	sts	0x0184, r24
    2102:	90 93 85 01 	sts	0x0185, r25
    2106:	a0 93 86 01 	sts	0x0186, r26
    210a:	b0 93 87 01 	sts	0x0187, r27
	if ( NUM_OV_TIMER0 > (u32)NUM_OV_TIMER0 ){
    210e:	80 91 80 01 	lds	r24, 0x0180
    2112:	90 91 81 01 	lds	r25, 0x0181
    2116:	a0 91 82 01 	lds	r26, 0x0182
    211a:	b0 91 83 01 	lds	r27, 0x0183
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	cc 01       	movw	r24, r24
    212c:	a0 e0       	ldi	r26, 0x00	; 0
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	20 91 80 01 	lds	r18, 0x0180
    2140:	30 91 81 01 	lds	r19, 0x0181
    2144:	40 91 82 01 	lds	r20, 0x0182
    2148:	50 91 83 01 	lds	r21, 0x0183
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    2154:	88 23       	and	r24, r24
    2156:	d4 f4       	brge	.+52     	; 0x218c <TIMER0_Set_Time_S+0x6ea>
		NUM_OV_TIMER0++;
    2158:	80 91 80 01 	lds	r24, 0x0180
    215c:	90 91 81 01 	lds	r25, 0x0181
    2160:	a0 91 82 01 	lds	r26, 0x0182
    2164:	b0 91 83 01 	lds	r27, 0x0183
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	80 93 80 01 	sts	0x0180, r24
    2180:	90 93 81 01 	sts	0x0181, r25
    2184:	a0 93 82 01 	sts	0x0182, r26
    2188:	b0 93 83 01 	sts	0x0183, r27
	}//end if

	//to begin from specific value
	TCNT0 = 256-(256*PRE_LOAD_TIMER0 );
    218c:	02 e5       	ldi	r16, 0x52	; 82
    218e:	10 e0       	ldi	r17, 0x00	; 0
    2190:	80 91 84 01 	lds	r24, 0x0184
    2194:	90 91 85 01 	lds	r25, 0x0185
    2198:	a0 91 86 01 	lds	r26, 0x0186
    219c:	b0 91 87 01 	lds	r27, 0x0187
    21a0:	bc 01       	movw	r22, r24
    21a2:	cd 01       	movw	r24, r26
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	53 ec       	ldi	r21, 0xC3	; 195
    21ac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e8       	ldi	r20, 0x80	; 128
    21be:	53 e4       	ldi	r21, 0x43	; 67
    21c0:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	f8 01       	movw	r30, r16
    21d6:	80 83       	st	Z, r24
}
    21d8:	c1 5b       	subi	r28, 0xB1	; 177
    21da:	df 4f       	sbci	r29, 0xFF	; 255
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	1f 91       	pop	r17
    21ec:	0f 91       	pop	r16
    21ee:	ff 90       	pop	r15
    21f0:	ef 90       	pop	r14
    21f2:	df 90       	pop	r13
    21f4:	cf 90       	pop	r12
    21f6:	bf 90       	pop	r11
    21f8:	af 90       	pop	r10
    21fa:	9f 90       	pop	r9
    21fc:	8f 90       	pop	r8
    21fe:	7f 90       	pop	r7
    2200:	6f 90       	pop	r6
    2202:	08 95       	ret

00002204 <TIMER0_Set_Time_mS>:

void TIMER0_Set_Time_mS (u16 Copy_U8Time){
    2204:	6f 92       	push	r6
    2206:	7f 92       	push	r7
    2208:	8f 92       	push	r8
    220a:	9f 92       	push	r9
    220c:	af 92       	push	r10
    220e:	bf 92       	push	r11
    2210:	cf 92       	push	r12
    2212:	df 92       	push	r13
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
    2218:	0f 93       	push	r16
    221a:	1f 93       	push	r17
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	00 d0       	rcall	.+0      	; 0x2222 <TIMER0_Set_Time_mS+0x1e>
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	9a 83       	std	Y+2, r25	; 0x02
    2228:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER0 = Copy_U8Time ;                                              //time in ms
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	9c 01       	movw	r18, r24
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	70 e0       	ldi	r23, 0x00	; 0
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	20 93 72 01 	sts	0x0172, r18
    2240:	30 93 73 01 	sts	0x0173, r19
    2244:	40 93 74 01 	sts	0x0174, r20
    2248:	50 93 75 01 	sts	0x0175, r21
    224c:	60 93 76 01 	sts	0x0176, r22
    2250:	70 93 77 01 	sts	0x0177, r23
    2254:	80 93 78 01 	sts	0x0178, r24
    2258:	90 93 79 01 	sts	0x0179, r25
    T_OV_TIMER0 = (256*(f32)PRE_SCALAR_TIMER0)/8000 ;                                //time in us
    225c:	80 91 7a 01 	lds	r24, 0x017A
    2260:	90 91 7b 01 	lds	r25, 0x017B
    2264:	cc 01       	movw	r24, r24
    2266:	a0 e0       	ldi	r26, 0x00	; 0
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e8       	ldi	r20, 0x80	; 128
    2280:	53 e4       	ldi	r21, 0x43	; 67
    2282:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a ef       	ldi	r20, 0xFA	; 250
    2294:	55 e4       	ldi	r21, 0x45	; 69
    2296:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	80 93 7c 01 	sts	0x017C, r24
    22a2:	90 93 7d 01 	sts	0x017D, r25
    22a6:	a0 93 7e 01 	sts	0x017E, r26
    22aa:	b0 93 7f 01 	sts	0x017F, r27
	NUM_OV_TIMER0 = DESIRED_TIME_TIMER0 / T_OV_TIMER0 ;                              //number of overflow wanted in entered if
    22ae:	a0 90 72 01 	lds	r10, 0x0172
    22b2:	b0 90 73 01 	lds	r11, 0x0173
    22b6:	c0 90 74 01 	lds	r12, 0x0174
    22ba:	d0 90 75 01 	lds	r13, 0x0175
    22be:	e0 90 76 01 	lds	r14, 0x0176
    22c2:	f0 90 77 01 	lds	r15, 0x0177
    22c6:	00 91 78 01 	lds	r16, 0x0178
    22ca:	10 91 79 01 	lds	r17, 0x0179
    22ce:	2a 2d       	mov	r18, r10
    22d0:	3b 2d       	mov	r19, r11
    22d2:	4c 2d       	mov	r20, r12
    22d4:	5d 2d       	mov	r21, r13
    22d6:	6e 2d       	mov	r22, r14
    22d8:	7f 2d       	mov	r23, r15
    22da:	80 2f       	mov	r24, r16
    22dc:	91 2f       	mov	r25, r17
    22de:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	20 91 7c 01 	lds	r18, 0x017C
    22ea:	30 91 7d 01 	lds	r19, 0x017D
    22ee:	40 91 7e 01 	lds	r20, 0x017E
    22f2:	50 91 7f 01 	lds	r21, 0x017F
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	80 93 80 01 	sts	0x0180, r24
    2306:	90 93 81 01 	sts	0x0181, r25
    230a:	a0 93 82 01 	sts	0x0182, r26
    230e:	b0 93 83 01 	sts	0x0183, r27
	PRE_LOAD_TIMER0  = NUM_OV_TIMER0 -( (u32)(DESIRED_TIME_TIMER0 /T_OV_TIMER0) );   //the value which should be in TCNT to make time more accurate
    2312:	60 90 80 01 	lds	r6, 0x0180
    2316:	70 90 81 01 	lds	r7, 0x0181
    231a:	80 90 82 01 	lds	r8, 0x0182
    231e:	90 90 83 01 	lds	r9, 0x0183
    2322:	a0 90 72 01 	lds	r10, 0x0172
    2326:	b0 90 73 01 	lds	r11, 0x0173
    232a:	c0 90 74 01 	lds	r12, 0x0174
    232e:	d0 90 75 01 	lds	r13, 0x0175
    2332:	e0 90 76 01 	lds	r14, 0x0176
    2336:	f0 90 77 01 	lds	r15, 0x0177
    233a:	00 91 78 01 	lds	r16, 0x0178
    233e:	10 91 79 01 	lds	r17, 0x0179
    2342:	2a 2d       	mov	r18, r10
    2344:	3b 2d       	mov	r19, r11
    2346:	4c 2d       	mov	r20, r12
    2348:	5d 2d       	mov	r21, r13
    234a:	6e 2d       	mov	r22, r14
    234c:	7f 2d       	mov	r23, r15
    234e:	80 2f       	mov	r24, r16
    2350:	91 2f       	mov	r25, r17
    2352:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	20 91 7c 01 	lds	r18, 0x017C
    235e:	30 91 7d 01 	lds	r19, 0x017D
    2362:	40 91 7e 01 	lds	r20, 0x017E
    2366:	50 91 7f 01 	lds	r21, 0x017F
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	bc 01       	movw	r22, r24
    2378:	cd 01       	movw	r24, r26
    237a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	cc 01       	movw	r24, r24
    2384:	a0 e0       	ldi	r26, 0x00	; 0
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    2390:	9b 01       	movw	r18, r22
    2392:	ac 01       	movw	r20, r24
    2394:	c4 01       	movw	r24, r8
    2396:	b3 01       	movw	r22, r6
    2398:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	80 93 84 01 	sts	0x0184, r24
    23a4:	90 93 85 01 	sts	0x0185, r25
    23a8:	a0 93 86 01 	sts	0x0186, r26
    23ac:	b0 93 87 01 	sts	0x0187, r27
	if ( NUM_OV_TIMER0 > (u32)NUM_OV_TIMER0 ){
    23b0:	80 91 80 01 	lds	r24, 0x0180
    23b4:	90 91 81 01 	lds	r25, 0x0181
    23b8:	a0 91 82 01 	lds	r26, 0x0182
    23bc:	b0 91 83 01 	lds	r27, 0x0183
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	cc 01       	movw	r24, r24
    23ce:	a0 e0       	ldi	r26, 0x00	; 0
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	20 91 80 01 	lds	r18, 0x0180
    23e2:	30 91 81 01 	lds	r19, 0x0181
    23e6:	40 91 82 01 	lds	r20, 0x0182
    23ea:	50 91 83 01 	lds	r21, 0x0183
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    23f6:	88 23       	and	r24, r24
    23f8:	d4 f4       	brge	.+52     	; 0x242e <TIMER0_Set_Time_mS+0x22a>
		NUM_OV_TIMER0++;
    23fa:	80 91 80 01 	lds	r24, 0x0180
    23fe:	90 91 81 01 	lds	r25, 0x0181
    2402:	a0 91 82 01 	lds	r26, 0x0182
    2406:	b0 91 83 01 	lds	r27, 0x0183
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e8       	ldi	r20, 0x80	; 128
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	80 93 80 01 	sts	0x0180, r24
    2422:	90 93 81 01 	sts	0x0181, r25
    2426:	a0 93 82 01 	sts	0x0182, r26
    242a:	b0 93 83 01 	sts	0x0183, r27
#if PRE_TYPE_TIMER0 != PRE_8
#error "YOU SELECTED PRE_SCALAR MAKE MORE THAN 1 ms"
#endif

	//to begin from specific value
	TCNT0 = 256-(256*PRE_LOAD_TIMER0 );
    242e:	02 e5       	ldi	r16, 0x52	; 82
    2430:	10 e0       	ldi	r17, 0x00	; 0
    2432:	80 91 84 01 	lds	r24, 0x0184
    2436:	90 91 85 01 	lds	r25, 0x0185
    243a:	a0 91 86 01 	lds	r26, 0x0186
    243e:	b0 91 87 01 	lds	r27, 0x0187
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e8       	ldi	r20, 0x80	; 128
    244c:	53 ec       	ldi	r21, 0xC3	; 195
    244e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	bc 01       	movw	r22, r24
    2458:	cd 01       	movw	r24, r26
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e8       	ldi	r20, 0x80	; 128
    2460:	53 e4       	ldi	r21, 0x43	; 67
    2462:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	f8 01       	movw	r30, r16
    2478:	80 83       	st	Z, r24
}
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	ff 90       	pop	r15
    2488:	ef 90       	pop	r14
    248a:	df 90       	pop	r13
    248c:	cf 90       	pop	r12
    248e:	bf 90       	pop	r11
    2490:	af 90       	pop	r10
    2492:	9f 90       	pop	r9
    2494:	8f 90       	pop	r8
    2496:	7f 90       	pop	r7
    2498:	6f 90       	pop	r6
    249a:	08 95       	ret

0000249c <Timer0_VidSETDUTY>:


void Timer0_VidSETDUTY (u8 duty ) {
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	0f 92       	push	r0
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	89 83       	std	Y+1, r24	; 0x01
	duty = (u8)( (u16)duty*255/100 ) ;
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	48 2f       	mov	r20, r24
    24ac:	50 e0       	ldi	r21, 0x00	; 0
    24ae:	ca 01       	movw	r24, r20
    24b0:	9c 01       	movw	r18, r24
    24b2:	22 0f       	add	r18, r18
    24b4:	33 1f       	adc	r19, r19
    24b6:	c9 01       	movw	r24, r18
    24b8:	96 95       	lsr	r25
    24ba:	98 2f       	mov	r25, r24
    24bc:	88 27       	eor	r24, r24
    24be:	97 95       	ror	r25
    24c0:	87 95       	ror	r24
    24c2:	82 1b       	sub	r24, r18
    24c4:	93 0b       	sbc	r25, r19
    24c6:	84 0f       	add	r24, r20
    24c8:	95 1f       	adc	r25, r21
    24ca:	24 e6       	ldi	r18, 0x64	; 100
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	b9 01       	movw	r22, r18
    24d0:	0e 94 09 2c 	call	0x5812	; 0x5812 <__udivmodhi4>
    24d4:	cb 01       	movw	r24, r22
    24d6:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = duty ;
    24d8:	ec e5       	ldi	r30, 0x5C	; 92
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	80 83       	st	Z, r24
}
    24e0:	0f 90       	pop	r0
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <TIMER1_VidInitializeMode14>:



/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
//to check that you don't use OV or COMPARE or FAST_PWM mode
void TIMER1_VidInitializeMode14 (void) {
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62

	//COM1A1/COM1B1 COM1A0/COM1B0  1 0 Clear OC1A/OC1B on compare match, set  OC1A/OC1B at TOP
	TCCR1A = 0b10100000 ;
    24f0:	ef e4       	ldi	r30, 0x4F	; 79
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 ea       	ldi	r24, 0xA0	; 160
    24f6:	80 83       	st	Z, r24

	//in next update we will make Timer not fixed modes
	/*WGM13 WGM12	WGM11	WGM10	Timer/Counter Mode of Operation TOP Update of OCR1x	TOV1 Flag Set 	on
      1      1       1        0        Fast PWM                      ICR1 TOP TOP*/
	SET_BIT(TCCR1B,WGM13);
    24f8:	ae e4       	ldi	r26, 0x4E	; 78
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	ee e4       	ldi	r30, 0x4E	; 78
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	80 61       	ori	r24, 0x10	; 16
    2504:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    2506:	ae e4       	ldi	r26, 0x4E	; 78
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	ee e4       	ldi	r30, 0x4E	; 78
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	88 60       	ori	r24, 0x08	; 8
    2512:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    2514:	af e4       	ldi	r26, 0x4F	; 79
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	ef e4       	ldi	r30, 0x4F	; 79
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	82 60       	ori	r24, 0x02	; 2
    2520:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,WGM10);
    2522:	af e4       	ldi	r26, 0x4F	; 79
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	ef e4       	ldi	r30, 0x4F	; 79
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8e 7f       	andi	r24, 0xFE	; 254
    252e:	8c 93       	st	X, r24

	//define pin of timer1
	DIO_VidSetPinDirection(3,5,1);
    2530:	83 e0       	ldi	r24, 0x03	; 3
    2532:	65 e0       	ldi	r22, 0x05	; 5
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3,4,1);
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	64 e0       	ldi	r22, 0x04	; 4
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(3,5,0);
    2544:	83 e0       	ldi	r24, 0x03	; 3
    2546:	65 e0       	ldi	r22, 0x05	; 5
    2548:	40 e0       	ldi	r20, 0x00	; 0
    254a:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(3,4,0);
    254e:	83 e0       	ldi	r24, 0x03	; 3
    2550:	64 e0       	ldi	r22, 0x04	; 4
    2552:	40 e0       	ldi	r20, 0x00	; 0
    2554:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	CLR_BIT(TCCR1B,CS12);
	CLR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS10);
	PRE_SCALAR_TIMER1 = 1 ;
#elif PRE_TYPE_TIMER1 == PRE_8
	CLR_BIT(TCCR1B,CS12);
    2558:	ae e4       	ldi	r26, 0x4E	; 78
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	ee e4       	ldi	r30, 0x4E	; 78
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	8b 7f       	andi	r24, 0xFB	; 251
    2564:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    2566:	ae e4       	ldi	r26, 0x4E	; 78
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	ee e4       	ldi	r30, 0x4E	; 78
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	82 60       	ori	r24, 0x02	; 2
    2572:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS10);
    2574:	ae e4       	ldi	r26, 0x4E	; 78
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	ee e4       	ldi	r30, 0x4E	; 78
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	8e 7f       	andi	r24, 0xFE	; 254
    2580:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER1 = 8 ;
    2582:	88 e0       	ldi	r24, 0x08	; 8
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	90 93 89 01 	sts	0x0189, r25
    258a:	80 93 88 01 	sts	0x0188, r24
	CLR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS10);
	PRE_SCALAR_TIMER1 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <Timer1_VidSETFreqency>:

/***************** Servo in MODE 14  *****************************/
//to set the top of counting in PWM
void Timer1_VidSETFreqency (){
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
	ICR1H = (u8)(top_count>>8) ;
	ICR1L = (u8)(top_count) ;
	*/

	/* set duty accroding to the wanted frequency */
	ICR1H = 0b10011000 ;
    259c:	e7 e4       	ldi	r30, 0x47	; 71
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	88 e9       	ldi	r24, 0x98	; 152
    25a2:	80 83       	st	Z, r24
	ICR1L = 0b00100000 ;
    25a4:	e6 e4       	ldi	r30, 0x46	; 70
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 e2       	ldi	r24, 0x20	; 32
    25aa:	80 83       	st	Z, r24
}
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <Timer1_VidSETDUTY>:

//in next update we want to make duty by _precentage %
void Timer1_VidSETDUTY (u16 Copy_U8DutyA , u16 Copy_U8DutyB ) {
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <Timer1_VidSETDUTY+0x6>
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <Timer1_VidSETDUTY+0x8>
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	7c 83       	std	Y+4, r23	; 0x04
    25c4:	6b 83       	std	Y+3, r22	; 0x03
	OCR1AH = (u8)(Copy_U8DutyA>>8) ;
    25c6:	eb e4       	ldi	r30, 0x4B	; 75
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	89 2f       	mov	r24, r25
    25d0:	99 27       	eor	r25, r25
    25d2:	80 83       	st	Z, r24
	OCR1AL = (u8)Copy_U8DutyA ;
    25d4:	ea e4       	ldi	r30, 0x4A	; 74
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	80 83       	st	Z, r24

	OCR1BH = (u8)(Copy_U8DutyB>>8) ;
    25dc:	e9 e4       	ldi	r30, 0x49	; 73
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	89 2f       	mov	r24, r25
    25e6:	99 27       	eor	r25, r25
    25e8:	80 83       	st	Z, r24
	OCR1BL = (u8)Copy_U8DutyB ;
    25ea:	e8 e4       	ldi	r30, 0x48	; 72
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	80 83       	st	Z, r24
}
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <TIMER1_VidInitializeMode15>:


/*Servo in mode 15*/
void TIMER1_VidInitializeMode15(u8 Mode,u8 ModelA,u8 ModelB){
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	29 97       	sbiw	r28, 0x09	; 9
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	89 83       	std	Y+1, r24	; 0x01
    2616:	6a 83       	std	Y+2, r22	; 0x02
    2618:	4b 83       	std	Y+3, r20	; 0x03
	switch(Mode){
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	39 87       	std	Y+9, r19	; 0x09
    2622:	28 87       	std	Y+8, r18	; 0x08
    2624:	88 85       	ldd	r24, Y+8	; 0x08
    2626:	99 85       	ldd	r25, Y+9	; 0x09
    2628:	8e 30       	cpi	r24, 0x0E	; 14
    262a:	91 05       	cpc	r25, r1
    262c:	31 f0       	breq	.+12     	; 0x263a <TIMER1_VidInitializeMode15+0x3a>
    262e:	28 85       	ldd	r18, Y+8	; 0x08
    2630:	39 85       	ldd	r19, Y+9	; 0x09
    2632:	2f 30       	cpi	r18, 0x0F	; 15
    2634:	31 05       	cpc	r19, r1
    2636:	f1 f0       	breq	.+60     	; 0x2674 <TIMER1_VidInitializeMode15+0x74>
    2638:	39 c0       	rjmp	.+114    	; 0x26ac <TIMER1_VidInitializeMode15+0xac>
	   case  FAST_PWM_ICR1 :
		   CLR_BIT(TCCR1A,WGM10);
    263a:	af e4       	ldi	r26, 0x4F	; 79
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	ef e4       	ldi	r30, 0x4F	; 79
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	8e 7f       	andi	r24, 0xFE	; 254
    2646:	8c 93       	st	X, r24
		   SET_BIT(TCCR1A,WGM11);
    2648:	af e4       	ldi	r26, 0x4F	; 79
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	ef e4       	ldi	r30, 0x4F	; 79
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	82 60       	ori	r24, 0x02	; 2
    2654:	8c 93       	st	X, r24
		   SET_BIT(TCCR1B,WGM12);
    2656:	ae e4       	ldi	r26, 0x4E	; 78
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	ee e4       	ldi	r30, 0x4E	; 78
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	88 60       	ori	r24, 0x08	; 8
    2662:	8c 93       	st	X, r24
		   SET_BIT(TCCR1B,WGM13);
    2664:	ae e4       	ldi	r26, 0x4E	; 78
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	ee e4       	ldi	r30, 0x4E	; 78
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	80 61       	ori	r24, 0x10	; 16
    2670:	8c 93       	st	X, r24
    2672:	1c c0       	rjmp	.+56     	; 0x26ac <TIMER1_VidInitializeMode15+0xac>
	       break                ;
	   case  FAST_PWM_OCR1A :
		   SET_BIT(TCCR1A,WGM10);
    2674:	af e4       	ldi	r26, 0x4F	; 79
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	ef e4       	ldi	r30, 0x4F	; 79
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	81 60       	ori	r24, 0x01	; 1
    2680:	8c 93       	st	X, r24
		   SET_BIT(TCCR1A,WGM11);
    2682:	af e4       	ldi	r26, 0x4F	; 79
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	ef e4       	ldi	r30, 0x4F	; 79
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	82 60       	ori	r24, 0x02	; 2
    268e:	8c 93       	st	X, r24
		   SET_BIT(TCCR1B,WGM12);
    2690:	ae e4       	ldi	r26, 0x4E	; 78
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ee e4       	ldi	r30, 0x4E	; 78
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	88 60       	ori	r24, 0x08	; 8
    269c:	8c 93       	st	X, r24
		   SET_BIT(TCCR1B,WGM13);
    269e:	ae e4       	ldi	r26, 0x4E	; 78
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	ee e4       	ldi	r30, 0x4E	; 78
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	80 61       	ori	r24, 0x10	; 16
    26aa:	8c 93       	st	X, r24
	       break                ;
	}
	switch(ModelA){
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	3f 83       	std	Y+7, r19	; 0x07
    26b4:	2e 83       	std	Y+6, r18	; 0x06
    26b6:	8e 81       	ldd	r24, Y+6	; 0x06
    26b8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ba:	81 30       	cpi	r24, 0x01	; 1
    26bc:	91 05       	cpc	r25, r1
    26be:	21 f1       	breq	.+72     	; 0x2708 <TIMER1_VidInitializeMode15+0x108>
    26c0:	2e 81       	ldd	r18, Y+6	; 0x06
    26c2:	3f 81       	ldd	r19, Y+7	; 0x07
    26c4:	22 30       	cpi	r18, 0x02	; 2
    26c6:	31 05       	cpc	r19, r1
    26c8:	2c f4       	brge	.+10     	; 0x26d4 <TIMER1_VidInitializeMode15+0xd4>
    26ca:	8e 81       	ldd	r24, Y+6	; 0x06
    26cc:	9f 81       	ldd	r25, Y+7	; 0x07
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	61 f0       	breq	.+24     	; 0x26ea <TIMER1_VidInitializeMode15+0xea>
    26d2:	46 c0       	rjmp	.+140    	; 0x2760 <TIMER1_VidInitializeMode15+0x160>
    26d4:	2e 81       	ldd	r18, Y+6	; 0x06
    26d6:	3f 81       	ldd	r19, Y+7	; 0x07
    26d8:	22 30       	cpi	r18, 0x02	; 2
    26da:	31 05       	cpc	r19, r1
    26dc:	21 f1       	breq	.+72     	; 0x2726 <TIMER1_VidInitializeMode15+0x126>
    26de:	8e 81       	ldd	r24, Y+6	; 0x06
    26e0:	9f 81       	ldd	r25, Y+7	; 0x07
    26e2:	83 30       	cpi	r24, 0x03	; 3
    26e4:	91 05       	cpc	r25, r1
    26e6:	71 f1       	breq	.+92     	; 0x2744 <TIMER1_VidInitializeMode15+0x144>
    26e8:	3b c0       	rjmp	.+118    	; 0x2760 <TIMER1_VidInitializeMode15+0x160>
		case   Normal :
		   CLR_BIT(TCCR1A,COM1A0);
    26ea:	af e4       	ldi	r26, 0x4F	; 79
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	ef e4       	ldi	r30, 0x4F	; 79
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	8f 7b       	andi	r24, 0xBF	; 191
    26f6:	8c 93       	st	X, r24
		   CLR_BIT(TCCR1A,COM1A1);
    26f8:	af e4       	ldi	r26, 0x4F	; 79
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	ef e4       	ldi	r30, 0x4F	; 79
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	8f 77       	andi	r24, 0x7F	; 127
    2704:	8c 93       	st	X, r24
    2706:	2c c0       	rjmp	.+88     	; 0x2760 <TIMER1_VidInitializeMode15+0x160>
		   break                 ;
		case   Toggle :
			SET_BIT(TCCR1A,COM1A0);
    2708:	af e4       	ldi	r26, 0x4F	; 79
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ef e4       	ldi	r30, 0x4F	; 79
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	80 64       	ori	r24, 0x40	; 64
    2714:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,COM1A1);
    2716:	af e4       	ldi	r26, 0x4F	; 79
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	ef e4       	ldi	r30, 0x4F	; 79
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	8f 77       	andi	r24, 0x7F	; 127
    2722:	8c 93       	st	X, r24
    2724:	1d c0       	rjmp	.+58     	; 0x2760 <TIMER1_VidInitializeMode15+0x160>
		    break                 ;
		case   CLEAR :
			CLR_BIT(TCCR1A,COM1A0);
    2726:	af e4       	ldi	r26, 0x4F	; 79
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	ef e4       	ldi	r30, 0x4F	; 79
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	8f 7b       	andi	r24, 0xBF	; 191
    2732:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    2734:	af e4       	ldi	r26, 0x4F	; 79
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	ef e4       	ldi	r30, 0x4F	; 79
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	80 68       	ori	r24, 0x80	; 128
    2740:	8c 93       	st	X, r24
    2742:	0e c0       	rjmp	.+28     	; 0x2760 <TIMER1_VidInitializeMode15+0x160>
		    break                 ;
		case   SET :
			SET_BIT(TCCR1A,COM1A0);
    2744:	af e4       	ldi	r26, 0x4F	; 79
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	ef e4       	ldi	r30, 0x4F	; 79
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	80 64       	ori	r24, 0x40	; 64
    2750:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    2752:	af e4       	ldi	r26, 0x4F	; 79
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	ef e4       	ldi	r30, 0x4F	; 79
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	80 68       	ori	r24, 0x80	; 128
    275e:	8c 93       	st	X, r24
		    break                 ;
	}
	switch(ModelB){
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	3d 83       	std	Y+5, r19	; 0x05
    2768:	2c 83       	std	Y+4, r18	; 0x04
    276a:	8c 81       	ldd	r24, Y+4	; 0x04
    276c:	9d 81       	ldd	r25, Y+5	; 0x05
    276e:	81 30       	cpi	r24, 0x01	; 1
    2770:	91 05       	cpc	r25, r1
    2772:	21 f1       	breq	.+72     	; 0x27bc <TIMER1_VidInitializeMode15+0x1bc>
    2774:	2c 81       	ldd	r18, Y+4	; 0x04
    2776:	3d 81       	ldd	r19, Y+5	; 0x05
    2778:	22 30       	cpi	r18, 0x02	; 2
    277a:	31 05       	cpc	r19, r1
    277c:	2c f4       	brge	.+10     	; 0x2788 <TIMER1_VidInitializeMode15+0x188>
    277e:	8c 81       	ldd	r24, Y+4	; 0x04
    2780:	9d 81       	ldd	r25, Y+5	; 0x05
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	61 f0       	breq	.+24     	; 0x279e <TIMER1_VidInitializeMode15+0x19e>
    2786:	46 c0       	rjmp	.+140    	; 0x2814 <TIMER1_VidInitializeMode15+0x214>
    2788:	2c 81       	ldd	r18, Y+4	; 0x04
    278a:	3d 81       	ldd	r19, Y+5	; 0x05
    278c:	22 30       	cpi	r18, 0x02	; 2
    278e:	31 05       	cpc	r19, r1
    2790:	21 f1       	breq	.+72     	; 0x27da <TIMER1_VidInitializeMode15+0x1da>
    2792:	8c 81       	ldd	r24, Y+4	; 0x04
    2794:	9d 81       	ldd	r25, Y+5	; 0x05
    2796:	83 30       	cpi	r24, 0x03	; 3
    2798:	91 05       	cpc	r25, r1
    279a:	71 f1       	breq	.+92     	; 0x27f8 <TIMER1_VidInitializeMode15+0x1f8>
    279c:	3b c0       	rjmp	.+118    	; 0x2814 <TIMER1_VidInitializeMode15+0x214>
		case   Normal :
		   CLR_BIT(TCCR1A,COM1B0);
    279e:	af e4       	ldi	r26, 0x4F	; 79
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	ef e4       	ldi	r30, 0x4F	; 79
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	8f 7e       	andi	r24, 0xEF	; 239
    27aa:	8c 93       	st	X, r24
		   CLR_BIT(TCCR1A,COM1B1);
    27ac:	af e4       	ldi	r26, 0x4F	; 79
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	ef e4       	ldi	r30, 0x4F	; 79
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	8f 7d       	andi	r24, 0xDF	; 223
    27b8:	8c 93       	st	X, r24
    27ba:	2c c0       	rjmp	.+88     	; 0x2814 <TIMER1_VidInitializeMode15+0x214>
		   break                 ;
		case   Toggle :
			SET_BIT(TCCR1A,COM1B0);
    27bc:	af e4       	ldi	r26, 0x4F	; 79
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	ef e4       	ldi	r30, 0x4F	; 79
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	80 61       	ori	r24, 0x10	; 16
    27c8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,COM1B1);
    27ca:	af e4       	ldi	r26, 0x4F	; 79
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	ef e4       	ldi	r30, 0x4F	; 79
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	8f 7d       	andi	r24, 0xDF	; 223
    27d6:	8c 93       	st	X, r24
    27d8:	1d c0       	rjmp	.+58     	; 0x2814 <TIMER1_VidInitializeMode15+0x214>
			break                 ;
		case   CLEAR :
			CLR_BIT(TCCR1A,COM1B0);
    27da:	af e4       	ldi	r26, 0x4F	; 79
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	ef e4       	ldi	r30, 0x4F	; 79
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	8f 7e       	andi	r24, 0xEF	; 239
    27e6:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1B1);
    27e8:	af e4       	ldi	r26, 0x4F	; 79
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ef e4       	ldi	r30, 0x4F	; 79
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	80 62       	ori	r24, 0x20	; 32
    27f4:	8c 93       	st	X, r24
    27f6:	0e c0       	rjmp	.+28     	; 0x2814 <TIMER1_VidInitializeMode15+0x214>
			break                 ;
		case   SET :
			SET_BIT(TCCR1A,COM1B0);
    27f8:	af e4       	ldi	r26, 0x4F	; 79
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	ef e4       	ldi	r30, 0x4F	; 79
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	80 61       	ori	r24, 0x10	; 16
    2804:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1B1);
    2806:	af e4       	ldi	r26, 0x4F	; 79
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	ef e4       	ldi	r30, 0x4F	; 79
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	80 62       	ori	r24, 0x20	; 32
    2812:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,CS12);
		CLR_BIT(TCCR1B,CS11);
		SET_BIT(TCCR1B,CS10);
		PRE_SCALAR_TIMER1 = 1 ;
	#elif PRE_TYPE_TIMER1 == PRE_8
		CLR_BIT(TCCR1B,CS12);
    2814:	ae e4       	ldi	r26, 0x4E	; 78
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	ee e4       	ldi	r30, 0x4E	; 78
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	8b 7f       	andi	r24, 0xFB	; 251
    2820:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    2822:	ae e4       	ldi	r26, 0x4E	; 78
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	ee e4       	ldi	r30, 0x4E	; 78
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	82 60       	ori	r24, 0x02	; 2
    282e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,CS10);
    2830:	ae e4       	ldi	r26, 0x4E	; 78
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	ee e4       	ldi	r30, 0x4E	; 78
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	8e 7f       	andi	r24, 0xFE	; 254
    283c:	8c 93       	st	X, r24
		PRE_SCALAR_TIMER1 = 8 ;
    283e:	88 e0       	ldi	r24, 0x08	; 8
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	90 93 89 01 	sts	0x0189, r25
    2846:	80 93 88 01 	sts	0x0188, r24
		SET_BIT(TCCR1B,CS12);
		CLR_BIT(TCCR1B,CS11);
		SET_BIT(TCCR1B,CS10);
		PRE_SCALAR_TIMER1 = 1024 ;
	#endif
}
    284a:	29 96       	adiw	r28, 0x09	; 9
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <TIMER1_VidSetOCR1A>:

void TIMER1_VidSetOCR1A(u16 CopyOCR1A)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	00 d0       	rcall	.+0      	; 0x2862 <TIMER1_VidSetOCR1A+0x6>
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	9a 83       	std	Y+2, r25	; 0x02
    2868:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH = (u8)(CopyOCR1A>>8);
    286a:	eb e4       	ldi	r30, 0x4B	; 75
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	89 2f       	mov	r24, r25
    2874:	99 27       	eor	r25, r25
    2876:	80 83       	st	Z, r24
	OCR1AL = (u8)(CopyOCR1A);
    2878:	ea e4       	ldi	r30, 0x4A	; 74
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	80 83       	st	Z, r24
}
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <TIMER1_VidSetOCR1B>:
void TIMER1_VidSetOCR1B(u16 CopyOCR1B)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	00 d0       	rcall	.+0      	; 0x2890 <TIMER1_VidSetOCR1B+0x6>
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	9a 83       	std	Y+2, r25	; 0x02
    2896:	89 83       	std	Y+1, r24	; 0x01
	OCR1BH = (u8)(CopyOCR1B>>8);
    2898:	e9 e4       	ldi	r30, 0x49	; 73
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	89 2f       	mov	r24, r25
    28a2:	99 27       	eor	r25, r25
    28a4:	80 83       	st	Z, r24
	OCR1BL = (u8)(CopyOCR1B);
    28a6:	e8 e4       	ldi	r30, 0x48	; 72
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	80 83       	st	Z, r24
}
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <TIMER1_VidSetICR1>:
void TIMER1_VidSetICR1(u16 Copy_ICR1)
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	00 d0       	rcall	.+0      	; 0x28be <TIMER1_VidSetICR1+0x6>
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	89 83       	std	Y+1, r24	; 0x01
	ICR1H = (u8)(Copy_ICR1>>8);
    28c6:	e7 e4       	ldi	r30, 0x47	; 71
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	9a 81       	ldd	r25, Y+2	; 0x02
    28ce:	89 2f       	mov	r24, r25
    28d0:	99 27       	eor	r25, r25
    28d2:	80 83       	st	Z, r24
	ICR1L = (u8)(Copy_ICR1)   ;
    28d4:	e6 e4       	ldi	r30, 0x46	; 70
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	80 83       	st	Z, r24
}
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <Timer1Icu_init>:

/*For ICU Mode*/
void Timer1Icu_init()
{
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
	/* Configure ICP1/PD6 as i/p pin */
	DIO_VidSetPinDirection(ICP_PORT,ICP_PIN,0);
    28ee:	83 e0       	ldi	r24, 0x03	; 3
    28f0:	66 e0       	ldi	r22, 0x06	; 6
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    28f8:	ef e4       	ldi	r30, 0x4F	; 79
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	8c e0       	ldi	r24, 0x0C	; 12
    28fe:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	 CLR_BIT(TCCR1B,CS10);
    2900:	ae e4       	ldi	r26, 0x4E	; 78
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	ee e4       	ldi	r30, 0x4E	; 78
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	8e 7f       	andi	r24, 0xFE	; 254
    290c:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,CS11);
    290e:	ae e4       	ldi	r26, 0x4E	; 78
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	ee e4       	ldi	r30, 0x4E	; 78
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	82 60       	ori	r24, 0x02	; 2
    291a:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,CS12);
    291c:	ae e4       	ldi	r26, 0x4E	; 78
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	ee e4       	ldi	r30, 0x4E	; 78
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	8b 7f       	andi	r24, 0xFB	; 251
    2928:	8c 93       	st	X, r24

	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	 SET_BIT(TCCR1B,ICES1);
    292a:	ae e4       	ldi	r26, 0x4E	; 78
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	ee e4       	ldi	r30, 0x4E	; 78
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	80 64       	ori	r24, 0x40	; 64
    2936:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    2938:	ec e4       	ldi	r30, 0x4C	; 76
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	11 82       	std	Z+1, r1	; 0x01
    293e:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    2940:	e6 e4       	ldi	r30, 0x46	; 70
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	11 82       	std	Z+1, r1	; 0x01
    2946:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    2948:	a9 e5       	ldi	r26, 0x59	; 89
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e9 e5       	ldi	r30, 0x59	; 89
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	80 62       	ori	r24, 0x20	; 32
    2954:	8c 93       	st	X, r24
}
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <Timer1Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1Icu_setCallBack(void(*a_ptr)(void))
{
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	00 d0       	rcall	.+0      	; 0x2962 <Timer1Icu_setCallBack+0x6>
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	9a 83       	std	Y+2, r25	; 0x02
    2968:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	Timer1_IcuCallBack = a_ptr;
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	9a 81       	ldd	r25, Y+2	; 0x02
    296e:	90 93 71 01 	sts	0x0171, r25
    2972:	80 93 70 01 	sts	0x0170, r24
}
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	cf 91       	pop	r28
    297c:	df 91       	pop	r29
    297e:	08 95       	ret

00002980 <Timer1Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Timer1Icu_setEdgeDetectionType(u8 Copy_u8EdgeType)
{
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	0f 92       	push	r0
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
    298a:	89 83       	std	Y+1, r24	; 0x01
	   if(Copy_u8EdgeType == RISING_EDGY)
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	41 f4       	brne	.+16     	; 0x29a2 <Timer1Icu_setEdgeDetectionType+0x22>
	   {
		  SET_BIT(TCCR1B,ICES1);
    2992:	ae e4       	ldi	r26, 0x4E	; 78
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	ee e4       	ldi	r30, 0x4E	; 78
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	80 64       	ori	r24, 0x40	; 64
    299e:	8c 93       	st	X, r24
    29a0:	0a c0       	rjmp	.+20     	; 0x29b6 <Timer1Icu_setEdgeDetectionType+0x36>
	   }
	   else if(Copy_u8EdgeType == FALLING_EDGY)
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	88 23       	and	r24, r24
    29a6:	39 f4       	brne	.+14     	; 0x29b6 <Timer1Icu_setEdgeDetectionType+0x36>
	   {
		  CLR_BIT(TCCR1B,ICES1);
    29a8:	ae e4       	ldi	r26, 0x4E	; 78
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	ee e4       	ldi	r30, 0x4E	; 78
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	8f 7b       	andi	r24, 0xBF	; 191
    29b4:	8c 93       	st	X, r24
	   }
}
    29b6:	0f 90       	pop	r0
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <Timer1Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
u16 Timer1Icu_getInputCaptureValue(void)
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
	 return ICR1;
    29c6:	e6 e4       	ldi	r30, 0x46	; 70
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	91 81       	ldd	r25, Z+1	; 0x01
}
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <Timer1Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Timer1Icu_clearTimerValue(void)
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    29dc:	ec e4       	ldi	r30, 0x4C	; 76
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	11 82       	std	Z+1, r1	; 0x01
    29e2:	10 82       	st	Z, r1
}
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <TIMER2_VidInitialize>:



/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
//to check that you don't use OV or COMPARE or FAST_PWM mode
void TIMER2_VidInitialize (void) {
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
	//define pin of timer 2
	DIO_VidSetPinDirection(3,7,1);		// PIND7 as output
    29f2:	83 e0       	ldi	r24, 0x03	; 3
    29f4:	67 e0       	ldi	r22, 0x07	; 7
    29f6:	41 e0       	ldi	r20, 0x01	; 1
    29f8:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(3,7,0);
    29fc:	83 e0       	ldi	r24, 0x03	; 3
    29fe:	67 e0       	ldi	r22, 0x07	; 7
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	SET_BIT(TIMSK,OCIE2);
#endif

#if TIMER2_MODE == FAST_PWM
	// to initialize timer0 on 0 , FOCO = 0
	TCCR2 = 0 ;
    2a06:	e5 e4       	ldi	r30, 0x45	; 69
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	10 82       	st	Z, r1

	// 1 1 Fast PWM
	SET_BIT(TCCR2,WGM20);
    2a0c:	a5 e4       	ldi	r26, 0x45	; 69
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e5 e4       	ldi	r30, 0x45	; 69
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	80 64       	ori	r24, 0x40	; 64
    2a18:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21);
    2a1a:	a5 e4       	ldi	r26, 0x45	; 69
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e5 e4       	ldi	r30, 0x45	; 69
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	88 60       	ori	r24, 0x08	; 8
    2a26:	8c 93       	st	X, r24

	//1 0 Clear OC2 on compare match, set OC0 at TOP ,  NON_INVERED MODE PWM
	SET_BIT(TCCR2,COM21);
    2a28:	a5 e4       	ldi	r26, 0x45	; 69
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	e5 e4       	ldi	r30, 0x45	; 69
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	80 62       	ori	r24, 0x20	; 32
    2a34:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,COM20);
    2a36:	a5 e4       	ldi	r26, 0x45	; 69
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e5 e4       	ldi	r30, 0x45	; 69
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	8f 7e       	andi	r24, 0xEF	; 239
    2a42:	8c 93       	st	X, r24
#if PRE_TYPE_TIMER2 == NO_PRE
	CLR_BIT(TCCR2,CS22);
	CLR_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS20);
#elif PRE_TYPE_TIMER2 == PRE_8
	CLR_BIT(TCCR2,CS22);
    2a44:	a5 e4       	ldi	r26, 0x45	; 69
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e5 e4       	ldi	r30, 0x45	; 69
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	8b 7f       	andi	r24, 0xFB	; 251
    2a50:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS21);
    2a52:	a5 e4       	ldi	r26, 0x45	; 69
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e5 e4       	ldi	r30, 0x45	; 69
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	82 60       	ori	r24, 0x02	; 2
    2a5e:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS20);
    2a60:	a5 e4       	ldi	r26, 0x45	; 69
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e5 e4       	ldi	r30, 0x45	; 69
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	8e 7f       	andi	r24, 0xFE	; 254
    2a6c:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER2 = 8 ;
    2a6e:	88 e0       	ldi	r24, 0x08	; 8
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	90 93 93 01 	sts	0x0193, r25
    2a76:	80 93 92 01 	sts	0x0192, r24
	CLR_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS20);
	PRE_SCALAR_TIMER2 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <TIMER2_Set_Time_S>:

/******************** The part that use to count time  *************************/
//to check that you don't use OV or COMPARE mode
void TIMER2_Set_Time_S (u8 Copy_U8Time){
    2a80:	6f 92       	push	r6
    2a82:	7f 92       	push	r7
    2a84:	8f 92       	push	r8
    2a86:	9f 92       	push	r9
    2a88:	af 92       	push	r10
    2a8a:	bf 92       	push	r11
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	cf 54       	subi	r28, 0x4F	; 79
    2aa2:	d0 40       	sbci	r29, 0x00	; 0
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER2 = (u64)Copy_U8Time*1000 ;                                    //time in ms
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	08 2f       	mov	r16, r24
    2ab4:	10 e0       	ldi	r17, 0x00	; 0
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e0       	ldi	r20, 0x00	; 0
    2abc:	50 e0       	ldi	r21, 0x00	; 0
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
    2ac2:	0a 83       	std	Y+2, r16	; 0x02
    2ac4:	1b 83       	std	Y+3, r17	; 0x03
    2ac6:	2c 83       	std	Y+4, r18	; 0x04
    2ac8:	3d 83       	std	Y+5, r19	; 0x05
    2aca:	4e 83       	std	Y+6, r20	; 0x06
    2acc:	5f 83       	std	Y+7, r21	; 0x07
    2ace:	68 87       	std	Y+8, r22	; 0x08
    2ad0:	79 87       	std	Y+9, r23	; 0x09
    2ad2:	aa 80       	ldd	r10, Y+2	; 0x02
    2ad4:	bb 80       	ldd	r11, Y+3	; 0x03
    2ad6:	cc 80       	ldd	r12, Y+4	; 0x04
    2ad8:	dd 80       	ldd	r13, Y+5	; 0x05
    2ada:	ee 80       	ldd	r14, Y+6	; 0x06
    2adc:	ff 80       	ldd	r15, Y+7	; 0x07
    2ade:	08 85       	ldd	r16, Y+8	; 0x08
    2ae0:	19 85       	ldd	r17, Y+9	; 0x09
    2ae2:	2a 2d       	mov	r18, r10
    2ae4:	3b 2d       	mov	r19, r11
    2ae6:	4c 2d       	mov	r20, r12
    2ae8:	5d 2d       	mov	r21, r13
    2aea:	6e 2d       	mov	r22, r14
    2aec:	7f 2d       	mov	r23, r15
    2aee:	80 2f       	mov	r24, r16
    2af0:	91 2f       	mov	r25, r17
    2af2:	02 e0       	ldi	r16, 0x02	; 2
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2af8:	2a 87       	std	Y+10, r18	; 0x0a
    2afa:	3b 87       	std	Y+11, r19	; 0x0b
    2afc:	4c 87       	std	Y+12, r20	; 0x0c
    2afe:	5d 87       	std	Y+13, r21	; 0x0d
    2b00:	6e 87       	std	Y+14, r22	; 0x0e
    2b02:	7f 87       	std	Y+15, r23	; 0x0f
    2b04:	88 8b       	std	Y+16, r24	; 0x10
    2b06:	99 8b       	std	Y+17, r25	; 0x11
    2b08:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b0a:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b0c:	4c 85       	ldd	r20, Y+12	; 0x0c
    2b0e:	5d 85       	ldd	r21, Y+13	; 0x0d
    2b10:	6e 85       	ldd	r22, Y+14	; 0x0e
    2b12:	7f 85       	ldd	r23, Y+15	; 0x0f
    2b14:	88 89       	ldd	r24, Y+16	; 0x10
    2b16:	99 89       	ldd	r25, Y+17	; 0x11
    2b18:	05 e0       	ldi	r16, 0x05	; 5
    2b1a:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2b1e:	2a 8b       	std	Y+18, r18	; 0x12
    2b20:	3b 8b       	std	Y+19, r19	; 0x13
    2b22:	4c 8b       	std	Y+20, r20	; 0x14
    2b24:	5d 8b       	std	Y+21, r21	; 0x15
    2b26:	6e 8b       	std	Y+22, r22	; 0x16
    2b28:	7f 8b       	std	Y+23, r23	; 0x17
    2b2a:	88 8f       	std	Y+24, r24	; 0x18
    2b2c:	99 8f       	std	Y+25, r25	; 0x19
    2b2e:	1a 89       	ldd	r17, Y+18	; 0x12
    2b30:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b32:	12 1b       	sub	r17, r18
    2b34:	1a 8f       	std	Y+26, r17	; 0x1a
    2b36:	31 e0       	ldi	r19, 0x01	; 1
    2b38:	3a a3       	std	Y+34, r19	; 0x22
    2b3a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2b3c:	5a 89       	ldd	r21, Y+18	; 0x12
    2b3e:	54 17       	cp	r21, r20
    2b40:	08 f0       	brcs	.+2      	; 0x2b44 <TIMER2_Set_Time_S+0xc4>
    2b42:	1a a2       	std	Y+34, r1	; 0x22
    2b44:	6b 89       	ldd	r22, Y+19	; 0x13
    2b46:	7b 85       	ldd	r23, Y+11	; 0x0b
    2b48:	67 1b       	sub	r22, r23
    2b4a:	6b 8f       	std	Y+27, r22	; 0x1b
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	8b a3       	std	Y+35, r24	; 0x23
    2b50:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b52:	eb 89       	ldd	r30, Y+19	; 0x13
    2b54:	e9 17       	cp	r30, r25
    2b56:	08 f0       	brcs	.+2      	; 0x2b5a <TIMER2_Set_Time_S+0xda>
    2b58:	1b a2       	std	Y+35, r1	; 0x23
    2b5a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2b5c:	0a a1       	ldd	r16, Y+34	; 0x22
    2b5e:	f0 1b       	sub	r31, r16
    2b60:	fc a3       	std	Y+36, r31	; 0x24
    2b62:	11 e0       	ldi	r17, 0x01	; 1
    2b64:	1d a3       	std	Y+37, r17	; 0x25
    2b66:	2c a1       	ldd	r18, Y+36	; 0x24
    2b68:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2b6a:	32 17       	cp	r19, r18
    2b6c:	08 f0       	brcs	.+2      	; 0x2b70 <TIMER2_Set_Time_S+0xf0>
    2b6e:	1d a2       	std	Y+37, r1	; 0x25
    2b70:	4b a1       	ldd	r20, Y+35	; 0x23
    2b72:	5d a1       	ldd	r21, Y+37	; 0x25
    2b74:	45 2b       	or	r20, r21
    2b76:	4b a3       	std	Y+35, r20	; 0x23
    2b78:	6c a1       	ldd	r22, Y+36	; 0x24
    2b7a:	6b 8f       	std	Y+27, r22	; 0x1b
    2b7c:	7c 89       	ldd	r23, Y+20	; 0x14
    2b7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b80:	78 1b       	sub	r23, r24
    2b82:	7c 8f       	std	Y+28, r23	; 0x1c
    2b84:	91 e0       	ldi	r25, 0x01	; 1
    2b86:	9e a3       	std	Y+38, r25	; 0x26
    2b88:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2b8a:	fc 89       	ldd	r31, Y+20	; 0x14
    2b8c:	fe 17       	cp	r31, r30
    2b8e:	08 f0       	brcs	.+2      	; 0x2b92 <TIMER2_Set_Time_S+0x112>
    2b90:	1e a2       	std	Y+38, r1	; 0x26
    2b92:	0c 8d       	ldd	r16, Y+28	; 0x1c
    2b94:	1b a1       	ldd	r17, Y+35	; 0x23
    2b96:	01 1b       	sub	r16, r17
    2b98:	0f a3       	std	Y+39, r16	; 0x27
    2b9a:	21 e0       	ldi	r18, 0x01	; 1
    2b9c:	28 a7       	std	Y+40, r18	; 0x28
    2b9e:	3f a1       	ldd	r19, Y+39	; 0x27
    2ba0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2ba2:	43 17       	cp	r20, r19
    2ba4:	08 f0       	brcs	.+2      	; 0x2ba8 <TIMER2_Set_Time_S+0x128>
    2ba6:	18 a6       	std	Y+40, r1	; 0x28
    2ba8:	5e a1       	ldd	r21, Y+38	; 0x26
    2baa:	68 a5       	ldd	r22, Y+40	; 0x28
    2bac:	56 2b       	or	r21, r22
    2bae:	5e a3       	std	Y+38, r21	; 0x26
    2bb0:	7f a1       	ldd	r23, Y+39	; 0x27
    2bb2:	7c 8f       	std	Y+28, r23	; 0x1c
    2bb4:	8d 89       	ldd	r24, Y+21	; 0x15
    2bb6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bb8:	89 1b       	sub	r24, r25
    2bba:	8d 8f       	std	Y+29, r24	; 0x1d
    2bbc:	e1 e0       	ldi	r30, 0x01	; 1
    2bbe:	e9 a7       	std	Y+41, r30	; 0x29
    2bc0:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2bc2:	0d 89       	ldd	r16, Y+21	; 0x15
    2bc4:	0f 17       	cp	r16, r31
    2bc6:	08 f0       	brcs	.+2      	; 0x2bca <TIMER2_Set_Time_S+0x14a>
    2bc8:	19 a6       	std	Y+41, r1	; 0x29
    2bca:	1d 8d       	ldd	r17, Y+29	; 0x1d
    2bcc:	2e a1       	ldd	r18, Y+38	; 0x26
    2bce:	12 1b       	sub	r17, r18
    2bd0:	1a a7       	std	Y+42, r17	; 0x2a
    2bd2:	31 e0       	ldi	r19, 0x01	; 1
    2bd4:	3b a7       	std	Y+43, r19	; 0x2b
    2bd6:	4a a5       	ldd	r20, Y+42	; 0x2a
    2bd8:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2bda:	54 17       	cp	r21, r20
    2bdc:	08 f0       	brcs	.+2      	; 0x2be0 <TIMER2_Set_Time_S+0x160>
    2bde:	1b a6       	std	Y+43, r1	; 0x2b
    2be0:	69 a5       	ldd	r22, Y+41	; 0x29
    2be2:	7b a5       	ldd	r23, Y+43	; 0x2b
    2be4:	67 2b       	or	r22, r23
    2be6:	69 a7       	std	Y+41, r22	; 0x29
    2be8:	8a a5       	ldd	r24, Y+42	; 0x2a
    2bea:	8d 8f       	std	Y+29, r24	; 0x1d
    2bec:	9e 89       	ldd	r25, Y+22	; 0x16
    2bee:	ee 85       	ldd	r30, Y+14	; 0x0e
    2bf0:	9e 1b       	sub	r25, r30
    2bf2:	9e 8f       	std	Y+30, r25	; 0x1e
    2bf4:	f1 e0       	ldi	r31, 0x01	; 1
    2bf6:	fc a7       	std	Y+44, r31	; 0x2c
    2bf8:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2bfa:	1e 89       	ldd	r17, Y+22	; 0x16
    2bfc:	10 17       	cp	r17, r16
    2bfe:	08 f0       	brcs	.+2      	; 0x2c02 <TIMER2_Set_Time_S+0x182>
    2c00:	1c a6       	std	Y+44, r1	; 0x2c
    2c02:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2c04:	39 a5       	ldd	r19, Y+41	; 0x29
    2c06:	23 1b       	sub	r18, r19
    2c08:	2d a7       	std	Y+45, r18	; 0x2d
    2c0a:	41 e0       	ldi	r20, 0x01	; 1
    2c0c:	4e a7       	std	Y+46, r20	; 0x2e
    2c0e:	5d a5       	ldd	r21, Y+45	; 0x2d
    2c10:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2c12:	65 17       	cp	r22, r21
    2c14:	08 f0       	brcs	.+2      	; 0x2c18 <TIMER2_Set_Time_S+0x198>
    2c16:	1e a6       	std	Y+46, r1	; 0x2e
    2c18:	7c a5       	ldd	r23, Y+44	; 0x2c
    2c1a:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c1c:	78 2b       	or	r23, r24
    2c1e:	7c a7       	std	Y+44, r23	; 0x2c
    2c20:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c22:	9e 8f       	std	Y+30, r25	; 0x1e
    2c24:	ef 89       	ldd	r30, Y+23	; 0x17
    2c26:	ff 85       	ldd	r31, Y+15	; 0x0f
    2c28:	ef 1b       	sub	r30, r31
    2c2a:	ef 8f       	std	Y+31, r30	; 0x1f
    2c2c:	01 e0       	ldi	r16, 0x01	; 1
    2c2e:	0f a7       	std	Y+47, r16	; 0x2f
    2c30:	1f 8d       	ldd	r17, Y+31	; 0x1f
    2c32:	2f 89       	ldd	r18, Y+23	; 0x17
    2c34:	21 17       	cp	r18, r17
    2c36:	08 f0       	brcs	.+2      	; 0x2c3a <TIMER2_Set_Time_S+0x1ba>
    2c38:	1f a6       	std	Y+47, r1	; 0x2f
    2c3a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2c3c:	4c a5       	ldd	r20, Y+44	; 0x2c
    2c3e:	34 1b       	sub	r19, r20
    2c40:	38 ab       	std	Y+48, r19	; 0x30
    2c42:	51 e0       	ldi	r21, 0x01	; 1
    2c44:	59 ab       	std	Y+49, r21	; 0x31
    2c46:	68 a9       	ldd	r22, Y+48	; 0x30
    2c48:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2c4a:	76 17       	cp	r23, r22
    2c4c:	08 f0       	brcs	.+2      	; 0x2c50 <TIMER2_Set_Time_S+0x1d0>
    2c4e:	19 aa       	std	Y+49, r1	; 0x31
    2c50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c52:	99 a9       	ldd	r25, Y+49	; 0x31
    2c54:	89 2b       	or	r24, r25
    2c56:	8f a7       	std	Y+47, r24	; 0x2f
    2c58:	e8 a9       	ldd	r30, Y+48	; 0x30
    2c5a:	ef 8f       	std	Y+31, r30	; 0x1f
    2c5c:	f8 8d       	ldd	r31, Y+24	; 0x18
    2c5e:	08 89       	ldd	r16, Y+16	; 0x10
    2c60:	f0 1b       	sub	r31, r16
    2c62:	f8 a3       	std	Y+32, r31	; 0x20
    2c64:	11 e0       	ldi	r17, 0x01	; 1
    2c66:	1a ab       	std	Y+50, r17	; 0x32
    2c68:	28 a1       	ldd	r18, Y+32	; 0x20
    2c6a:	38 8d       	ldd	r19, Y+24	; 0x18
    2c6c:	32 17       	cp	r19, r18
    2c6e:	08 f0       	brcs	.+2      	; 0x2c72 <TIMER2_Set_Time_S+0x1f2>
    2c70:	1a aa       	std	Y+50, r1	; 0x32
    2c72:	48 a1       	ldd	r20, Y+32	; 0x20
    2c74:	5f a5       	ldd	r21, Y+47	; 0x2f
    2c76:	45 1b       	sub	r20, r21
    2c78:	4b ab       	std	Y+51, r20	; 0x33
    2c7a:	61 e0       	ldi	r22, 0x01	; 1
    2c7c:	6c ab       	std	Y+52, r22	; 0x34
    2c7e:	7b a9       	ldd	r23, Y+51	; 0x33
    2c80:	88 a1       	ldd	r24, Y+32	; 0x20
    2c82:	87 17       	cp	r24, r23
    2c84:	08 f0       	brcs	.+2      	; 0x2c88 <TIMER2_Set_Time_S+0x208>
    2c86:	1c aa       	std	Y+52, r1	; 0x34
    2c88:	9a a9       	ldd	r25, Y+50	; 0x32
    2c8a:	ec a9       	ldd	r30, Y+52	; 0x34
    2c8c:	9e 2b       	or	r25, r30
    2c8e:	9a ab       	std	Y+50, r25	; 0x32
    2c90:	fb a9       	ldd	r31, Y+51	; 0x33
    2c92:	f8 a3       	std	Y+32, r31	; 0x20
    2c94:	09 8d       	ldd	r16, Y+25	; 0x19
    2c96:	19 89       	ldd	r17, Y+17	; 0x11
    2c98:	01 1b       	sub	r16, r17
    2c9a:	09 a3       	std	Y+33, r16	; 0x21
    2c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c9e:	2a a9       	ldd	r18, Y+50	; 0x32
    2ca0:	82 1b       	sub	r24, r18
    2ca2:	89 a3       	std	Y+33, r24	; 0x21
    2ca4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2ca6:	3a 8b       	std	Y+18, r19	; 0x12
    2ca8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2caa:	4b 8b       	std	Y+19, r20	; 0x13
    2cac:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2cae:	5c 8b       	std	Y+20, r21	; 0x14
    2cb0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2cb2:	6d 8b       	std	Y+21, r22	; 0x15
    2cb4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2cb6:	7e 8b       	std	Y+22, r23	; 0x16
    2cb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cba:	8f 8b       	std	Y+23, r24	; 0x17
    2cbc:	98 a1       	ldd	r25, Y+32	; 0x20
    2cbe:	98 8f       	std	Y+24, r25	; 0x18
    2cc0:	e9 a1       	ldd	r30, Y+33	; 0x21
    2cc2:	e9 8f       	std	Y+25, r30	; 0x19
    2cc4:	fa 89       	ldd	r31, Y+18	; 0x12
    2cc6:	0a 81       	ldd	r16, Y+2	; 0x02
    2cc8:	f0 0f       	add	r31, r16
    2cca:	fd ab       	std	Y+53, r31	; 0x35
    2ccc:	11 e0       	ldi	r17, 0x01	; 1
    2cce:	1d af       	std	Y+61, r17	; 0x3d
    2cd0:	2d a9       	ldd	r18, Y+53	; 0x35
    2cd2:	3a 89       	ldd	r19, Y+18	; 0x12
    2cd4:	23 17       	cp	r18, r19
    2cd6:	08 f0       	brcs	.+2      	; 0x2cda <TIMER2_Set_Time_S+0x25a>
    2cd8:	1d ae       	std	Y+61, r1	; 0x3d
    2cda:	4b 89       	ldd	r20, Y+19	; 0x13
    2cdc:	5b 81       	ldd	r21, Y+3	; 0x03
    2cde:	45 0f       	add	r20, r21
    2ce0:	4e ab       	std	Y+54, r20	; 0x36
    2ce2:	61 e0       	ldi	r22, 0x01	; 1
    2ce4:	6e af       	std	Y+62, r22	; 0x3e
    2ce6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cea:	78 17       	cp	r23, r24
    2cec:	08 f0       	brcs	.+2      	; 0x2cf0 <TIMER2_Set_Time_S+0x270>
    2cee:	1e ae       	std	Y+62, r1	; 0x3e
    2cf0:	9d ad       	ldd	r25, Y+61	; 0x3d
    2cf2:	ee a9       	ldd	r30, Y+54	; 0x36
    2cf4:	9e 0f       	add	r25, r30
    2cf6:	9f af       	std	Y+63, r25	; 0x3f
    2cf8:	f1 e0       	ldi	r31, 0x01	; 1
    2cfa:	21 96       	adiw	r28, 0x01	; 1
    2cfc:	ff af       	std	Y+63, r31	; 0x3f
    2cfe:	21 97       	sbiw	r28, 0x01	; 1
    2d00:	0f ad       	ldd	r16, Y+63	; 0x3f
    2d02:	1e a9       	ldd	r17, Y+54	; 0x36
    2d04:	01 17       	cp	r16, r17
    2d06:	18 f0       	brcs	.+6      	; 0x2d0e <TIMER2_Set_Time_S+0x28e>
    2d08:	21 96       	adiw	r28, 0x01	; 1
    2d0a:	1f ae       	std	Y+63, r1	; 0x3f
    2d0c:	21 97       	sbiw	r28, 0x01	; 1
    2d0e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2d10:	21 96       	adiw	r28, 0x01	; 1
    2d12:	3f ad       	ldd	r19, Y+63	; 0x3f
    2d14:	21 97       	sbiw	r28, 0x01	; 1
    2d16:	23 2b       	or	r18, r19
    2d18:	2e af       	std	Y+62, r18	; 0x3e
    2d1a:	4f ad       	ldd	r20, Y+63	; 0x3f
    2d1c:	4e ab       	std	Y+54, r20	; 0x36
    2d1e:	5c 89       	ldd	r21, Y+20	; 0x14
    2d20:	6c 81       	ldd	r22, Y+4	; 0x04
    2d22:	56 0f       	add	r21, r22
    2d24:	5f ab       	std	Y+55, r21	; 0x37
    2d26:	71 e0       	ldi	r23, 0x01	; 1
    2d28:	22 96       	adiw	r28, 0x02	; 2
    2d2a:	7f af       	std	Y+63, r23	; 0x3f
    2d2c:	22 97       	sbiw	r28, 0x02	; 2
    2d2e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d30:	9c 89       	ldd	r25, Y+20	; 0x14
    2d32:	89 17       	cp	r24, r25
    2d34:	18 f0       	brcs	.+6      	; 0x2d3c <TIMER2_Set_Time_S+0x2bc>
    2d36:	22 96       	adiw	r28, 0x02	; 2
    2d38:	1f ae       	std	Y+63, r1	; 0x3f
    2d3a:	22 97       	sbiw	r28, 0x02	; 2
    2d3c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d3e:	ff a9       	ldd	r31, Y+55	; 0x37
    2d40:	ef 0f       	add	r30, r31
    2d42:	23 96       	adiw	r28, 0x03	; 3
    2d44:	ef af       	std	Y+63, r30	; 0x3f
    2d46:	23 97       	sbiw	r28, 0x03	; 3
    2d48:	01 e0       	ldi	r16, 0x01	; 1
    2d4a:	24 96       	adiw	r28, 0x04	; 4
    2d4c:	0f af       	std	Y+63, r16	; 0x3f
    2d4e:	24 97       	sbiw	r28, 0x04	; 4
    2d50:	23 96       	adiw	r28, 0x03	; 3
    2d52:	1f ad       	ldd	r17, Y+63	; 0x3f
    2d54:	23 97       	sbiw	r28, 0x03	; 3
    2d56:	2f a9       	ldd	r18, Y+55	; 0x37
    2d58:	12 17       	cp	r17, r18
    2d5a:	18 f0       	brcs	.+6      	; 0x2d62 <TIMER2_Set_Time_S+0x2e2>
    2d5c:	24 96       	adiw	r28, 0x04	; 4
    2d5e:	1f ae       	std	Y+63, r1	; 0x3f
    2d60:	24 97       	sbiw	r28, 0x04	; 4
    2d62:	22 96       	adiw	r28, 0x02	; 2
    2d64:	3f ad       	ldd	r19, Y+63	; 0x3f
    2d66:	22 97       	sbiw	r28, 0x02	; 2
    2d68:	24 96       	adiw	r28, 0x04	; 4
    2d6a:	4f ad       	ldd	r20, Y+63	; 0x3f
    2d6c:	24 97       	sbiw	r28, 0x04	; 4
    2d6e:	34 2b       	or	r19, r20
    2d70:	22 96       	adiw	r28, 0x02	; 2
    2d72:	3f af       	std	Y+63, r19	; 0x3f
    2d74:	22 97       	sbiw	r28, 0x02	; 2
    2d76:	23 96       	adiw	r28, 0x03	; 3
    2d78:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d7a:	23 97       	sbiw	r28, 0x03	; 3
    2d7c:	5f ab       	std	Y+55, r21	; 0x37
    2d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d80:	7d 81       	ldd	r23, Y+5	; 0x05
    2d82:	67 0f       	add	r22, r23
    2d84:	68 af       	std	Y+56, r22	; 0x38
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	25 96       	adiw	r28, 0x05	; 5
    2d8a:	8f af       	std	Y+63, r24	; 0x3f
    2d8c:	25 97       	sbiw	r28, 0x05	; 5
    2d8e:	98 ad       	ldd	r25, Y+56	; 0x38
    2d90:	ed 89       	ldd	r30, Y+21	; 0x15
    2d92:	9e 17       	cp	r25, r30
    2d94:	18 f0       	brcs	.+6      	; 0x2d9c <TIMER2_Set_Time_S+0x31c>
    2d96:	25 96       	adiw	r28, 0x05	; 5
    2d98:	1f ae       	std	Y+63, r1	; 0x3f
    2d9a:	25 97       	sbiw	r28, 0x05	; 5
    2d9c:	22 96       	adiw	r28, 0x02	; 2
    2d9e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2da0:	22 97       	sbiw	r28, 0x02	; 2
    2da2:	08 ad       	ldd	r16, Y+56	; 0x38
    2da4:	f0 0f       	add	r31, r16
    2da6:	26 96       	adiw	r28, 0x06	; 6
    2da8:	ff af       	std	Y+63, r31	; 0x3f
    2daa:	26 97       	sbiw	r28, 0x06	; 6
    2dac:	11 e0       	ldi	r17, 0x01	; 1
    2dae:	27 96       	adiw	r28, 0x07	; 7
    2db0:	1f af       	std	Y+63, r17	; 0x3f
    2db2:	27 97       	sbiw	r28, 0x07	; 7
    2db4:	26 96       	adiw	r28, 0x06	; 6
    2db6:	2f ad       	ldd	r18, Y+63	; 0x3f
    2db8:	26 97       	sbiw	r28, 0x06	; 6
    2dba:	38 ad       	ldd	r19, Y+56	; 0x38
    2dbc:	23 17       	cp	r18, r19
    2dbe:	18 f0       	brcs	.+6      	; 0x2dc6 <TIMER2_Set_Time_S+0x346>
    2dc0:	27 96       	adiw	r28, 0x07	; 7
    2dc2:	1f ae       	std	Y+63, r1	; 0x3f
    2dc4:	27 97       	sbiw	r28, 0x07	; 7
    2dc6:	25 96       	adiw	r28, 0x05	; 5
    2dc8:	4f ad       	ldd	r20, Y+63	; 0x3f
    2dca:	25 97       	sbiw	r28, 0x05	; 5
    2dcc:	27 96       	adiw	r28, 0x07	; 7
    2dce:	5f ad       	ldd	r21, Y+63	; 0x3f
    2dd0:	27 97       	sbiw	r28, 0x07	; 7
    2dd2:	45 2b       	or	r20, r21
    2dd4:	25 96       	adiw	r28, 0x05	; 5
    2dd6:	4f af       	std	Y+63, r20	; 0x3f
    2dd8:	25 97       	sbiw	r28, 0x05	; 5
    2dda:	26 96       	adiw	r28, 0x06	; 6
    2ddc:	6f ad       	ldd	r22, Y+63	; 0x3f
    2dde:	26 97       	sbiw	r28, 0x06	; 6
    2de0:	68 af       	std	Y+56, r22	; 0x38
    2de2:	7e 89       	ldd	r23, Y+22	; 0x16
    2de4:	8e 81       	ldd	r24, Y+6	; 0x06
    2de6:	78 0f       	add	r23, r24
    2de8:	79 af       	std	Y+57, r23	; 0x39
    2dea:	91 e0       	ldi	r25, 0x01	; 1
    2dec:	28 96       	adiw	r28, 0x08	; 8
    2dee:	9f af       	std	Y+63, r25	; 0x3f
    2df0:	28 97       	sbiw	r28, 0x08	; 8
    2df2:	e9 ad       	ldd	r30, Y+57	; 0x39
    2df4:	fe 89       	ldd	r31, Y+22	; 0x16
    2df6:	ef 17       	cp	r30, r31
    2df8:	18 f0       	brcs	.+6      	; 0x2e00 <TIMER2_Set_Time_S+0x380>
    2dfa:	28 96       	adiw	r28, 0x08	; 8
    2dfc:	1f ae       	std	Y+63, r1	; 0x3f
    2dfe:	28 97       	sbiw	r28, 0x08	; 8
    2e00:	25 96       	adiw	r28, 0x05	; 5
    2e02:	0f ad       	ldd	r16, Y+63	; 0x3f
    2e04:	25 97       	sbiw	r28, 0x05	; 5
    2e06:	19 ad       	ldd	r17, Y+57	; 0x39
    2e08:	01 0f       	add	r16, r17
    2e0a:	29 96       	adiw	r28, 0x09	; 9
    2e0c:	0f af       	std	Y+63, r16	; 0x3f
    2e0e:	29 97       	sbiw	r28, 0x09	; 9
    2e10:	21 e0       	ldi	r18, 0x01	; 1
    2e12:	2a 96       	adiw	r28, 0x0a	; 10
    2e14:	2f af       	std	Y+63, r18	; 0x3f
    2e16:	2a 97       	sbiw	r28, 0x0a	; 10
    2e18:	29 96       	adiw	r28, 0x09	; 9
    2e1a:	3f ad       	ldd	r19, Y+63	; 0x3f
    2e1c:	29 97       	sbiw	r28, 0x09	; 9
    2e1e:	49 ad       	ldd	r20, Y+57	; 0x39
    2e20:	34 17       	cp	r19, r20
    2e22:	18 f0       	brcs	.+6      	; 0x2e2a <TIMER2_Set_Time_S+0x3aa>
    2e24:	2a 96       	adiw	r28, 0x0a	; 10
    2e26:	1f ae       	std	Y+63, r1	; 0x3f
    2e28:	2a 97       	sbiw	r28, 0x0a	; 10
    2e2a:	28 96       	adiw	r28, 0x08	; 8
    2e2c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e2e:	28 97       	sbiw	r28, 0x08	; 8
    2e30:	2a 96       	adiw	r28, 0x0a	; 10
    2e32:	6f ad       	ldd	r22, Y+63	; 0x3f
    2e34:	2a 97       	sbiw	r28, 0x0a	; 10
    2e36:	56 2b       	or	r21, r22
    2e38:	28 96       	adiw	r28, 0x08	; 8
    2e3a:	5f af       	std	Y+63, r21	; 0x3f
    2e3c:	28 97       	sbiw	r28, 0x08	; 8
    2e3e:	29 96       	adiw	r28, 0x09	; 9
    2e40:	7f ad       	ldd	r23, Y+63	; 0x3f
    2e42:	29 97       	sbiw	r28, 0x09	; 9
    2e44:	79 af       	std	Y+57, r23	; 0x39
    2e46:	8f 89       	ldd	r24, Y+23	; 0x17
    2e48:	9f 81       	ldd	r25, Y+7	; 0x07
    2e4a:	89 0f       	add	r24, r25
    2e4c:	8a af       	std	Y+58, r24	; 0x3a
    2e4e:	e1 e0       	ldi	r30, 0x01	; 1
    2e50:	2b 96       	adiw	r28, 0x0b	; 11
    2e52:	ef af       	std	Y+63, r30	; 0x3f
    2e54:	2b 97       	sbiw	r28, 0x0b	; 11
    2e56:	fa ad       	ldd	r31, Y+58	; 0x3a
    2e58:	0f 89       	ldd	r16, Y+23	; 0x17
    2e5a:	f0 17       	cp	r31, r16
    2e5c:	18 f0       	brcs	.+6      	; 0x2e64 <TIMER2_Set_Time_S+0x3e4>
    2e5e:	2b 96       	adiw	r28, 0x0b	; 11
    2e60:	1f ae       	std	Y+63, r1	; 0x3f
    2e62:	2b 97       	sbiw	r28, 0x0b	; 11
    2e64:	28 96       	adiw	r28, 0x08	; 8
    2e66:	1f ad       	ldd	r17, Y+63	; 0x3f
    2e68:	28 97       	sbiw	r28, 0x08	; 8
    2e6a:	2a ad       	ldd	r18, Y+58	; 0x3a
    2e6c:	12 0f       	add	r17, r18
    2e6e:	2c 96       	adiw	r28, 0x0c	; 12
    2e70:	1f af       	std	Y+63, r17	; 0x3f
    2e72:	2c 97       	sbiw	r28, 0x0c	; 12
    2e74:	31 e0       	ldi	r19, 0x01	; 1
    2e76:	2d 96       	adiw	r28, 0x0d	; 13
    2e78:	3f af       	std	Y+63, r19	; 0x3f
    2e7a:	2d 97       	sbiw	r28, 0x0d	; 13
    2e7c:	2c 96       	adiw	r28, 0x0c	; 12
    2e7e:	4f ad       	ldd	r20, Y+63	; 0x3f
    2e80:	2c 97       	sbiw	r28, 0x0c	; 12
    2e82:	5a ad       	ldd	r21, Y+58	; 0x3a
    2e84:	45 17       	cp	r20, r21
    2e86:	18 f0       	brcs	.+6      	; 0x2e8e <TIMER2_Set_Time_S+0x40e>
    2e88:	2d 96       	adiw	r28, 0x0d	; 13
    2e8a:	1f ae       	std	Y+63, r1	; 0x3f
    2e8c:	2d 97       	sbiw	r28, 0x0d	; 13
    2e8e:	2b 96       	adiw	r28, 0x0b	; 11
    2e90:	6f ad       	ldd	r22, Y+63	; 0x3f
    2e92:	2b 97       	sbiw	r28, 0x0b	; 11
    2e94:	2d 96       	adiw	r28, 0x0d	; 13
    2e96:	7f ad       	ldd	r23, Y+63	; 0x3f
    2e98:	2d 97       	sbiw	r28, 0x0d	; 13
    2e9a:	67 2b       	or	r22, r23
    2e9c:	2b 96       	adiw	r28, 0x0b	; 11
    2e9e:	6f af       	std	Y+63, r22	; 0x3f
    2ea0:	2b 97       	sbiw	r28, 0x0b	; 11
    2ea2:	2c 96       	adiw	r28, 0x0c	; 12
    2ea4:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ea6:	2c 97       	sbiw	r28, 0x0c	; 12
    2ea8:	8a af       	std	Y+58, r24	; 0x3a
    2eaa:	98 8d       	ldd	r25, Y+24	; 0x18
    2eac:	e8 85       	ldd	r30, Y+8	; 0x08
    2eae:	9e 0f       	add	r25, r30
    2eb0:	9b af       	std	Y+59, r25	; 0x3b
    2eb2:	f1 e0       	ldi	r31, 0x01	; 1
    2eb4:	2e 96       	adiw	r28, 0x0e	; 14
    2eb6:	ff af       	std	Y+63, r31	; 0x3f
    2eb8:	2e 97       	sbiw	r28, 0x0e	; 14
    2eba:	0b ad       	ldd	r16, Y+59	; 0x3b
    2ebc:	18 8d       	ldd	r17, Y+24	; 0x18
    2ebe:	01 17       	cp	r16, r17
    2ec0:	18 f0       	brcs	.+6      	; 0x2ec8 <TIMER2_Set_Time_S+0x448>
    2ec2:	2e 96       	adiw	r28, 0x0e	; 14
    2ec4:	1f ae       	std	Y+63, r1	; 0x3f
    2ec6:	2e 97       	sbiw	r28, 0x0e	; 14
    2ec8:	2b 96       	adiw	r28, 0x0b	; 11
    2eca:	2f ad       	ldd	r18, Y+63	; 0x3f
    2ecc:	2b 97       	sbiw	r28, 0x0b	; 11
    2ece:	3b ad       	ldd	r19, Y+59	; 0x3b
    2ed0:	23 0f       	add	r18, r19
    2ed2:	2f 96       	adiw	r28, 0x0f	; 15
    2ed4:	2f af       	std	Y+63, r18	; 0x3f
    2ed6:	2f 97       	sbiw	r28, 0x0f	; 15
    2ed8:	41 e0       	ldi	r20, 0x01	; 1
    2eda:	60 96       	adiw	r28, 0x10	; 16
    2edc:	4f af       	std	Y+63, r20	; 0x3f
    2ede:	60 97       	sbiw	r28, 0x10	; 16
    2ee0:	2f 96       	adiw	r28, 0x0f	; 15
    2ee2:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ee4:	2f 97       	sbiw	r28, 0x0f	; 15
    2ee6:	6b ad       	ldd	r22, Y+59	; 0x3b
    2ee8:	56 17       	cp	r21, r22
    2eea:	18 f0       	brcs	.+6      	; 0x2ef2 <TIMER2_Set_Time_S+0x472>
    2eec:	60 96       	adiw	r28, 0x10	; 16
    2eee:	1f ae       	std	Y+63, r1	; 0x3f
    2ef0:	60 97       	sbiw	r28, 0x10	; 16
    2ef2:	2e 96       	adiw	r28, 0x0e	; 14
    2ef4:	7f ad       	ldd	r23, Y+63	; 0x3f
    2ef6:	2e 97       	sbiw	r28, 0x0e	; 14
    2ef8:	60 96       	adiw	r28, 0x10	; 16
    2efa:	8f ad       	ldd	r24, Y+63	; 0x3f
    2efc:	60 97       	sbiw	r28, 0x10	; 16
    2efe:	78 2b       	or	r23, r24
    2f00:	2e 96       	adiw	r28, 0x0e	; 14
    2f02:	7f af       	std	Y+63, r23	; 0x3f
    2f04:	2e 97       	sbiw	r28, 0x0e	; 14
    2f06:	2f 96       	adiw	r28, 0x0f	; 15
    2f08:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f0a:	2f 97       	sbiw	r28, 0x0f	; 15
    2f0c:	9b af       	std	Y+59, r25	; 0x3b
    2f0e:	e9 8d       	ldd	r30, Y+25	; 0x19
    2f10:	f9 85       	ldd	r31, Y+9	; 0x09
    2f12:	ef 0f       	add	r30, r31
    2f14:	ec af       	std	Y+60, r30	; 0x3c
    2f16:	2e 96       	adiw	r28, 0x0e	; 14
    2f18:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f1a:	2e 97       	sbiw	r28, 0x0e	; 14
    2f1c:	0c ad       	ldd	r16, Y+60	; 0x3c
    2f1e:	80 0f       	add	r24, r16
    2f20:	8c af       	std	Y+60, r24	; 0x3c
    2f22:	1d a9       	ldd	r17, Y+53	; 0x35
    2f24:	1a 8b       	std	Y+18, r17	; 0x12
    2f26:	2e a9       	ldd	r18, Y+54	; 0x36
    2f28:	2b 8b       	std	Y+19, r18	; 0x13
    2f2a:	3f a9       	ldd	r19, Y+55	; 0x37
    2f2c:	3c 8b       	std	Y+20, r19	; 0x14
    2f2e:	48 ad       	ldd	r20, Y+56	; 0x38
    2f30:	4d 8b       	std	Y+21, r20	; 0x15
    2f32:	59 ad       	ldd	r21, Y+57	; 0x39
    2f34:	5e 8b       	std	Y+22, r21	; 0x16
    2f36:	6a ad       	ldd	r22, Y+58	; 0x3a
    2f38:	6f 8b       	std	Y+23, r22	; 0x17
    2f3a:	7b ad       	ldd	r23, Y+59	; 0x3b
    2f3c:	78 8f       	std	Y+24, r23	; 0x18
    2f3e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2f40:	89 8f       	std	Y+25, r24	; 0x19
    2f42:	2a 89       	ldd	r18, Y+18	; 0x12
    2f44:	3b 89       	ldd	r19, Y+19	; 0x13
    2f46:	4c 89       	ldd	r20, Y+20	; 0x14
    2f48:	5d 89       	ldd	r21, Y+21	; 0x15
    2f4a:	6e 89       	ldd	r22, Y+22	; 0x16
    2f4c:	7f 89       	ldd	r23, Y+23	; 0x17
    2f4e:	88 8d       	ldd	r24, Y+24	; 0x18
    2f50:	99 8d       	ldd	r25, Y+25	; 0x19
    2f52:	03 e0       	ldi	r16, 0x03	; 3
    2f54:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2f58:	a2 2e       	mov	r10, r18
    2f5a:	b3 2e       	mov	r11, r19
    2f5c:	c4 2e       	mov	r12, r20
    2f5e:	d5 2e       	mov	r13, r21
    2f60:	e6 2e       	mov	r14, r22
    2f62:	f7 2e       	mov	r15, r23
    2f64:	08 2f       	mov	r16, r24
    2f66:	19 2f       	mov	r17, r25
    2f68:	2a 2d       	mov	r18, r10
    2f6a:	3b 2d       	mov	r19, r11
    2f6c:	4c 2d       	mov	r20, r12
    2f6e:	5d 2d       	mov	r21, r13
    2f70:	6e 2d       	mov	r22, r14
    2f72:	7f 2d       	mov	r23, r15
    2f74:	80 2f       	mov	r24, r16
    2f76:	91 2f       	mov	r25, r17
    2f78:	20 93 8a 01 	sts	0x018A, r18
    2f7c:	30 93 8b 01 	sts	0x018B, r19
    2f80:	40 93 8c 01 	sts	0x018C, r20
    2f84:	50 93 8d 01 	sts	0x018D, r21
    2f88:	60 93 8e 01 	sts	0x018E, r22
    2f8c:	70 93 8f 01 	sts	0x018F, r23
    2f90:	80 93 90 01 	sts	0x0190, r24
    2f94:	90 93 91 01 	sts	0x0191, r25
    T_OV_TIMER2 = (256*(f32)PRE_SCALAR_TIMER2)/8000 ;                                //time in ms
    2f98:	80 91 92 01 	lds	r24, 0x0192
    2f9c:	90 91 93 01 	lds	r25, 0x0193
    2fa0:	cc 01       	movw	r24, r24
    2fa2:	a0 e0       	ldi	r26, 0x00	; 0
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e8       	ldi	r20, 0x80	; 128
    2fbc:	53 e4       	ldi	r21, 0x43	; 67
    2fbe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	4a ef       	ldi	r20, 0xFA	; 250
    2fd0:	55 e4       	ldi	r21, 0x45	; 69
    2fd2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	80 93 94 01 	sts	0x0194, r24
    2fde:	90 93 95 01 	sts	0x0195, r25
    2fe2:	a0 93 96 01 	sts	0x0196, r26
    2fe6:	b0 93 97 01 	sts	0x0197, r27
	NUM_OV_TIMER2 = DESIRED_TIME_TIMER2 / T_OV_TIMER2 ;                              //number of overflow wanted in entered if
    2fea:	a0 90 8a 01 	lds	r10, 0x018A
    2fee:	b0 90 8b 01 	lds	r11, 0x018B
    2ff2:	c0 90 8c 01 	lds	r12, 0x018C
    2ff6:	d0 90 8d 01 	lds	r13, 0x018D
    2ffa:	e0 90 8e 01 	lds	r14, 0x018E
    2ffe:	f0 90 8f 01 	lds	r15, 0x018F
    3002:	00 91 90 01 	lds	r16, 0x0190
    3006:	10 91 91 01 	lds	r17, 0x0191
    300a:	2a 2d       	mov	r18, r10
    300c:	3b 2d       	mov	r19, r11
    300e:	4c 2d       	mov	r20, r12
    3010:	5d 2d       	mov	r21, r13
    3012:	6e 2d       	mov	r22, r14
    3014:	7f 2d       	mov	r23, r15
    3016:	80 2f       	mov	r24, r16
    3018:	91 2f       	mov	r25, r17
    301a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	20 91 94 01 	lds	r18, 0x0194
    3026:	30 91 95 01 	lds	r19, 0x0195
    302a:	40 91 96 01 	lds	r20, 0x0196
    302e:	50 91 97 01 	lds	r21, 0x0197
    3032:	bc 01       	movw	r22, r24
    3034:	cd 01       	movw	r24, r26
    3036:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	80 93 98 01 	sts	0x0198, r24
    3042:	90 93 99 01 	sts	0x0199, r25
    3046:	a0 93 9a 01 	sts	0x019A, r26
    304a:	b0 93 9b 01 	sts	0x019B, r27
	PRE_LOAD_TIMER2  = NUM_OV_TIMER2 -( (u32)(DESIRED_TIME_TIMER2 /T_OV_TIMER2) );   //the value which should be in TCNT to make time more accurate
    304e:	60 90 98 01 	lds	r6, 0x0198
    3052:	70 90 99 01 	lds	r7, 0x0199
    3056:	80 90 9a 01 	lds	r8, 0x019A
    305a:	90 90 9b 01 	lds	r9, 0x019B
    305e:	a0 90 8a 01 	lds	r10, 0x018A
    3062:	b0 90 8b 01 	lds	r11, 0x018B
    3066:	c0 90 8c 01 	lds	r12, 0x018C
    306a:	d0 90 8d 01 	lds	r13, 0x018D
    306e:	e0 90 8e 01 	lds	r14, 0x018E
    3072:	f0 90 8f 01 	lds	r15, 0x018F
    3076:	00 91 90 01 	lds	r16, 0x0190
    307a:	10 91 91 01 	lds	r17, 0x0191
    307e:	2a 2d       	mov	r18, r10
    3080:	3b 2d       	mov	r19, r11
    3082:	4c 2d       	mov	r20, r12
    3084:	5d 2d       	mov	r21, r13
    3086:	6e 2d       	mov	r22, r14
    3088:	7f 2d       	mov	r23, r15
    308a:	80 2f       	mov	r24, r16
    308c:	91 2f       	mov	r25, r17
    308e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	20 91 94 01 	lds	r18, 0x0194
    309a:	30 91 95 01 	lds	r19, 0x0195
    309e:	40 91 96 01 	lds	r20, 0x0196
    30a2:	50 91 97 01 	lds	r21, 0x0197
    30a6:	bc 01       	movw	r22, r24
    30a8:	cd 01       	movw	r24, r26
    30aa:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	bc 01       	movw	r22, r24
    30b4:	cd 01       	movw	r24, r26
    30b6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	cc 01       	movw	r24, r24
    30c0:	a0 e0       	ldi	r26, 0x00	; 0
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	bc 01       	movw	r22, r24
    30c6:	cd 01       	movw	r24, r26
    30c8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    30cc:	9b 01       	movw	r18, r22
    30ce:	ac 01       	movw	r20, r24
    30d0:	c4 01       	movw	r24, r8
    30d2:	b3 01       	movw	r22, r6
    30d4:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	80 93 9c 01 	sts	0x019C, r24
    30e0:	90 93 9d 01 	sts	0x019D, r25
    30e4:	a0 93 9e 01 	sts	0x019E, r26
    30e8:	b0 93 9f 01 	sts	0x019F, r27
	if ( NUM_OV_TIMER2 > (u32)NUM_OV_TIMER2 ){
    30ec:	80 91 98 01 	lds	r24, 0x0198
    30f0:	90 91 99 01 	lds	r25, 0x0199
    30f4:	a0 91 9a 01 	lds	r26, 0x019A
    30f8:	b0 91 9b 01 	lds	r27, 0x019B
    30fc:	bc 01       	movw	r22, r24
    30fe:	cd 01       	movw	r24, r26
    3100:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	cc 01       	movw	r24, r24
    310a:	a0 e0       	ldi	r26, 0x00	; 0
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	bc 01       	movw	r22, r24
    3110:	cd 01       	movw	r24, r26
    3112:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	20 91 98 01 	lds	r18, 0x0198
    311e:	30 91 99 01 	lds	r19, 0x0199
    3122:	40 91 9a 01 	lds	r20, 0x019A
    3126:	50 91 9b 01 	lds	r21, 0x019B
    312a:	bc 01       	movw	r22, r24
    312c:	cd 01       	movw	r24, r26
    312e:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    3132:	88 23       	and	r24, r24
    3134:	d4 f4       	brge	.+52     	; 0x316a <TIMER2_Set_Time_S+0x6ea>
		NUM_OV_TIMER2++;
    3136:	80 91 98 01 	lds	r24, 0x0198
    313a:	90 91 99 01 	lds	r25, 0x0199
    313e:	a0 91 9a 01 	lds	r26, 0x019A
    3142:	b0 91 9b 01 	lds	r27, 0x019B
    3146:	bc 01       	movw	r22, r24
    3148:	cd 01       	movw	r24, r26
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e8       	ldi	r20, 0x80	; 128
    3150:	5f e3       	ldi	r21, 0x3F	; 63
    3152:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	80 93 98 01 	sts	0x0198, r24
    315e:	90 93 99 01 	sts	0x0199, r25
    3162:	a0 93 9a 01 	sts	0x019A, r26
    3166:	b0 93 9b 01 	sts	0x019B, r27
	}//end if

	//to begin from specific value
	TCNT2 = 256-(256*PRE_LOAD_TIMER2 );
    316a:	04 e4       	ldi	r16, 0x44	; 68
    316c:	10 e0       	ldi	r17, 0x00	; 0
    316e:	80 91 9c 01 	lds	r24, 0x019C
    3172:	90 91 9d 01 	lds	r25, 0x019D
    3176:	a0 91 9e 01 	lds	r26, 0x019E
    317a:	b0 91 9f 01 	lds	r27, 0x019F
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e8       	ldi	r20, 0x80	; 128
    3188:	53 ec       	ldi	r21, 0xC3	; 195
    318a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e8       	ldi	r20, 0x80	; 128
    319c:	53 e4       	ldi	r21, 0x43	; 67
    319e:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	bc 01       	movw	r22, r24
    31a8:	cd 01       	movw	r24, r26
    31aa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	f8 01       	movw	r30, r16
    31b4:	80 83       	st	Z, r24
}
    31b6:	c1 5b       	subi	r28, 0xB1	; 177
    31b8:	df 4f       	sbci	r29, 0xFF	; 255
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	ff 90       	pop	r15
    31ce:	ef 90       	pop	r14
    31d0:	df 90       	pop	r13
    31d2:	cf 90       	pop	r12
    31d4:	bf 90       	pop	r11
    31d6:	af 90       	pop	r10
    31d8:	9f 90       	pop	r9
    31da:	8f 90       	pop	r8
    31dc:	7f 90       	pop	r7
    31de:	6f 90       	pop	r6
    31e0:	08 95       	ret

000031e2 <TIMER2_Set_Time_mS>:

void TIMER2_Set_Time_mS (u16 Copy_U8Time){
    31e2:	6f 92       	push	r6
    31e4:	7f 92       	push	r7
    31e6:	8f 92       	push	r8
    31e8:	9f 92       	push	r9
    31ea:	af 92       	push	r10
    31ec:	bf 92       	push	r11
    31ee:	cf 92       	push	r12
    31f0:	df 92       	push	r13
    31f2:	ef 92       	push	r14
    31f4:	ff 92       	push	r15
    31f6:	0f 93       	push	r16
    31f8:	1f 93       	push	r17
    31fa:	df 93       	push	r29
    31fc:	cf 93       	push	r28
    31fe:	00 d0       	rcall	.+0      	; 0x3200 <TIMER2_Set_Time_mS+0x1e>
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	9a 83       	std	Y+2, r25	; 0x02
    3206:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER2 = Copy_U8Time ;                         //time in ms
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	9a 81       	ldd	r25, Y+2	; 0x02
    320c:	9c 01       	movw	r18, r24
    320e:	40 e0       	ldi	r20, 0x00	; 0
    3210:	50 e0       	ldi	r21, 0x00	; 0
    3212:	60 e0       	ldi	r22, 0x00	; 0
    3214:	70 e0       	ldi	r23, 0x00	; 0
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	20 93 8a 01 	sts	0x018A, r18
    321e:	30 93 8b 01 	sts	0x018B, r19
    3222:	40 93 8c 01 	sts	0x018C, r20
    3226:	50 93 8d 01 	sts	0x018D, r21
    322a:	60 93 8e 01 	sts	0x018E, r22
    322e:	70 93 8f 01 	sts	0x018F, r23
    3232:	80 93 90 01 	sts	0x0190, r24
    3236:	90 93 91 01 	sts	0x0191, r25
    T_OV_TIMER2 = (256*(f32)PRE_SCALAR_TIMER2)/8000 ;                  //time in us
    323a:	80 91 92 01 	lds	r24, 0x0192
    323e:	90 91 93 01 	lds	r25, 0x0193
    3242:	cc 01       	movw	r24, r24
    3244:	a0 e0       	ldi	r26, 0x00	; 0
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	bc 01       	movw	r22, r24
    324a:	cd 01       	movw	r24, r26
    324c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	bc 01       	movw	r22, r24
    3256:	cd 01       	movw	r24, r26
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	40 e8       	ldi	r20, 0x80	; 128
    325e:	53 e4       	ldi	r21, 0x43	; 67
    3260:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	bc 01       	movw	r22, r24
    326a:	cd 01       	movw	r24, r26
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	4a ef       	ldi	r20, 0xFA	; 250
    3272:	55 e4       	ldi	r21, 0x45	; 69
    3274:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	80 93 94 01 	sts	0x0194, r24
    3280:	90 93 95 01 	sts	0x0195, r25
    3284:	a0 93 96 01 	sts	0x0196, r26
    3288:	b0 93 97 01 	sts	0x0197, r27
	NUM_OV_TIMER2 = DESIRED_TIME_TIMER2 / T_OV_TIMER2 ;                       //number of overflow wanted in entered if
    328c:	a0 90 8a 01 	lds	r10, 0x018A
    3290:	b0 90 8b 01 	lds	r11, 0x018B
    3294:	c0 90 8c 01 	lds	r12, 0x018C
    3298:	d0 90 8d 01 	lds	r13, 0x018D
    329c:	e0 90 8e 01 	lds	r14, 0x018E
    32a0:	f0 90 8f 01 	lds	r15, 0x018F
    32a4:	00 91 90 01 	lds	r16, 0x0190
    32a8:	10 91 91 01 	lds	r17, 0x0191
    32ac:	2a 2d       	mov	r18, r10
    32ae:	3b 2d       	mov	r19, r11
    32b0:	4c 2d       	mov	r20, r12
    32b2:	5d 2d       	mov	r21, r13
    32b4:	6e 2d       	mov	r22, r14
    32b6:	7f 2d       	mov	r23, r15
    32b8:	80 2f       	mov	r24, r16
    32ba:	91 2f       	mov	r25, r17
    32bc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	20 91 94 01 	lds	r18, 0x0194
    32c8:	30 91 95 01 	lds	r19, 0x0195
    32cc:	40 91 96 01 	lds	r20, 0x0196
    32d0:	50 91 97 01 	lds	r21, 0x0197
    32d4:	bc 01       	movw	r22, r24
    32d6:	cd 01       	movw	r24, r26
    32d8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	80 93 98 01 	sts	0x0198, r24
    32e4:	90 93 99 01 	sts	0x0199, r25
    32e8:	a0 93 9a 01 	sts	0x019A, r26
    32ec:	b0 93 9b 01 	sts	0x019B, r27
	PRE_LOAD_TIMER2  = NUM_OV_TIMER2 -( (u32)(DESIRED_TIME_TIMER2 /T_OV_TIMER2) );   //the value which should be in TCNT to make time more accurate
    32f0:	60 90 98 01 	lds	r6, 0x0198
    32f4:	70 90 99 01 	lds	r7, 0x0199
    32f8:	80 90 9a 01 	lds	r8, 0x019A
    32fc:	90 90 9b 01 	lds	r9, 0x019B
    3300:	a0 90 8a 01 	lds	r10, 0x018A
    3304:	b0 90 8b 01 	lds	r11, 0x018B
    3308:	c0 90 8c 01 	lds	r12, 0x018C
    330c:	d0 90 8d 01 	lds	r13, 0x018D
    3310:	e0 90 8e 01 	lds	r14, 0x018E
    3314:	f0 90 8f 01 	lds	r15, 0x018F
    3318:	00 91 90 01 	lds	r16, 0x0190
    331c:	10 91 91 01 	lds	r17, 0x0191
    3320:	2a 2d       	mov	r18, r10
    3322:	3b 2d       	mov	r19, r11
    3324:	4c 2d       	mov	r20, r12
    3326:	5d 2d       	mov	r21, r13
    3328:	6e 2d       	mov	r22, r14
    332a:	7f 2d       	mov	r23, r15
    332c:	80 2f       	mov	r24, r16
    332e:	91 2f       	mov	r25, r17
    3330:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	20 91 94 01 	lds	r18, 0x0194
    333c:	30 91 95 01 	lds	r19, 0x0195
    3340:	40 91 96 01 	lds	r20, 0x0196
    3344:	50 91 97 01 	lds	r21, 0x0197
    3348:	bc 01       	movw	r22, r24
    334a:	cd 01       	movw	r24, r26
    334c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	cc 01       	movw	r24, r24
    3362:	a0 e0       	ldi	r26, 0x00	; 0
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	bc 01       	movw	r22, r24
    3368:	cd 01       	movw	r24, r26
    336a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    336e:	9b 01       	movw	r18, r22
    3370:	ac 01       	movw	r20, r24
    3372:	c4 01       	movw	r24, r8
    3374:	b3 01       	movw	r22, r6
    3376:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	80 93 9c 01 	sts	0x019C, r24
    3382:	90 93 9d 01 	sts	0x019D, r25
    3386:	a0 93 9e 01 	sts	0x019E, r26
    338a:	b0 93 9f 01 	sts	0x019F, r27
	if ( NUM_OV_TIMER2 > (u32)NUM_OV_TIMER2 ){
    338e:	80 91 98 01 	lds	r24, 0x0198
    3392:	90 91 99 01 	lds	r25, 0x0199
    3396:	a0 91 9a 01 	lds	r26, 0x019A
    339a:	b0 91 9b 01 	lds	r27, 0x019B
    339e:	bc 01       	movw	r22, r24
    33a0:	cd 01       	movw	r24, r26
    33a2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	cc 01       	movw	r24, r24
    33ac:	a0 e0       	ldi	r26, 0x00	; 0
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	bc 01       	movw	r22, r24
    33b2:	cd 01       	movw	r24, r26
    33b4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	20 91 98 01 	lds	r18, 0x0198
    33c0:	30 91 99 01 	lds	r19, 0x0199
    33c4:	40 91 9a 01 	lds	r20, 0x019A
    33c8:	50 91 9b 01 	lds	r21, 0x019B
    33cc:	bc 01       	movw	r22, r24
    33ce:	cd 01       	movw	r24, r26
    33d0:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    33d4:	88 23       	and	r24, r24
    33d6:	d4 f4       	brge	.+52     	; 0x340c <TIMER2_Set_Time_mS+0x22a>
		NUM_OV_TIMER2++;
    33d8:	80 91 98 01 	lds	r24, 0x0198
    33dc:	90 91 99 01 	lds	r25, 0x0199
    33e0:	a0 91 9a 01 	lds	r26, 0x019A
    33e4:	b0 91 9b 01 	lds	r27, 0x019B
    33e8:	bc 01       	movw	r22, r24
    33ea:	cd 01       	movw	r24, r26
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e8       	ldi	r20, 0x80	; 128
    33f2:	5f e3       	ldi	r21, 0x3F	; 63
    33f4:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	80 93 98 01 	sts	0x0198, r24
    3400:	90 93 99 01 	sts	0x0199, r25
    3404:	a0 93 9a 01 	sts	0x019A, r26
    3408:	b0 93 9b 01 	sts	0x019B, r27
#if PRE_TYPE_TIMER2 != PRE_8
#error "YOU SELECTED PRE_SCALAR MAKE MORE THAN 1 ms"
#endif

	//to begin from specific value
	TCNT2 = 256-(256*PRE_LOAD_TIMER2 );
    340c:	04 e4       	ldi	r16, 0x44	; 68
    340e:	10 e0       	ldi	r17, 0x00	; 0
    3410:	80 91 9c 01 	lds	r24, 0x019C
    3414:	90 91 9d 01 	lds	r25, 0x019D
    3418:	a0 91 9e 01 	lds	r26, 0x019E
    341c:	b0 91 9f 01 	lds	r27, 0x019F
    3420:	bc 01       	movw	r22, r24
    3422:	cd 01       	movw	r24, r26
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	40 e8       	ldi	r20, 0x80	; 128
    342a:	53 ec       	ldi	r21, 0xC3	; 195
    342c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	bc 01       	movw	r22, r24
    3436:	cd 01       	movw	r24, r26
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	40 e8       	ldi	r20, 0x80	; 128
    343e:	53 e4       	ldi	r21, 0x43	; 67
    3440:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    3444:	dc 01       	movw	r26, r24
    3446:	cb 01       	movw	r24, r22
    3448:	bc 01       	movw	r22, r24
    344a:	cd 01       	movw	r24, r26
    344c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	f8 01       	movw	r30, r16
    3456:	80 83       	st	Z, r24
}
    3458:	0f 90       	pop	r0
    345a:	0f 90       	pop	r0
    345c:	cf 91       	pop	r28
    345e:	df 91       	pop	r29
    3460:	1f 91       	pop	r17
    3462:	0f 91       	pop	r16
    3464:	ff 90       	pop	r15
    3466:	ef 90       	pop	r14
    3468:	df 90       	pop	r13
    346a:	cf 90       	pop	r12
    346c:	bf 90       	pop	r11
    346e:	af 90       	pop	r10
    3470:	9f 90       	pop	r9
    3472:	8f 90       	pop	r8
    3474:	7f 90       	pop	r7
    3476:	6f 90       	pop	r6
    3478:	08 95       	ret

0000347a <Timer2_VidSETDUTY>:


//to check that you use FAST_PWM mode
void Timer2_VidSETDUTY (u8 duty ) {
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	0f 92       	push	r0
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
    3484:	89 83       	std	Y+1, r24	; 0x01
	duty = (u8)( (u16)duty*255/100 ) ;
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	48 2f       	mov	r20, r24
    348a:	50 e0       	ldi	r21, 0x00	; 0
    348c:	ca 01       	movw	r24, r20
    348e:	9c 01       	movw	r18, r24
    3490:	22 0f       	add	r18, r18
    3492:	33 1f       	adc	r19, r19
    3494:	c9 01       	movw	r24, r18
    3496:	96 95       	lsr	r25
    3498:	98 2f       	mov	r25, r24
    349a:	88 27       	eor	r24, r24
    349c:	97 95       	ror	r25
    349e:	87 95       	ror	r24
    34a0:	82 1b       	sub	r24, r18
    34a2:	93 0b       	sbc	r25, r19
    34a4:	84 0f       	add	r24, r20
    34a6:	95 1f       	adc	r25, r21
    34a8:	24 e6       	ldi	r18, 0x64	; 100
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	b9 01       	movw	r22, r18
    34ae:	0e 94 09 2c 	call	0x5812	; 0x5812 <__udivmodhi4>
    34b2:	cb 01       	movw	r24, r22
    34b4:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = duty ;
    34b6:	e3 e4       	ldi	r30, 0x43	; 67
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	80 83       	st	Z, r24
}
    34be:	0f 90       	pop	r0
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	08 95       	ret

000034c6 <__vector_11>:
    5) PRE_1024 every 1sec need t_ov = 32.768ms , num_ov = 30.51757813 , pre_load = 0.51757813
*/



void __vector_11(void){
    34c6:	1f 92       	push	r1
    34c8:	0f 92       	push	r0
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	0f 92       	push	r0
    34ce:	11 24       	eor	r1, r1
    34d0:	2f 93       	push	r18
    34d2:	3f 93       	push	r19
    34d4:	4f 93       	push	r20
    34d6:	5f 93       	push	r21
    34d8:	6f 93       	push	r22
    34da:	7f 93       	push	r23
    34dc:	8f 93       	push	r24
    34de:	9f 93       	push	r25
    34e0:	af 93       	push	r26
    34e2:	bf 93       	push	r27
    34e4:	ef 93       	push	r30
    34e6:	ff 93       	push	r31
    34e8:	df 93       	push	r29
    34ea:	cf 93       	push	r28
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
     TIMER0_PFUNC();
    34f0:	e0 91 68 01 	lds	r30, 0x0168
    34f4:	f0 91 69 01 	lds	r31, 0x0169
    34f8:	09 95       	icall
}//end ISR FUNC
    34fa:	cf 91       	pop	r28
    34fc:	df 91       	pop	r29
    34fe:	ff 91       	pop	r31
    3500:	ef 91       	pop	r30
    3502:	bf 91       	pop	r27
    3504:	af 91       	pop	r26
    3506:	9f 91       	pop	r25
    3508:	8f 91       	pop	r24
    350a:	7f 91       	pop	r23
    350c:	6f 91       	pop	r22
    350e:	5f 91       	pop	r21
    3510:	4f 91       	pop	r20
    3512:	3f 91       	pop	r19
    3514:	2f 91       	pop	r18
    3516:	0f 90       	pop	r0
    3518:	0f be       	out	0x3f, r0	; 63
    351a:	0f 90       	pop	r0
    351c:	1f 90       	pop	r1
    351e:	18 95       	reti

00003520 <__vector_5>:

/****************************************************************************/

void __vector_5(void){
    3520:	1f 92       	push	r1
    3522:	0f 92       	push	r0
    3524:	0f b6       	in	r0, 0x3f	; 63
    3526:	0f 92       	push	r0
    3528:	11 24       	eor	r1, r1
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	2f 93       	push	r18
    3530:	3f 93       	push	r19
    3532:	4f 93       	push	r20
    3534:	5f 93       	push	r21
    3536:	6f 93       	push	r22
    3538:	7f 93       	push	r23
    353a:	8f 93       	push	r24
    353c:	9f 93       	push	r25
    353e:	af 93       	push	r26
    3540:	bf 93       	push	r27
    3542:	ef 93       	push	r30
    3544:	ff 93       	push	r31
    3546:	df 93       	push	r29
    3548:	cf 93       	push	r28
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
	static u32 tick = 0 ;
	tick++ ;
    354e:	80 91 6e 01 	lds	r24, 0x016E
    3552:	90 91 6f 01 	lds	r25, 0x016F
    3556:	01 96       	adiw	r24, 0x01	; 1
    3558:	90 93 6f 01 	sts	0x016F, r25
    355c:	80 93 6e 01 	sts	0x016E, r24

	if (tick == (u32)NUM_OV_TIMER2 ){
    3560:	80 91 98 01 	lds	r24, 0x0198
    3564:	90 91 99 01 	lds	r25, 0x0199
    3568:	a0 91 9a 01 	lds	r26, 0x019A
    356c:	b0 91 9b 01 	lds	r27, 0x019B
    3570:	bc 01       	movw	r22, r24
    3572:	cd 01       	movw	r24, r26
    3574:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	9c 01       	movw	r18, r24
    357e:	80 91 6e 01 	lds	r24, 0x016E
    3582:	90 91 6f 01 	lds	r25, 0x016F
    3586:	28 17       	cp	r18, r24
    3588:	39 07       	cpc	r19, r25
    358a:	79 f5       	brne	.+94     	; 0x35ea <__vector_5+0xca>
		TIMER2_PFUNC();                                     //to toggle led
    358c:	e0 91 6c 01 	lds	r30, 0x016C
    3590:	f0 91 6d 01 	lds	r31, 0x016D
    3594:	09 95       	icall
		TCNT2 = 256-(256*PRE_LOAD_TIMER2);                         //to begin from specific value
    3596:	04 e4       	ldi	r16, 0x44	; 68
    3598:	10 e0       	ldi	r17, 0x00	; 0
    359a:	80 91 9c 01 	lds	r24, 0x019C
    359e:	90 91 9d 01 	lds	r25, 0x019D
    35a2:	a0 91 9e 01 	lds	r26, 0x019E
    35a6:	b0 91 9f 01 	lds	r27, 0x019F
    35aa:	bc 01       	movw	r22, r24
    35ac:	cd 01       	movw	r24, r26
    35ae:	20 e0       	ldi	r18, 0x00	; 0
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	40 e8       	ldi	r20, 0x80	; 128
    35b4:	53 ec       	ldi	r21, 0xC3	; 195
    35b6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    35ba:	dc 01       	movw	r26, r24
    35bc:	cb 01       	movw	r24, r22
    35be:	bc 01       	movw	r22, r24
    35c0:	cd 01       	movw	r24, r26
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e8       	ldi	r20, 0x80	; 128
    35c8:	53 e4       	ldi	r21, 0x43	; 67
    35ca:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	bc 01       	movw	r22, r24
    35d4:	cd 01       	movw	r24, r26
    35d6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	f8 01       	movw	r30, r16
    35e0:	80 83       	st	Z, r24
		tick = 0 ;                                          //to start count from beginning again
    35e2:	10 92 6f 01 	sts	0x016F, r1
    35e6:	10 92 6e 01 	sts	0x016E, r1
	}//end if
}//end ISR FUNC
    35ea:	cf 91       	pop	r28
    35ec:	df 91       	pop	r29
    35ee:	ff 91       	pop	r31
    35f0:	ef 91       	pop	r30
    35f2:	bf 91       	pop	r27
    35f4:	af 91       	pop	r26
    35f6:	9f 91       	pop	r25
    35f8:	8f 91       	pop	r24
    35fa:	7f 91       	pop	r23
    35fc:	6f 91       	pop	r22
    35fe:	5f 91       	pop	r21
    3600:	4f 91       	pop	r20
    3602:	3f 91       	pop	r19
    3604:	2f 91       	pop	r18
    3606:	1f 91       	pop	r17
    3608:	0f 91       	pop	r16
    360a:	0f 90       	pop	r0
    360c:	0f be       	out	0x3f, r0	; 63
    360e:	0f 90       	pop	r0
    3610:	1f 90       	pop	r1
    3612:	18 95       	reti

00003614 <__vector_9>:

/********************************************************************************/

void __vector_9(void){
    3614:	1f 92       	push	r1
    3616:	0f 92       	push	r0
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	0f 92       	push	r0
    361c:	11 24       	eor	r1, r1
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
/*****************************************/
}//end ISR FUNC
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	0f 90       	pop	r0
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	0f 90       	pop	r0
    3630:	1f 90       	pop	r1
    3632:	18 95       	reti

00003634 <__vector_6>:

void __vector_6(void){
    3634:	1f 92       	push	r1
    3636:	0f 92       	push	r0
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	0f 92       	push	r0
    363c:	11 24       	eor	r1, r1
    363e:	2f 93       	push	r18
    3640:	3f 93       	push	r19
    3642:	4f 93       	push	r20
    3644:	5f 93       	push	r21
    3646:	6f 93       	push	r22
    3648:	7f 93       	push	r23
    364a:	8f 93       	push	r24
    364c:	9f 93       	push	r25
    364e:	af 93       	push	r26
    3650:	bf 93       	push	r27
    3652:	ef 93       	push	r30
    3654:	ff 93       	push	r31
    3656:	df 93       	push	r29
    3658:	cf 93       	push	r28
    365a:	cd b7       	in	r28, 0x3d	; 61
    365c:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_IcuCallBack != 0 )
    365e:	80 91 70 01 	lds	r24, 0x0170
    3662:	90 91 71 01 	lds	r25, 0x0171
    3666:	00 97       	sbiw	r24, 0x00	; 0
    3668:	29 f0       	breq	.+10     	; 0x3674 <__vector_6+0x40>
	{
		Timer1_IcuCallBack();
    366a:	e0 91 70 01 	lds	r30, 0x0170
    366e:	f0 91 71 01 	lds	r31, 0x0171
    3672:	09 95       	icall
	}
}
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	ff 91       	pop	r31
    367a:	ef 91       	pop	r30
    367c:	bf 91       	pop	r27
    367e:	af 91       	pop	r26
    3680:	9f 91       	pop	r25
    3682:	8f 91       	pop	r24
    3684:	7f 91       	pop	r23
    3686:	6f 91       	pop	r22
    3688:	5f 91       	pop	r21
    368a:	4f 91       	pop	r20
    368c:	3f 91       	pop	r19
    368e:	2f 91       	pop	r18
    3690:	0f 90       	pop	r0
    3692:	0f be       	out	0x3f, r0	; 63
    3694:	0f 90       	pop	r0
    3696:	1f 90       	pop	r1
    3698:	18 95       	reti

0000369a <UART_SetCallBack>:
/* Own Driver Files*/
#include "DIO_interface.h"

static void (*UART_Ptr)(void) = NULL ;

void UART_SetCallBack(  void (*ptr)(void) ){
    369a:	df 93       	push	r29
    369c:	cf 93       	push	r28
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <UART_SetCallBack+0x6>
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	9a 83       	std	Y+2, r25	; 0x02
    36a6:	89 83       	std	Y+1, r24	; 0x01
	UART_Ptr = ptr ;
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	9a 81       	ldd	r25, Y+2	; 0x02
    36ac:	90 93 a1 01 	sts	0x01A1, r25
    36b0:	80 93 a0 01 	sts	0x01A0, r24
}
    36b4:	0f 90       	pop	r0
    36b6:	0f 90       	pop	r0
    36b8:	cf 91       	pop	r28
    36ba:	df 91       	pop	r29
    36bc:	08 95       	ret

000036be <UART_VidInit>:

void UART_VidInit (){
    36be:	df 93       	push	r29
    36c0:	cf 93       	push	r28
    36c2:	0f 92       	push	r0
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
	/* to define pins of TX RX */
	DIO_VidSetPinDirection(3,0,0);			//PIND0 as output (RX)
    36c8:	83 e0       	ldi	r24, 0x03	; 3
    36ca:	60 e0       	ldi	r22, 0x00	; 0
    36cc:	40 e0       	ldi	r20, 0x00	; 0
    36ce:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3,1,1);			//PIND1 as input  (TX)
    36d2:	83 e0       	ldi	r24, 0x03	; 3
    36d4:	61 e0       	ldi	r22, 0x01	; 1
    36d6:	41 e0       	ldi	r20, 0x01	; 1
    36d8:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>

	SET_BIT(UCSRB,RXEN);					// enable reciever
    36dc:	aa e2       	ldi	r26, 0x2A	; 42
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	ea e2       	ldi	r30, 0x2A	; 42
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	80 61       	ori	r24, 0x10	; 16
    36e8:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);					// transmitter enable
    36ea:	aa e2       	ldi	r26, 0x2A	; 42
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	ea e2       	ldi	r30, 0x2A	; 42
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	88 60       	ori	r24, 0x08	; 8
    36f6:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSZ2);					// character size initialized to zero
    36f8:	aa e2       	ldi	r26, 0x2A	; 42
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	ea e2       	ldi	r30, 0x2A	; 42
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	8b 7f       	andi	r24, 0xFB	; 251
    3704:	8c 93       	st	X, r24

	u8 UCSRC_help = 0b10000000 ;
    3706:	80 e8       	ldi	r24, 0x80	; 128
    3708:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UMSEL);				// asynchronous selected
    370a:	89 81       	ldd	r24, Y+1	; 0x01
    370c:	8f 7b       	andi	r24, 0xBF	; 191
    370e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UPM1);
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	8f 7d       	andi	r24, 0xDF	; 223
    3714:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UPM0);				// parity disabled
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	8f 7e       	andi	r24, 0xEF	; 239
    371a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,USBS);				// only 1 stop bit selected
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	87 7f       	andi	r24, 0xF7	; 247
    3720:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_help,UCSZ1);
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	84 60       	ori	r24, 0x04	; 4
    3726:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_help,UCSZ0);				// character size set to 8 bit
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	82 60       	ori	r24, 0x02	; 2
    372c:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UCPOL);				// rising for transmit and falling for reading
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	8e 7f       	andi	r24, 0xFE	; 254
    3732:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = UCSRC_help ;					//	UCSRC_help = 0b10000110, final value of the UCSRC
    3734:	e0 e4       	ldi	r30, 0x40	; 64
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	89 81       	ldd	r24, Y+1	; 0x01
    373a:	80 83       	st	Z, r24


	SET_BIT(UCSRA, U2X);					// enabling double speed so that we can choose the 2400 bps
    373c:	ab e2       	ldi	r26, 0x2B	; 43
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	eb e2       	ldi	r30, 0x2B	; 43
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	82 60       	ori	r24, 0x02	; 2
    3748:	8c 93       	st	X, r24
	UBRRH = 0 ;								// URSEL set tol zero to select UBBRx
    374a:	e0 e4       	ldi	r30, 0x40	; 64
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	10 82       	st	Z, r1
	UBRRL = 51 ;							// selecting the baudrate to 2400 bps
    3750:	e9 e2       	ldi	r30, 0x29	; 41
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	83 e3       	ldi	r24, 0x33	; 51
    3756:	80 83       	st	Z, r24
}
    3758:	0f 90       	pop	r0
    375a:	cf 91       	pop	r28
    375c:	df 91       	pop	r29
    375e:	08 95       	ret

00003760 <UART_VidInitUsingInterrupt>:



void UART_VidInitUsingInterrupt () {
    3760:	df 93       	push	r29
    3762:	cf 93       	push	r28
    3764:	0f 92       	push	r0
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
	/* to define pins of TX RX */
	DIO_VidSetPinDirection(3,0,0);			//PIND0 as output (RX)
    376a:	83 e0       	ldi	r24, 0x03	; 3
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	40 e0       	ldi	r20, 0x00	; 0
    3770:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3,1,1);			//PIND1 as input  (TX)
    3774:	83 e0       	ldi	r24, 0x03	; 3
    3776:	61 e0       	ldi	r22, 0x01	; 1
    3778:	41 e0       	ldi	r20, 0x01	; 1
    377a:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>


	SET_BIT(UCSRB,RXCIE);
    377e:	aa e2       	ldi	r26, 0x2A	; 42
    3780:	b0 e0       	ldi	r27, 0x00	; 0
    3782:	ea e2       	ldi	r30, 0x2A	; 42
    3784:	f0 e0       	ldi	r31, 0x00	; 0
    3786:	80 81       	ld	r24, Z
    3788:	80 68       	ori	r24, 0x80	; 128
    378a:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    378c:	aa e2       	ldi	r26, 0x2A	; 42
    378e:	b0 e0       	ldi	r27, 0x00	; 0
    3790:	ea e2       	ldi	r30, 0x2A	; 42
    3792:	f0 e0       	ldi	r31, 0x00	; 0
    3794:	80 81       	ld	r24, Z
    3796:	80 61       	ori	r24, 0x10	; 16
    3798:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    379a:	aa e2       	ldi	r26, 0x2A	; 42
    379c:	b0 e0       	ldi	r27, 0x00	; 0
    379e:	ea e2       	ldi	r30, 0x2A	; 42
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	80 81       	ld	r24, Z
    37a4:	88 60       	ori	r24, 0x08	; 8
    37a6:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSZ2);
    37a8:	aa e2       	ldi	r26, 0x2A	; 42
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	ea e2       	ldi	r30, 0x2A	; 42
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	80 81       	ld	r24, Z
    37b2:	8b 7f       	andi	r24, 0xFB	; 251
    37b4:	8c 93       	st	X, r24

	u8 UCSRC_help = 0b10000000 ;
    37b6:	80 e8       	ldi	r24, 0x80	; 128
    37b8:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UMSEL);				// asynchronous selected
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	8f 7b       	andi	r24, 0xBF	; 191
    37be:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UPM1);
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	8f 7d       	andi	r24, 0xDF	; 223
    37c4:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UPM0);				// parity disabled
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	8f 7e       	andi	r24, 0xEF	; 239
    37ca:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,USBS);				// only 1 stop bit selected
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	87 7f       	andi	r24, 0xF7	; 247
    37d0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_help,UCSZ1);
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	84 60       	ori	r24, 0x04	; 4
    37d6:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_help,UCSZ0);				// character size set to 8 bit
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	82 60       	ori	r24, 0x02	; 2
    37dc:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UCPOL);				// rising for transmit and falling for reading
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	8e 7f       	andi	r24, 0xFE	; 254
    37e2:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = UCSRC_help ;					//	UCSRC_help = 0b10000110, final value of the UCSRC
    37e4:	e0 e4       	ldi	r30, 0x40	; 64
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	89 81       	ldd	r24, Y+1	; 0x01
    37ea:	80 83       	st	Z, r24


	SET_BIT(UCSRA, U2X);					// enabling double speed so that we can choose the 2400 bps
    37ec:	ab e2       	ldi	r26, 0x2B	; 43
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	eb e2       	ldi	r30, 0x2B	; 43
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	80 81       	ld	r24, Z
    37f6:	82 60       	ori	r24, 0x02	; 2
    37f8:	8c 93       	st	X, r24
	UBRRH = 0 ;								// URSEL set tol zero to select UBBRx
    37fa:	e0 e4       	ldi	r30, 0x40	; 64
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	10 82       	st	Z, r1
	UBRRL = 51 ;							// selecting the baudrate to 2400 bps
    3800:	e9 e2       	ldi	r30, 0x29	; 41
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	83 e3       	ldi	r24, 0x33	; 51
    3806:	80 83       	st	Z, r24
}
    3808:	0f 90       	pop	r0
    380a:	cf 91       	pop	r28
    380c:	df 91       	pop	r29
    380e:	08 95       	ret

00003810 <UART_VidSendData>:


void UART_VidSendData(u8 Copy_U8Data){
    3810:	df 93       	push	r29
    3812:	cf 93       	push	r28
    3814:	0f 92       	push	r0
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	89 83       	std	Y+1, r24	; 0x01
	while ( !GET_BIT(UCSRA,UDRE) );
    381c:	eb e2       	ldi	r30, 0x2B	; 43
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	80 81       	ld	r24, Z
    3822:	82 95       	swap	r24
    3824:	86 95       	lsr	r24
    3826:	87 70       	andi	r24, 0x07	; 7
    3828:	88 2f       	mov	r24, r24
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	81 70       	andi	r24, 0x01	; 1
    382e:	90 70       	andi	r25, 0x00	; 0
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	a1 f3       	breq	.-24     	; 0x381c <UART_VidSendData+0xc>
	UDR = Copy_U8Data ;
    3834:	ec e2       	ldi	r30, 0x2C	; 44
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	89 81       	ldd	r24, Y+1	; 0x01
    383a:	80 83       	st	Z, r24
}
    383c:	0f 90       	pop	r0
    383e:	cf 91       	pop	r28
    3840:	df 91       	pop	r29
    3842:	08 95       	ret

00003844 <UART_VidRecieveDataForInterruptPurpose>:

u8 UART_VidRecieveDataForInterruptPurpose(){
    3844:	df 93       	push	r29
    3846:	cf 93       	push	r28
    3848:	cd b7       	in	r28, 0x3d	; 61
    384a:	de b7       	in	r29, 0x3e	; 62
	return UDR ;
    384c:	ec e2       	ldi	r30, 0x2C	; 44
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	80 81       	ld	r24, Z
}
    3852:	cf 91       	pop	r28
    3854:	df 91       	pop	r29
    3856:	08 95       	ret

00003858 <UART_VidRecieveData>:

u8 UART_VidRecieveData(){
    3858:	df 93       	push	r29
    385a:	cf 93       	push	r28
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
	while ( !GET_BIT(UCSRA,RXC) );
    3860:	eb e2       	ldi	r30, 0x2B	; 43
    3862:	f0 e0       	ldi	r31, 0x00	; 0
    3864:	80 81       	ld	r24, Z
    3866:	88 23       	and	r24, r24
    3868:	dc f7       	brge	.-10     	; 0x3860 <UART_VidRecieveData+0x8>
	return UDR ;
    386a:	ec e2       	ldi	r30, 0x2C	; 44
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	80 81       	ld	r24, Z
}
    3870:	cf 91       	pop	r28
    3872:	df 91       	pop	r29
    3874:	08 95       	ret

00003876 <UART_VidSendString>:

void UART_VidSendString (u8 Copy_U8String[]){
    3876:	df 93       	push	r29
    3878:	cf 93       	push	r28
    387a:	00 d0       	rcall	.+0      	; 0x387c <UART_VidSendString+0x6>
    387c:	0f 92       	push	r0
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62
    3882:	9b 83       	std	Y+3, r25	; 0x03
    3884:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ;
    3886:	19 82       	std	Y+1, r1	; 0x01
    3888:	0e c0       	rjmp	.+28     	; 0x38a6 <UART_VidSendString+0x30>
	while (Copy_U8String[i] != '\0'){
		UART_VidSendData(Copy_U8String[i]);
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	28 2f       	mov	r18, r24
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	8a 81       	ldd	r24, Y+2	; 0x02
    3892:	9b 81       	ldd	r25, Y+3	; 0x03
    3894:	fc 01       	movw	r30, r24
    3896:	e2 0f       	add	r30, r18
    3898:	f3 1f       	adc	r31, r19
    389a:	80 81       	ld	r24, Z
    389c:	0e 94 08 1c 	call	0x3810	; 0x3810 <UART_VidSendData>
		i++ ;
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	8f 5f       	subi	r24, 0xFF	; 255
    38a4:	89 83       	std	Y+1, r24	; 0x01
	return UDR ;
}

void UART_VidSendString (u8 Copy_U8String[]){
	u8 i = 0 ;
	while (Copy_U8String[i] != '\0'){
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	28 2f       	mov	r18, r24
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	9b 81       	ldd	r25, Y+3	; 0x03
    38b0:	fc 01       	movw	r30, r24
    38b2:	e2 0f       	add	r30, r18
    38b4:	f3 1f       	adc	r31, r19
    38b6:	80 81       	ld	r24, Z
    38b8:	88 23       	and	r24, r24
    38ba:	39 f7       	brne	.-50     	; 0x388a <UART_VidSendString+0x14>
		UART_VidSendData(Copy_U8String[i]);
		i++ ;
	}
}
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	cf 91       	pop	r28
    38c4:	df 91       	pop	r29
    38c6:	08 95       	ret

000038c8 <__vector_13>:

void __vector_13(void){
    38c8:	1f 92       	push	r1
    38ca:	0f 92       	push	r0
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	0f 92       	push	r0
    38d0:	11 24       	eor	r1, r1
    38d2:	2f 93       	push	r18
    38d4:	3f 93       	push	r19
    38d6:	4f 93       	push	r20
    38d8:	5f 93       	push	r21
    38da:	6f 93       	push	r22
    38dc:	7f 93       	push	r23
    38de:	8f 93       	push	r24
    38e0:	9f 93       	push	r25
    38e2:	af 93       	push	r26
    38e4:	bf 93       	push	r27
    38e6:	ef 93       	push	r30
    38e8:	ff 93       	push	r31
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
	UART_Ptr();
    38f2:	e0 91 a0 01 	lds	r30, 0x01A0
    38f6:	f0 91 a1 01 	lds	r31, 0x01A1
    38fa:	09 95       	icall
}//end ISR FUNC
    38fc:	cf 91       	pop	r28
    38fe:	df 91       	pop	r29
    3900:	ff 91       	pop	r31
    3902:	ef 91       	pop	r30
    3904:	bf 91       	pop	r27
    3906:	af 91       	pop	r26
    3908:	9f 91       	pop	r25
    390a:	8f 91       	pop	r24
    390c:	7f 91       	pop	r23
    390e:	6f 91       	pop	r22
    3910:	5f 91       	pop	r21
    3912:	4f 91       	pop	r20
    3914:	3f 91       	pop	r19
    3916:	2f 91       	pop	r18
    3918:	0f 90       	pop	r0
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	0f 90       	pop	r0
    391e:	1f 90       	pop	r1
    3920:	18 95       	reti

00003922 <BluetoothInit>:

#include "../MCAL_DRIVERS/UART_Interface.h"
#include "../Serivecs_driver/STD_TYPES.h"
#include "../Serivecs_driver/BIT_MATH.h"

void BluetoothInit(){
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
	UART_VidInit () ;
    392a:	0e 94 5f 1b 	call	0x36be	; 0x36be <UART_VidInit>
}
    392e:	cf 91       	pop	r28
    3930:	df 91       	pop	r29
    3932:	08 95       	ret

00003934 <Bluetooth_U32Getnumber>:

u8 Bluetooth_U32Getnumber(){
    3934:	df 93       	push	r29
    3936:	cf 93       	push	r28
    3938:	cd b7       	in	r28, 0x3d	; 61
    393a:	de b7       	in	r29, 0x3e	; 62
	return UART_VidRecieveData();
    393c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <UART_VidRecieveData>
}
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	08 95       	ret

00003946 <BluetoothInitInterrupt>:

/**********************/
void BluetoothInitInterrupt(){
    3946:	df 93       	push	r29
    3948:	cf 93       	push	r28
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
	UART_VidInitUsingInterrupt () ;
    394e:	0e 94 b0 1b 	call	0x3760	; 0x3760 <UART_VidInitUsingInterrupt>
}
    3952:	cf 91       	pop	r28
    3954:	df 91       	pop	r29
    3956:	08 95       	ret

00003958 <Bluetooth_U32GetnumberInterrupt>:
u32 Bluetooth_U32GetnumberInterrupt(){
    3958:	df 93       	push	r29
    395a:	cf 93       	push	r28
    395c:	cd b7       	in	r28, 0x3d	; 61
    395e:	de b7       	in	r29, 0x3e	; 62
	return UART_VidRecieveDataForInterruptPurpose();
    3960:	0e 94 22 1c 	call	0x3844	; 0x3844 <UART_VidRecieveDataForInterruptPurpose>
    3964:	88 2f       	mov	r24, r24
    3966:	90 e0       	ldi	r25, 0x00	; 0
}
    3968:	cf 91       	pop	r28
    396a:	df 91       	pop	r29
    396c:	08 95       	ret

0000396e <Bluetooth_VidSendData>:
/************************/

void Bluetooth_VidSendData(u8 Copy_U8Data){
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	0f 92       	push	r0
    3974:	cd b7       	in	r28, 0x3d	; 61
    3976:	de b7       	in	r29, 0x3e	; 62
    3978:	89 83       	std	Y+1, r24	; 0x01
	 UART_VidSendData(Copy_U8Data);
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	0e 94 08 1c 	call	0x3810	; 0x3810 <UART_VidSendData>
}
    3980:	0f 90       	pop	r0
    3982:	cf 91       	pop	r28
    3984:	df 91       	pop	r29
    3986:	08 95       	ret

00003988 <BluetoothVidSendString>:
void BluetoothVidSendString (u8 Copy_U8String[]){
    3988:	df 93       	push	r29
    398a:	cf 93       	push	r28
    398c:	00 d0       	rcall	.+0      	; 0x398e <BluetoothVidSendString+0x6>
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    3992:	9a 83       	std	Y+2, r25	; 0x02
    3994:	89 83       	std	Y+1, r24	; 0x01
	UART_VidSendString(Copy_U8String);
    3996:	89 81       	ldd	r24, Y+1	; 0x01
    3998:	9a 81       	ldd	r25, Y+2	; 0x02
    399a:	0e 94 3b 1c 	call	0x3876	; 0x3876 <UART_VidSendString>
}
    399e:	0f 90       	pop	r0
    39a0:	0f 90       	pop	r0
    39a2:	cf 91       	pop	r28
    39a4:	df 91       	pop	r29
    39a6:	08 95       	ret

000039a8 <Bluetooth_SetCallBack>:

void Bluetooth_SetCallBack(  void (*ptr)(void) ){
    39a8:	df 93       	push	r29
    39aa:	cf 93       	push	r28
    39ac:	00 d0       	rcall	.+0      	; 0x39ae <Bluetooth_SetCallBack+0x6>
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	9a 83       	std	Y+2, r25	; 0x02
    39b4:	89 83       	std	Y+1, r24	; 0x01
	UART_SetCallBack(ptr);
    39b6:	89 81       	ldd	r24, Y+1	; 0x01
    39b8:	9a 81       	ldd	r25, Y+2	; 0x02
    39ba:	0e 94 4d 1b 	call	0x369a	; 0x369a <UART_SetCallBack>
}
    39be:	0f 90       	pop	r0
    39c0:	0f 90       	pop	r0
    39c2:	cf 91       	pop	r28
    39c4:	df 91       	pop	r29
    39c6:	08 95       	ret

000039c8 <DcMotor_VidInit>:
#include "../MCAL_DRIVERS/DIO_interface.h"
#include "../MCAL_DRIVERS/TIMER_Interface.h"
#include "DCMOTOR_Private.h"
#include "DCMOTOR_CFG.h"

void DcMotor_VidInit(void){
    39c8:	df 93       	push	r29
    39ca:	cf 93       	push	r28
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
	/*set the direction of the two input pins of the dc motor to be output pins */
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN1 , HIGH);
    39d0:	82 e0       	ldi	r24, 0x02	; 2
    39d2:	62 e0       	ldi	r22, 0x02	; 2
    39d4:	41 e0       	ldi	r20, 0x01	; 1
    39d6:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN2 , HIGH);
    39da:	82 e0       	ldi	r24, 0x02	; 2
    39dc:	63 e0       	ldi	r22, 0x03	; 3
    39de:	41 e0       	ldi	r20, 0x01	; 1
    39e0:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN3 , HIGH);
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	66 e0       	ldi	r22, 0x06	; 6
    39e8:	41 e0       	ldi	r20, 0x01	; 1
    39ea:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN4 , HIGH);
    39ee:	82 e0       	ldi	r24, 0x02	; 2
    39f0:	67 e0       	ldi	r22, 0x07	; 7
    39f2:	41 e0       	ldi	r20, 0x01	; 1
    39f4:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>

	/*initialize the dc motor to be stop at the beginning*/
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	62 e0       	ldi	r22, 0x02	; 2
    39fc:	40 e0       	ldi	r20, 0x00	; 0
    39fe:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    3a02:	82 e0       	ldi	r24, 0x02	; 2
    3a04:	63 e0       	ldi	r22, 0x03	; 3
    3a06:	40 e0       	ldi	r20, 0x00	; 0
    3a08:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN3 , LOW);
    3a0c:	82 e0       	ldi	r24, 0x02	; 2
    3a0e:	66 e0       	ldi	r22, 0x06	; 6
    3a10:	40 e0       	ldi	r20, 0x00	; 0
    3a12:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN4 , LOW);
    3a16:	82 e0       	ldi	r24, 0x02	; 2
    3a18:	67 e0       	ldi	r22, 0x07	; 7
    3a1a:	40 e0       	ldi	r20, 0x00	; 0
    3a1c:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>

	/**/
	TIMER2_VidInitialize();
    3a20:	0e 94 f5 14 	call	0x29ea	; 0x29ea <TIMER2_VidInitialize>
}
    3a24:	cf 91       	pop	r28
    3a26:	df 91       	pop	r29
    3a28:	08 95       	ret

00003a2a <DcMotor_VidRotate_Wheels1>:

void DcMotor_VidRotate_Wheels1(u8 state){
    3a2a:	df 93       	push	r29
    3a2c:	cf 93       	push	r28
    3a2e:	00 d0       	rcall	.+0      	; 0x3a30 <DcMotor_VidRotate_Wheels1+0x6>
    3a30:	0f 92       	push	r0
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	89 83       	std	Y+1, r24	; 0x01
	switch(state){
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	28 2f       	mov	r18, r24
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	3b 83       	std	Y+3, r19	; 0x03
    3a40:	2a 83       	std	Y+2, r18	; 0x02
    3a42:	8a 81       	ldd	r24, Y+2	; 0x02
    3a44:	9b 81       	ldd	r25, Y+3	; 0x03
    3a46:	81 30       	cpi	r24, 0x01	; 1
    3a48:	91 05       	cpc	r25, r1
    3a4a:	a1 f0       	breq	.+40     	; 0x3a74 <DcMotor_VidRotate_Wheels1+0x4a>
    3a4c:	2a 81       	ldd	r18, Y+2	; 0x02
    3a4e:	3b 81       	ldd	r19, Y+3	; 0x03
    3a50:	22 30       	cpi	r18, 0x02	; 2
    3a52:	31 05       	cpc	r19, r1
    3a54:	d1 f0       	breq	.+52     	; 0x3a8a <DcMotor_VidRotate_Wheels1+0x60>
    3a56:	8a 81       	ldd	r24, Y+2	; 0x02
    3a58:	9b 81       	ldd	r25, Y+3	; 0x03
    3a5a:	00 97       	sbiw	r24, 0x00	; 0
    3a5c:	01 f5       	brne	.+64     	; 0x3a9e <DcMotor_VidRotate_Wheels1+0x74>
	case STOP:
		/*make the dc motor stop*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    3a5e:	82 e0       	ldi	r24, 0x02	; 2
    3a60:	62 e0       	ldi	r22, 0x02	; 2
    3a62:	40 e0       	ldi	r20, 0x00	; 0
    3a64:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    3a68:	82 e0       	ldi	r24, 0x02	; 2
    3a6a:	63 e0       	ldi	r22, 0x03	; 3
    3a6c:	40 e0       	ldi	r20, 0x00	; 0
    3a6e:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    3a72:	15 c0       	rjmp	.+42     	; 0x3a9e <DcMotor_VidRotate_Wheels1+0x74>
		break;
	case CLK_WISE:
		/*make the dc motor start in CLOCK_WISE direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    3a74:	82 e0       	ldi	r24, 0x02	; 2
    3a76:	62 e0       	ldi	r22, 0x02	; 2
    3a78:	40 e0       	ldi	r20, 0x00	; 0
    3a7a:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , HIGH);
    3a7e:	82 e0       	ldi	r24, 0x02	; 2
    3a80:	63 e0       	ldi	r22, 0x03	; 3
    3a82:	41 e0       	ldi	r20, 0x01	; 1
    3a84:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    3a88:	0a c0       	rjmp	.+20     	; 0x3a9e <DcMotor_VidRotate_Wheels1+0x74>
		break;
	case ANTI_CLK_WISE:
		/*make the dc motor start in ANTI_CLOCK_WISE  direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , HIGH);
    3a8a:	82 e0       	ldi	r24, 0x02	; 2
    3a8c:	62 e0       	ldi	r22, 0x02	; 2
    3a8e:	41 e0       	ldi	r20, 0x01	; 1
    3a90:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    3a94:	82 e0       	ldi	r24, 0x02	; 2
    3a96:	63 e0       	ldi	r22, 0x03	; 3
    3a98:	40 e0       	ldi	r20, 0x00	; 0
    3a9a:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		break;
	}
}
    3a9e:	0f 90       	pop	r0
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	cf 91       	pop	r28
    3aa6:	df 91       	pop	r29
    3aa8:	08 95       	ret

00003aaa <DcMotor_VidRotate_Wheels2>:

void DcMotor_VidRotate_Wheels2(u8 state){
    3aaa:	df 93       	push	r29
    3aac:	cf 93       	push	r28
    3aae:	00 d0       	rcall	.+0      	; 0x3ab0 <DcMotor_VidRotate_Wheels2+0x6>
    3ab0:	0f 92       	push	r0
    3ab2:	cd b7       	in	r28, 0x3d	; 61
    3ab4:	de b7       	in	r29, 0x3e	; 62
    3ab6:	89 83       	std	Y+1, r24	; 0x01
	switch(state){
    3ab8:	89 81       	ldd	r24, Y+1	; 0x01
    3aba:	28 2f       	mov	r18, r24
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	3b 83       	std	Y+3, r19	; 0x03
    3ac0:	2a 83       	std	Y+2, r18	; 0x02
    3ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac6:	81 30       	cpi	r24, 0x01	; 1
    3ac8:	91 05       	cpc	r25, r1
    3aca:	a1 f0       	breq	.+40     	; 0x3af4 <DcMotor_VidRotate_Wheels2+0x4a>
    3acc:	2a 81       	ldd	r18, Y+2	; 0x02
    3ace:	3b 81       	ldd	r19, Y+3	; 0x03
    3ad0:	22 30       	cpi	r18, 0x02	; 2
    3ad2:	31 05       	cpc	r19, r1
    3ad4:	d1 f0       	breq	.+52     	; 0x3b0a <DcMotor_VidRotate_Wheels2+0x60>
    3ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    3ada:	00 97       	sbiw	r24, 0x00	; 0
    3adc:	01 f5       	brne	.+64     	; 0x3b1e <DcMotor_VidRotate_Wheels2+0x74>
	case STOP:
		/*make the dc motor stop*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN3 , LOW);
    3ade:	82 e0       	ldi	r24, 0x02	; 2
    3ae0:	66 e0       	ldi	r22, 0x06	; 6
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN4 , LOW);
    3ae8:	82 e0       	ldi	r24, 0x02	; 2
    3aea:	67 e0       	ldi	r22, 0x07	; 7
    3aec:	40 e0       	ldi	r20, 0x00	; 0
    3aee:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    3af2:	15 c0       	rjmp	.+42     	; 0x3b1e <DcMotor_VidRotate_Wheels2+0x74>
		break;
	case CLK_WISE:
		/*make the dc motor start in CLOCK_WISE direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN3 , LOW);
    3af4:	82 e0       	ldi	r24, 0x02	; 2
    3af6:	66 e0       	ldi	r22, 0x06	; 6
    3af8:	40 e0       	ldi	r20, 0x00	; 0
    3afa:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN4 , HIGH);
    3afe:	82 e0       	ldi	r24, 0x02	; 2
    3b00:	67 e0       	ldi	r22, 0x07	; 7
    3b02:	41 e0       	ldi	r20, 0x01	; 1
    3b04:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    3b08:	0a c0       	rjmp	.+20     	; 0x3b1e <DcMotor_VidRotate_Wheels2+0x74>
		break;
	case ANTI_CLK_WISE:
		/*make the dc motor start in ANTI_CLOCK_WISE  direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN3 , HIGH);
    3b0a:	82 e0       	ldi	r24, 0x02	; 2
    3b0c:	66 e0       	ldi	r22, 0x06	; 6
    3b0e:	41 e0       	ldi	r20, 0x01	; 1
    3b10:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN4 , LOW);
    3b14:	82 e0       	ldi	r24, 0x02	; 2
    3b16:	67 e0       	ldi	r22, 0x07	; 7
    3b18:	40 e0       	ldi	r20, 0x00	; 0
    3b1a:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		break;
	}
}
    3b1e:	0f 90       	pop	r0
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	cf 91       	pop	r28
    3b26:	df 91       	pop	r29
    3b28:	08 95       	ret

00003b2a <IR_Init>:

/* Own Driver Files*/
#include "../MCAL_DRIVERS/DIO_interface.h"
#include "IR_Interface.h"

void IR_Init(){
    3b2a:	df 93       	push	r29
    3b2c:	cf 93       	push	r28
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(IR_PORT_1,IR_PIN_LEFT,LOW);
    3b32:	82 e0       	ldi	r24, 0x02	; 2
    3b34:	60 e0       	ldi	r22, 0x00	; 0
    3b36:	40 e0       	ldi	r20, 0x00	; 0
    3b38:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(IR_PORT_2,IR_PIN_RIGHT,LOW);
    3b3c:	83 e0       	ldi	r24, 0x03	; 3
    3b3e:	63 e0       	ldi	r22, 0x03	; 3
    3b40:	40 e0       	ldi	r20, 0x00	; 0
    3b42:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
}
    3b46:	cf 91       	pop	r28
    3b48:	df 91       	pop	r29
    3b4a:	08 95       	ret

00003b4c <SERVO_VidInitOCR1A>:
#include "Servo_Inteface.h"
#include "Servo_Private.h"


void SERVO_VidInitOCR1A(void)
{
    3b4c:	df 93       	push	r29
    3b4e:	cf 93       	push	r28
    3b50:	cd b7       	in	r28, 0x3d	; 61
    3b52:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(3,5,1);
    3b54:	83 e0       	ldi	r24, 0x03	; 3
    3b56:	65 e0       	ldi	r22, 0x05	; 5
    3b58:	41 e0       	ldi	r20, 0x01	; 1
    3b5a:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	TIMER1_VidInitializeMode15(FAST_PWM_ICR1,CLEAR,Normal);
    3b5e:	8e e0       	ldi	r24, 0x0E	; 14
    3b60:	62 e0       	ldi	r22, 0x02	; 2
    3b62:	40 e0       	ldi	r20, 0x00	; 0
    3b64:	0e 94 00 13 	call	0x2600	; 0x2600 <TIMER1_VidInitializeMode15>
}
    3b68:	cf 91       	pop	r28
    3b6a:	df 91       	pop	r29
    3b6c:	08 95       	ret

00003b6e <SERVO_VidInitOCR1B>:


void SERVO_VidInitOCR1B(void)
{
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(3,4,1);
    3b76:	83 e0       	ldi	r24, 0x03	; 3
    3b78:	64 e0       	ldi	r22, 0x04	; 4
    3b7a:	41 e0       	ldi	r20, 0x01	; 1
    3b7c:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	TIMER1_VidInitializeMode15(FAST_PWM_OCR1A,Normal,CLEAR);
    3b80:	8f e0       	ldi	r24, 0x0F	; 15
    3b82:	60 e0       	ldi	r22, 0x00	; 0
    3b84:	42 e0       	ldi	r20, 0x02	; 2
    3b86:	0e 94 00 13 	call	0x2600	; 0x2600 <TIMER1_VidInitializeMode15>
}
    3b8a:	cf 91       	pop	r28
    3b8c:	df 91       	pop	r29
    3b8e:	08 95       	ret

00003b90 <ServoSetAngleOCR1A>:

void ServoSetAngleOCR1A(u32 Angle)
{
    3b90:	df 93       	push	r29
    3b92:	cf 93       	push	r28
    3b94:	00 d0       	rcall	.+0      	; 0x3b96 <ServoSetAngleOCR1A+0x6>
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	9a 83       	std	Y+2, r25	; 0x02
    3b9c:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_VidSetICR1(Startup);
    3b9e:	8f e1       	ldi	r24, 0x1F	; 31
    3ba0:	9e e4       	ldi	r25, 0x4E	; 78
    3ba2:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <TIMER1_VidSetICR1>
	TIMER1_VidSetOCR1A(Angle);
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    3baa:	0e 94 2e 14 	call	0x285c	; 0x285c <TIMER1_VidSetOCR1A>
}
    3bae:	0f 90       	pop	r0
    3bb0:	0f 90       	pop	r0
    3bb2:	cf 91       	pop	r28
    3bb4:	df 91       	pop	r29
    3bb6:	08 95       	ret

00003bb8 <ServoSetAngleOCR1B>:



void ServoSetAngleOCR1B(u32 Angle)
{
    3bb8:	df 93       	push	r29
    3bba:	cf 93       	push	r28
    3bbc:	00 d0       	rcall	.+0      	; 0x3bbe <ServoSetAngleOCR1B+0x6>
    3bbe:	cd b7       	in	r28, 0x3d	; 61
    3bc0:	de b7       	in	r29, 0x3e	; 62
    3bc2:	9a 83       	std	Y+2, r25	; 0x02
    3bc4:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_VidSetOCR1A(Startup);
    3bc6:	8f e1       	ldi	r24, 0x1F	; 31
    3bc8:	9e e4       	ldi	r25, 0x4E	; 78
    3bca:	0e 94 2e 14 	call	0x285c	; 0x285c <TIMER1_VidSetOCR1A>
	TIMER1_VidSetOCR1B(Angle);
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
    3bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd2:	0e 94 45 14 	call	0x288a	; 0x288a <TIMER1_VidSetOCR1B>
}
    3bd6:	0f 90       	pop	r0
    3bd8:	0f 90       	pop	r0
    3bda:	cf 91       	pop	r28
    3bdc:	df 91       	pop	r29
    3bde:	08 95       	ret

00003be0 <SetAngleOfServo>:
void SetAngleOfServo(u16 InitialAngle , u16 LastAngle ) {
    3be0:	df 93       	push	r29
    3be2:	cf 93       	push	r28
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	a4 97       	sbiw	r28, 0x24	; 36
    3bea:	0f b6       	in	r0, 0x3f	; 63
    3bec:	f8 94       	cli
    3bee:	de bf       	out	0x3e, r29	; 62
    3bf0:	0f be       	out	0x3f, r0	; 63
    3bf2:	cd bf       	out	0x3d, r28	; 61
    3bf4:	9a a3       	std	Y+34, r25	; 0x22
    3bf6:	89 a3       	std	Y+33, r24	; 0x21
    3bf8:	7c a3       	std	Y+36, r23	; 0x24
    3bfa:	6b a3       	std	Y+35, r22	; 0x23

	/* min duty : 400
	   max duty : 2400
	 */

	if (InitialAngle <= LastAngle){
    3bfc:	29 a1       	ldd	r18, Y+33	; 0x21
    3bfe:	3a a1       	ldd	r19, Y+34	; 0x22
    3c00:	8b a1       	ldd	r24, Y+35	; 0x23
    3c02:	9c a1       	ldd	r25, Y+36	; 0x24
    3c04:	82 17       	cp	r24, r18
    3c06:	93 07       	cpc	r25, r19
    3c08:	08 f4       	brcc	.+2      	; 0x3c0c <SetAngleOfServo+0x2c>
    3c0a:	89 c0       	rjmp	.+274    	; 0x3d1e <SetAngleOfServo+0x13e>

		for (u16 i = InitialAngle ; i < LastAngle ; i+=5 ){
    3c0c:	89 a1       	ldd	r24, Y+33	; 0x21
    3c0e:	9a a1       	ldd	r25, Y+34	; 0x22
    3c10:	98 a3       	std	Y+32, r25	; 0x20
    3c12:	8f 8f       	std	Y+31, r24	; 0x1f
    3c14:	7b c0       	rjmp	.+246    	; 0x3d0c <SetAngleOfServo+0x12c>
			ServoSetAngleOCR1B(i);
    3c16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c18:	98 a1       	ldd	r25, Y+32	; 0x20
    3c1a:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <ServoSetAngleOCR1B>
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	a0 e8       	ldi	r26, 0x80	; 128
    3c24:	bf e3       	ldi	r27, 0x3F	; 63
    3c26:	89 8f       	std	Y+25, r24	; 0x19
    3c28:	9a 8f       	std	Y+26, r25	; 0x1a
    3c2a:	ab 8f       	std	Y+27, r26	; 0x1b
    3c2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	4a ef       	ldi	r20, 0xFA	; 250
    3c3c:	54 e4       	ldi	r21, 0x44	; 68
    3c3e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	8d 8b       	std	Y+21, r24	; 0x15
    3c48:	9e 8b       	std	Y+22, r25	; 0x16
    3c4a:	af 8b       	std	Y+23, r26	; 0x17
    3c4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c50:	7e 89       	ldd	r23, Y+22	; 0x16
    3c52:	8f 89       	ldd	r24, Y+23	; 0x17
    3c54:	98 8d       	ldd	r25, Y+24	; 0x18
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e8       	ldi	r20, 0x80	; 128
    3c5c:	5f e3       	ldi	r21, 0x3F	; 63
    3c5e:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    3c62:	88 23       	and	r24, r24
    3c64:	2c f4       	brge	.+10     	; 0x3c70 <SetAngleOfServo+0x90>
		__ticks = 1;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	9c 8b       	std	Y+20, r25	; 0x14
    3c6c:	8b 8b       	std	Y+19, r24	; 0x13
    3c6e:	3f c0       	rjmp	.+126    	; 0x3cee <SetAngleOfServo+0x10e>
	else if (__tmp > 65535)
    3c70:	6d 89       	ldd	r22, Y+21	; 0x15
    3c72:	7e 89       	ldd	r23, Y+22	; 0x16
    3c74:	8f 89       	ldd	r24, Y+23	; 0x17
    3c76:	98 8d       	ldd	r25, Y+24	; 0x18
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	3f ef       	ldi	r19, 0xFF	; 255
    3c7c:	4f e7       	ldi	r20, 0x7F	; 127
    3c7e:	57 e4       	ldi	r21, 0x47	; 71
    3c80:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    3c84:	18 16       	cp	r1, r24
    3c86:	4c f5       	brge	.+82     	; 0x3cda <SetAngleOfServo+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c88:	69 8d       	ldd	r22, Y+25	; 0x19
    3c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	40 e2       	ldi	r20, 0x20	; 32
    3c96:	51 e4       	ldi	r21, 0x41	; 65
    3c98:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	bc 01       	movw	r22, r24
    3ca2:	cd 01       	movw	r24, r26
    3ca4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	9c 8b       	std	Y+20, r25	; 0x14
    3cae:	8b 8b       	std	Y+19, r24	; 0x13
    3cb0:	0f c0       	rjmp	.+30     	; 0x3cd0 <SetAngleOfServo+0xf0>
    3cb2:	88 ec       	ldi	r24, 0xC8	; 200
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	9a 8b       	std	Y+18, r25	; 0x12
    3cb8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cba:	89 89       	ldd	r24, Y+17	; 0x11
    3cbc:	9a 89       	ldd	r25, Y+18	; 0x12
    3cbe:	01 97       	sbiw	r24, 0x01	; 1
    3cc0:	f1 f7       	brne	.-4      	; 0x3cbe <SetAngleOfServo+0xde>
    3cc2:	9a 8b       	std	Y+18, r25	; 0x12
    3cc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    3cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    3cca:	01 97       	sbiw	r24, 0x01	; 1
    3ccc:	9c 8b       	std	Y+20, r25	; 0x14
    3cce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd4:	00 97       	sbiw	r24, 0x00	; 0
    3cd6:	69 f7       	brne	.-38     	; 0x3cb2 <SetAngleOfServo+0xd2>
    3cd8:	14 c0       	rjmp	.+40     	; 0x3d02 <SetAngleOfServo+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cda:	6d 89       	ldd	r22, Y+21	; 0x15
    3cdc:	7e 89       	ldd	r23, Y+22	; 0x16
    3cde:	8f 89       	ldd	r24, Y+23	; 0x17
    3ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ce2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	cb 01       	movw	r24, r22
    3cea:	9c 8b       	std	Y+20, r25	; 0x14
    3cec:	8b 8b       	std	Y+19, r24	; 0x13
    3cee:	8b 89       	ldd	r24, Y+19	; 0x13
    3cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    3cf2:	98 8b       	std	Y+16, r25	; 0x10
    3cf4:	8f 87       	std	Y+15, r24	; 0x0f
    3cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cf8:	98 89       	ldd	r25, Y+16	; 0x10
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	f1 f7       	brne	.-4      	; 0x3cfa <SetAngleOfServo+0x11a>
    3cfe:	98 8b       	std	Y+16, r25	; 0x10
    3d00:	8f 87       	std	Y+15, r24	; 0x0f
	   max duty : 2400
	 */

	if (InitialAngle <= LastAngle){

		for (u16 i = InitialAngle ; i < LastAngle ; i+=5 ){
    3d02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d04:	98 a1       	ldd	r25, Y+32	; 0x20
    3d06:	05 96       	adiw	r24, 0x05	; 5
    3d08:	98 a3       	std	Y+32, r25	; 0x20
    3d0a:	8f 8f       	std	Y+31, r24	; 0x1f
    3d0c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3d0e:	38 a1       	ldd	r19, Y+32	; 0x20
    3d10:	8b a1       	ldd	r24, Y+35	; 0x23
    3d12:	9c a1       	ldd	r25, Y+36	; 0x24
    3d14:	28 17       	cp	r18, r24
    3d16:	39 07       	cpc	r19, r25
    3d18:	08 f4       	brcc	.+2      	; 0x3d1c <SetAngleOfServo+0x13c>
    3d1a:	7d cf       	rjmp	.-262    	; 0x3c16 <SetAngleOfServo+0x36>
    3d1c:	88 c0       	rjmp	.+272    	; 0x3e2e <SetAngleOfServo+0x24e>

	}//end if InitialAngle <= LastAngle

	else {

		for (u16 i = InitialAngle ; i > LastAngle ; i-=5 ){
    3d1e:	89 a1       	ldd	r24, Y+33	; 0x21
    3d20:	9a a1       	ldd	r25, Y+34	; 0x22
    3d22:	9e 8f       	std	Y+30, r25	; 0x1e
    3d24:	8d 8f       	std	Y+29, r24	; 0x1d
    3d26:	7b c0       	rjmp	.+246    	; 0x3e1e <SetAngleOfServo+0x23e>
			ServoSetAngleOCR1B(i);
    3d28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d2c:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <ServoSetAngleOCR1B>
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	a0 e8       	ldi	r26, 0x80	; 128
    3d36:	bf e3       	ldi	r27, 0x3F	; 63
    3d38:	8b 87       	std	Y+11, r24	; 0x0b
    3d3a:	9c 87       	std	Y+12, r25	; 0x0c
    3d3c:	ad 87       	std	Y+13, r26	; 0x0d
    3d3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	4a ef       	ldi	r20, 0xFA	; 250
    3d4e:	54 e4       	ldi	r21, 0x44	; 68
    3d50:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	8f 83       	std	Y+7, r24	; 0x07
    3d5a:	98 87       	std	Y+8, r25	; 0x08
    3d5c:	a9 87       	std	Y+9, r26	; 0x09
    3d5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d60:	6f 81       	ldd	r22, Y+7	; 0x07
    3d62:	78 85       	ldd	r23, Y+8	; 0x08
    3d64:	89 85       	ldd	r24, Y+9	; 0x09
    3d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d68:	20 e0       	ldi	r18, 0x00	; 0
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	40 e8       	ldi	r20, 0x80	; 128
    3d6e:	5f e3       	ldi	r21, 0x3F	; 63
    3d70:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    3d74:	88 23       	and	r24, r24
    3d76:	2c f4       	brge	.+10     	; 0x3d82 <SetAngleOfServo+0x1a2>
		__ticks = 1;
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	9e 83       	std	Y+6, r25	; 0x06
    3d7e:	8d 83       	std	Y+5, r24	; 0x05
    3d80:	3f c0       	rjmp	.+126    	; 0x3e00 <SetAngleOfServo+0x220>
	else if (__tmp > 65535)
    3d82:	6f 81       	ldd	r22, Y+7	; 0x07
    3d84:	78 85       	ldd	r23, Y+8	; 0x08
    3d86:	89 85       	ldd	r24, Y+9	; 0x09
    3d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	3f ef       	ldi	r19, 0xFF	; 255
    3d8e:	4f e7       	ldi	r20, 0x7F	; 127
    3d90:	57 e4       	ldi	r21, 0x47	; 71
    3d92:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    3d96:	18 16       	cp	r1, r24
    3d98:	4c f5       	brge	.+82     	; 0x3dec <SetAngleOfServo+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	40 e2       	ldi	r20, 0x20	; 32
    3da8:	51 e4       	ldi	r21, 0x41	; 65
    3daa:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	bc 01       	movw	r22, r24
    3db4:	cd 01       	movw	r24, r26
    3db6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	9e 83       	std	Y+6, r25	; 0x06
    3dc0:	8d 83       	std	Y+5, r24	; 0x05
    3dc2:	0f c0       	rjmp	.+30     	; 0x3de2 <SetAngleOfServo+0x202>
    3dc4:	88 ec       	ldi	r24, 0xC8	; 200
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	9c 83       	std	Y+4, r25	; 0x04
    3dca:	8b 83       	std	Y+3, r24	; 0x03
    3dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dce:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd0:	01 97       	sbiw	r24, 0x01	; 1
    3dd2:	f1 f7       	brne	.-4      	; 0x3dd0 <SetAngleOfServo+0x1f0>
    3dd4:	9c 83       	std	Y+4, r25	; 0x04
    3dd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dda:	9e 81       	ldd	r25, Y+6	; 0x06
    3ddc:	01 97       	sbiw	r24, 0x01	; 1
    3dde:	9e 83       	std	Y+6, r25	; 0x06
    3de0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de2:	8d 81       	ldd	r24, Y+5	; 0x05
    3de4:	9e 81       	ldd	r25, Y+6	; 0x06
    3de6:	00 97       	sbiw	r24, 0x00	; 0
    3de8:	69 f7       	brne	.-38     	; 0x3dc4 <SetAngleOfServo+0x1e4>
    3dea:	14 c0       	rjmp	.+40     	; 0x3e14 <SetAngleOfServo+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dec:	6f 81       	ldd	r22, Y+7	; 0x07
    3dee:	78 85       	ldd	r23, Y+8	; 0x08
    3df0:	89 85       	ldd	r24, Y+9	; 0x09
    3df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3df8:	dc 01       	movw	r26, r24
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	9e 83       	std	Y+6, r25	; 0x06
    3dfe:	8d 83       	std	Y+5, r24	; 0x05
    3e00:	8d 81       	ldd	r24, Y+5	; 0x05
    3e02:	9e 81       	ldd	r25, Y+6	; 0x06
    3e04:	9a 83       	std	Y+2, r25	; 0x02
    3e06:	89 83       	std	Y+1, r24	; 0x01
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
    3e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0c:	01 97       	sbiw	r24, 0x01	; 1
    3e0e:	f1 f7       	brne	.-4      	; 0x3e0c <SetAngleOfServo+0x22c>
    3e10:	9a 83       	std	Y+2, r25	; 0x02
    3e12:	89 83       	std	Y+1, r24	; 0x01

	}//end if InitialAngle <= LastAngle

	else {

		for (u16 i = InitialAngle ; i > LastAngle ; i-=5 ){
    3e14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e18:	05 97       	sbiw	r24, 0x05	; 5
    3e1a:	9e 8f       	std	Y+30, r25	; 0x1e
    3e1c:	8d 8f       	std	Y+29, r24	; 0x1d
    3e1e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3e20:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3e22:	8b a1       	ldd	r24, Y+35	; 0x23
    3e24:	9c a1       	ldd	r25, Y+36	; 0x24
    3e26:	82 17       	cp	r24, r18
    3e28:	93 07       	cpc	r25, r19
    3e2a:	08 f4       	brcc	.+2      	; 0x3e2e <SetAngleOfServo+0x24e>
    3e2c:	7d cf       	rjmp	.-262    	; 0x3d28 <SetAngleOfServo+0x148>
			ServoSetAngleOCR1B(i);
			_delay_ms(1);
		}//end for loop

	}//end else
}
    3e2e:	a4 96       	adiw	r28, 0x24	; 36
    3e30:	0f b6       	in	r0, 0x3f	; 63
    3e32:	f8 94       	cli
    3e34:	de bf       	out	0x3e, r29	; 62
    3e36:	0f be       	out	0x3f, r0	; 63
    3e38:	cd bf       	out	0x3d, r28	; 61
    3e3a:	cf 91       	pop	r28
    3e3c:	df 91       	pop	r29
    3e3e:	08 95       	ret

00003e40 <Ultrasonic_edgeProcessing>:
/*
 * Description :
 * Call-Back Function used to calculate g_timeHigh for the Ultrasonic pulse
 */
static void Ultrasonic_edgeProcessing(void)
{
    3e40:	df 93       	push	r29
    3e42:	cf 93       	push	r28
    3e44:	cd b7       	in	r28, 0x3d	; 61
    3e46:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    3e48:	80 91 a2 01 	lds	r24, 0x01A2
    3e4c:	8f 5f       	subi	r24, 0xFF	; 255
    3e4e:	80 93 a2 01 	sts	0x01A2, r24

	if(g_edgeCount == 1)
    3e52:	80 91 a2 01 	lds	r24, 0x01A2
    3e56:	81 30       	cpi	r24, 0x01	; 1
    3e58:	31 f4       	brne	.+12     	; 0x3e66 <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Timer1Icu_clearTimerValue();
    3e5a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <Timer1Icu_clearTimerValue>

		/* Detect falling edge */
		Timer1Icu_setEdgeDetectionType(FALLING);
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	0e 94 c0 14 	call	0x2980	; 0x2980 <Timer1Icu_setEdgeDetectionType>
    3e64:	0d c0       	rjmp	.+26     	; 0x3e80 <Ultrasonic_edgeProcessing+0x40>
	}
	else if(g_edgeCount == 2)
    3e66:	80 91 a2 01 	lds	r24, 0x01A2
    3e6a:	82 30       	cpi	r24, 0x02	; 2
    3e6c:	49 f4       	brne	.+18     	; 0x3e80 <Ultrasonic_edgeProcessing+0x40>
	{
		/* Store the High time value */
		g_timeHigh = Timer1Icu_getInputCaptureValue();
    3e6e:	0e 94 df 14 	call	0x29be	; 0x29be <Timer1Icu_getInputCaptureValue>
    3e72:	90 93 a4 01 	sts	0x01A4, r25
    3e76:	80 93 a3 01 	sts	0x01A3, r24

		/* Detect rising edge */
		Timer1Icu_setEdgeDetectionType(RISING);
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	0e 94 c0 14 	call	0x2980	; 0x2980 <Timer1Icu_setEdgeDetectionType>
	}
}
    3e80:	cf 91       	pop	r28
    3e82:	df 91       	pop	r29
    3e84:	08 95       	ret

00003e86 <Ultrasonic_Trigger>:
/*
 * Description :
 * Function send trigger pulse for Ultrasonic sensor to start measurements
 */
static void Ultrasonic_Trigger(void)
{
    3e86:	df 93       	push	r29
    3e88:	cf 93       	push	r28
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    3e8e:	68 97       	sbiw	r28, 0x18	; 24
    3e90:	0f b6       	in	r0, 0x3f	; 63
    3e92:	f8 94       	cli
    3e94:	de bf       	out	0x3e, r29	; 62
    3e96:	0f be       	out	0x3f, r0	; 63
    3e98:	cd bf       	out	0x3d, r28	; 61
	/* Send the Trigger pulse */
	DIO_VidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,1);
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	65 e0       	ldi	r22, 0x05	; 5
    3e9e:	41 e0       	ldi	r20, 0x01	; 1
    3ea0:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	a0 e2       	ldi	r26, 0x20	; 32
    3eaa:	b1 e4       	ldi	r27, 0x41	; 65
    3eac:	8d 8b       	std	Y+21, r24	; 0x15
    3eae:	9e 8b       	std	Y+22, r25	; 0x16
    3eb0:	af 8b       	std	Y+23, r26	; 0x17
    3eb2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    3eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    3eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    3eba:	98 8d       	ldd	r25, Y+24	; 0x18
    3ebc:	2b ea       	ldi	r18, 0xAB	; 171
    3ebe:	3a ea       	ldi	r19, 0xAA	; 170
    3ec0:	4a e2       	ldi	r20, 0x2A	; 42
    3ec2:	50 e4       	ldi	r21, 0x40	; 64
    3ec4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	89 8b       	std	Y+17, r24	; 0x11
    3ece:	9a 8b       	std	Y+18, r25	; 0x12
    3ed0:	ab 8b       	std	Y+19, r26	; 0x13
    3ed2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3ed4:	69 89       	ldd	r22, Y+17	; 0x11
    3ed6:	7a 89       	ldd	r23, Y+18	; 0x12
    3ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    3eda:	9c 89       	ldd	r25, Y+20	; 0x14
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	40 e8       	ldi	r20, 0x80	; 128
    3ee2:	5f e3       	ldi	r21, 0x3F	; 63
    3ee4:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    3ee8:	88 23       	and	r24, r24
    3eea:	1c f4       	brge	.+6      	; 0x3ef2 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	88 8b       	std	Y+16, r24	; 0x10
    3ef0:	91 c0       	rjmp	.+290    	; 0x4014 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    3ef2:	69 89       	ldd	r22, Y+17	; 0x11
    3ef4:	7a 89       	ldd	r23, Y+18	; 0x12
    3ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	4f e7       	ldi	r20, 0x7F	; 127
    3f00:	53 e4       	ldi	r21, 0x43	; 67
    3f02:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    3f06:	18 16       	cp	r1, r24
    3f08:	0c f0       	brlt	.+2      	; 0x3f0c <Ultrasonic_Trigger+0x86>
    3f0a:	7b c0       	rjmp	.+246    	; 0x4002 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    3f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    3f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    3f10:	8f 89       	ldd	r24, Y+23	; 0x17
    3f12:	98 8d       	ldd	r25, Y+24	; 0x18
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	4a e7       	ldi	r20, 0x7A	; 122
    3f1a:	54 e4       	ldi	r21, 0x44	; 68
    3f1c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    3f20:	dc 01       	movw	r26, r24
    3f22:	cb 01       	movw	r24, r22
    3f24:	8c 87       	std	Y+12, r24	; 0x0c
    3f26:	9d 87       	std	Y+13, r25	; 0x0d
    3f28:	ae 87       	std	Y+14, r26	; 0x0e
    3f2a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f2c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f2e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3f30:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f32:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f34:	20 e0       	ldi	r18, 0x00	; 0
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	4a ef       	ldi	r20, 0xFA	; 250
    3f3a:	54 e4       	ldi	r21, 0x44	; 68
    3f3c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3f40:	dc 01       	movw	r26, r24
    3f42:	cb 01       	movw	r24, r22
    3f44:	88 87       	std	Y+8, r24	; 0x08
    3f46:	99 87       	std	Y+9, r25	; 0x09
    3f48:	aa 87       	std	Y+10, r26	; 0x0a
    3f4a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3f4c:	68 85       	ldd	r22, Y+8	; 0x08
    3f4e:	79 85       	ldd	r23, Y+9	; 0x09
    3f50:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f52:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	40 e8       	ldi	r20, 0x80	; 128
    3f5a:	5f e3       	ldi	r21, 0x3F	; 63
    3f5c:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    3f60:	88 23       	and	r24, r24
    3f62:	2c f4       	brge	.+10     	; 0x3f6e <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	9f 83       	std	Y+7, r25	; 0x07
    3f6a:	8e 83       	std	Y+6, r24	; 0x06
    3f6c:	3f c0       	rjmp	.+126    	; 0x3fec <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    3f6e:	68 85       	ldd	r22, Y+8	; 0x08
    3f70:	79 85       	ldd	r23, Y+9	; 0x09
    3f72:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f74:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	3f ef       	ldi	r19, 0xFF	; 255
    3f7a:	4f e7       	ldi	r20, 0x7F	; 127
    3f7c:	57 e4       	ldi	r21, 0x47	; 71
    3f7e:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    3f82:	18 16       	cp	r1, r24
    3f84:	4c f5       	brge	.+82     	; 0x3fd8 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f86:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f88:	7d 85       	ldd	r23, Y+13	; 0x0d
    3f8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	40 e2       	ldi	r20, 0x20	; 32
    3f94:	51 e4       	ldi	r21, 0x41	; 65
    3f96:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	cb 01       	movw	r24, r22
    3f9e:	bc 01       	movw	r22, r24
    3fa0:	cd 01       	movw	r24, r26
    3fa2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3fa6:	dc 01       	movw	r26, r24
    3fa8:	cb 01       	movw	r24, r22
    3faa:	9f 83       	std	Y+7, r25	; 0x07
    3fac:	8e 83       	std	Y+6, r24	; 0x06
    3fae:	0f c0       	rjmp	.+30     	; 0x3fce <Ultrasonic_Trigger+0x148>
    3fb0:	88 ec       	ldi	r24, 0xC8	; 200
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	9d 83       	std	Y+5, r25	; 0x05
    3fb6:	8c 83       	std	Y+4, r24	; 0x04
    3fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    3fba:	9d 81       	ldd	r25, Y+5	; 0x05
    3fbc:	01 97       	sbiw	r24, 0x01	; 1
    3fbe:	f1 f7       	brne	.-4      	; 0x3fbc <Ultrasonic_Trigger+0x136>
    3fc0:	9d 83       	std	Y+5, r25	; 0x05
    3fc2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc4:	8e 81       	ldd	r24, Y+6	; 0x06
    3fc6:	9f 81       	ldd	r25, Y+7	; 0x07
    3fc8:	01 97       	sbiw	r24, 0x01	; 1
    3fca:	9f 83       	std	Y+7, r25	; 0x07
    3fcc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fce:	8e 81       	ldd	r24, Y+6	; 0x06
    3fd0:	9f 81       	ldd	r25, Y+7	; 0x07
    3fd2:	00 97       	sbiw	r24, 0x00	; 0
    3fd4:	69 f7       	brne	.-38     	; 0x3fb0 <Ultrasonic_Trigger+0x12a>
    3fd6:	24 c0       	rjmp	.+72     	; 0x4020 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd8:	68 85       	ldd	r22, Y+8	; 0x08
    3fda:	79 85       	ldd	r23, Y+9	; 0x09
    3fdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fde:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fe0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	9f 83       	std	Y+7, r25	; 0x07
    3fea:	8e 83       	std	Y+6, r24	; 0x06
    3fec:	8e 81       	ldd	r24, Y+6	; 0x06
    3fee:	9f 81       	ldd	r25, Y+7	; 0x07
    3ff0:	9b 83       	std	Y+3, r25	; 0x03
    3ff2:	8a 83       	std	Y+2, r24	; 0x02
    3ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff8:	01 97       	sbiw	r24, 0x01	; 1
    3ffa:	f1 f7       	brne	.-4      	; 0x3ff8 <Ultrasonic_Trigger+0x172>
    3ffc:	9b 83       	std	Y+3, r25	; 0x03
    3ffe:	8a 83       	std	Y+2, r24	; 0x02
    4000:	0f c0       	rjmp	.+30     	; 0x4020 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4002:	69 89       	ldd	r22, Y+17	; 0x11
    4004:	7a 89       	ldd	r23, Y+18	; 0x12
    4006:	8b 89       	ldd	r24, Y+19	; 0x13
    4008:	9c 89       	ldd	r25, Y+20	; 0x14
    400a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	88 8b       	std	Y+16, r24	; 0x10
    4014:	88 89       	ldd	r24, Y+16	; 0x10
    4016:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	8a 95       	dec	r24
    401c:	f1 f7       	brne	.-4      	; 0x401a <Ultrasonic_Trigger+0x194>
    401e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_VidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,0);
    4020:	81 e0       	ldi	r24, 0x01	; 1
    4022:	65 e0       	ldi	r22, 0x05	; 5
    4024:	40 e0       	ldi	r20, 0x00	; 0
    4026:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
}
    402a:	68 96       	adiw	r28, 0x18	; 24
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	f8 94       	cli
    4030:	de bf       	out	0x3e, r29	; 62
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	cd bf       	out	0x3d, r28	; 61
    4036:	cf 91       	pop	r28
    4038:	df 91       	pop	r29
    403a:	08 95       	ret

0000403c <Ultrasonic_init>:
 * Initialize the Ultrasonic driver by:
 * 1. Initialize the Trigger pin direction
 * 2. Initialize the ICU driver and Its Call back function.
 */
void Ultrasonic_init(void)
{
    403c:	df 93       	push	r29
    403e:	cf 93       	push	r28
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62
	GIE_VidEnable();
    4044:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <GIE_VidEnable>
	Timer1Icu_init();
    4048:	0e 94 73 14 	call	0x28e6	; 0x28e6 <Timer1Icu_init>
	DIO_VidSetPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,1);
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	65 e0       	ldi	r22, 0x05	; 5
    4050:	41 e0       	ldi	r20, 0x01	; 1
    4052:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	Timer1Icu_setCallBack( &Ultrasonic_edgeProcessing );
    4056:	80 e2       	ldi	r24, 0x20	; 32
    4058:	9f e1       	ldi	r25, 0x1F	; 31
    405a:	0e 94 ae 14 	call	0x295c	; 0x295c <Timer1Icu_setCallBack>
}
    405e:	cf 91       	pop	r28
    4060:	df 91       	pop	r29
    4062:	08 95       	ret

00004064 <Ultrasonic_readDistance>:
 * 3. Send the Trigger to the Ultrasonic by call Ultrasonic_Trigger function
 * 4. Wait for the measurements to be done by the ICU. We need two edges raising and falling.
 * 5. Calculate the distance in Centimeter value.
 */
u16 Ultrasonic_readDistance(void)
{
    4064:	df 93       	push	r29
    4066:	cf 93       	push	r28
    4068:	cd b7       	in	r28, 0x3d	; 61
    406a:	de b7       	in	r29, 0x3e	; 62
	/* Clear all variables as they may have values from previous read operation */
	g_distance  = 0;
    406c:	10 92 a5 01 	sts	0x01A5, r1
	g_edgeCount = 0;
    4070:	10 92 a2 01 	sts	0x01A2, r1
	g_timeHigh  = 0;
    4074:	10 92 a4 01 	sts	0x01A4, r1
    4078:	10 92 a3 01 	sts	0x01A3, r1

	/* Clear the timer counter register to start measurements once trigger is sent */
	Timer1Icu_clearTimerValue();
    407c:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <Timer1Icu_clearTimerValue>

	/* Send the trigger to activate the Ultra-sonic sensor (Start measurements) */
	Ultrasonic_Trigger();
    4080:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <Ultrasonic_Trigger>

	/* Wait until the ICU measures the pulse in the ECHO pin */
	while(g_edgeCount != ULTRASONIC_NUM_OF_DETECTED_EDGES);
    4084:	80 91 a2 01 	lds	r24, 0x01A2
    4088:	82 30       	cpi	r24, 0x02	; 2
    408a:	e1 f7       	brne	.-8      	; 0x4084 <Ultrasonic_readDistance+0x20>

	/* Calculate the distance in Centimeter value */
	g_distance = g_timeHigh / 58;
    408c:	80 91 a3 01 	lds	r24, 0x01A3
    4090:	90 91 a4 01 	lds	r25, 0x01A4
    4094:	2a e3       	ldi	r18, 0x3A	; 58
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	b9 01       	movw	r22, r18
    409a:	0e 94 09 2c 	call	0x5812	; 0x5812 <__udivmodhi4>
    409e:	cb 01       	movw	r24, r22
    40a0:	80 93 a5 01 	sts	0x01A5, r24

	return g_distance;
    40a4:	80 91 a5 01 	lds	r24, 0x01A5
    40a8:	88 2f       	mov	r24, r24
    40aa:	90 e0       	ldi	r25, 0x00	; 0
}
    40ac:	cf 91       	pop	r28
    40ae:	df 91       	pop	r29
    40b0:	08 95       	ret

000040b2 <MultipleTasksCar_VidInit>:
 Name        : MultipleTasksCar_VidInit
 Input       : void
 Output      : void
 Description : to initialize the states of the car
*/
void MultipleTasksCar_VidInit(){
    40b2:	df 93       	push	r29
    40b4:	cf 93       	push	r28
    40b6:	cd b7       	in	r28, 0x3d	; 61
    40b8:	de b7       	in	r29, 0x3e	; 62
	/*****************************************/
	BluetoothInit();
    40ba:	0e 94 91 1c 	call	0x3922	; 0x3922 <BluetoothInit>
	DcMotor_VidInit();
    40be:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <DcMotor_VidInit>
	IR_Init();
    40c2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <IR_Init>
	SERVO_VidInitOCR1B();
    40c6:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <SERVO_VidInitOCR1B>
	Ultrasonic_init();
    40ca:	0e 94 1e 20 	call	0x403c	; 0x403c <Ultrasonic_init>

	/* Global Interrupt Enable */
	GIE_VidEnable();
    40ce:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <GIE_VidEnable>
}
    40d2:	cf 91       	pop	r28
    40d4:	df 91       	pop	r29
    40d6:	08 95       	ret

000040d8 <MultipleTasksCar_SetCarVelocity>:
 Name        : MultipleTasksCar_SetCarVelocity
 Input       : u8
 Output      : void
 Description : to set the number velocity of car
*/
void MultipleTasksCar_SetCarVelocity (u8 VelocityPercentage){
    40d8:	df 93       	push	r29
    40da:	cf 93       	push	r28
    40dc:	00 d0       	rcall	.+0      	; 0x40de <MultipleTasksCar_SetCarVelocity+0x6>
    40de:	0f 92       	push	r0
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	89 83       	std	Y+1, r24	; 0x01
	switch (VelocityPercentage){
    40e6:	89 81       	ldd	r24, Y+1	; 0x01
    40e8:	28 2f       	mov	r18, r24
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	3b 83       	std	Y+3, r19	; 0x03
    40ee:	2a 83       	std	Y+2, r18	; 0x02
    40f0:	8a 81       	ldd	r24, Y+2	; 0x02
    40f2:	9b 81       	ldd	r25, Y+3	; 0x03
    40f4:	82 33       	cpi	r24, 0x32	; 50
    40f6:	91 05       	cpc	r25, r1
    40f8:	d1 f0       	breq	.+52     	; 0x412e <MultipleTasksCar_SetCarVelocity+0x56>
    40fa:	2a 81       	ldd	r18, Y+2	; 0x02
    40fc:	3b 81       	ldd	r19, Y+3	; 0x03
    40fe:	23 33       	cpi	r18, 0x33	; 51
    4100:	31 05       	cpc	r19, r1
    4102:	34 f4       	brge	.+12     	; 0x4110 <MultipleTasksCar_SetCarVelocity+0x38>
    4104:	8a 81       	ldd	r24, Y+2	; 0x02
    4106:	9b 81       	ldd	r25, Y+3	; 0x03
    4108:	81 33       	cpi	r24, 0x31	; 49
    410a:	91 05       	cpc	r25, r1
    410c:	61 f0       	breq	.+24     	; 0x4126 <MultipleTasksCar_SetCarVelocity+0x4e>
    410e:	1a c0       	rjmp	.+52     	; 0x4144 <MultipleTasksCar_SetCarVelocity+0x6c>
    4110:	2a 81       	ldd	r18, Y+2	; 0x02
    4112:	3b 81       	ldd	r19, Y+3	; 0x03
    4114:	23 33       	cpi	r18, 0x33	; 51
    4116:	31 05       	cpc	r19, r1
    4118:	71 f0       	breq	.+28     	; 0x4136 <MultipleTasksCar_SetCarVelocity+0x5e>
    411a:	8a 81       	ldd	r24, Y+2	; 0x02
    411c:	9b 81       	ldd	r25, Y+3	; 0x03
    411e:	84 33       	cpi	r24, 0x34	; 52
    4120:	91 05       	cpc	r25, r1
    4122:	69 f0       	breq	.+26     	; 0x413e <MultipleTasksCar_SetCarVelocity+0x66>
    4124:	0f c0       	rjmp	.+30     	; 0x4144 <MultipleTasksCar_SetCarVelocity+0x6c>
	case '1' :	MultipleTasksCar_DCMotorVelocity(QUARTER_PERCENTAGE);         break ;
    4126:	89 e1       	ldi	r24, 0x19	; 25
    4128:	0e 94 fe 20 	call	0x41fc	; 0x41fc <MultipleTasksCar_DCMotorVelocity>
    412c:	0b c0       	rjmp	.+22     	; 0x4144 <MultipleTasksCar_SetCarVelocity+0x6c>
	case '2' : 	MultipleTasksCar_DCMotorVelocity(HALF_PERCENTAGE);            break ;
    412e:	82 e3       	ldi	r24, 0x32	; 50
    4130:	0e 94 fe 20 	call	0x41fc	; 0x41fc <MultipleTasksCar_DCMotorVelocity>
    4134:	07 c0       	rjmp	.+14     	; 0x4144 <MultipleTasksCar_SetCarVelocity+0x6c>
	case '3' :  MultipleTasksCar_DCMotorVelocity(THREE_QUARTER_PERCENTAGE);   break ;
    4136:	8b e4       	ldi	r24, 0x4B	; 75
    4138:	0e 94 fe 20 	call	0x41fc	; 0x41fc <MultipleTasksCar_DCMotorVelocity>
    413c:	03 c0       	rjmp	.+6      	; 0x4144 <MultipleTasksCar_SetCarVelocity+0x6c>
	case '4' :  MultipleTasksCar_DCMotorVelocity(FULL_PERCENTAGE);            break ;
    413e:	84 e6       	ldi	r24, 0x64	; 100
    4140:	0e 94 fe 20 	call	0x41fc	; 0x41fc <MultipleTasksCar_DCMotorVelocity>
	}
}
    4144:	0f 90       	pop	r0
    4146:	0f 90       	pop	r0
    4148:	0f 90       	pop	r0
    414a:	cf 91       	pop	r28
    414c:	df 91       	pop	r29
    414e:	08 95       	ret

00004150 <MultipleTasksCar_GetDirections>:
 Description : to set the directions of the car
 steps       : determine derctions by press numbers that u wanted
               up ^    down ^'   right >    left <    stop 'select'

*/
void MultipleTasksCar_GetDirections(){
    4150:	df 93       	push	r29
    4152:	cf 93       	push	r28
    4154:	00 d0       	rcall	.+0      	; 0x4156 <MultipleTasksCar_GetDirections+0x6>
    4156:	0f 92       	push	r0
    4158:	cd b7       	in	r28, 0x3d	; 61
    415a:	de b7       	in	r29, 0x3e	; 62
	/*Take direction*/
	 u8 direction = Bluetooth_U32Getnumber() ;
    415c:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Bluetooth_U32Getnumber>
    4160:	89 83       	std	Y+1, r24	; 0x01

	 /*Act accroding to direction*/
	 switch (direction){
    4162:	89 81       	ldd	r24, Y+1	; 0x01
    4164:	28 2f       	mov	r18, r24
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	3b 83       	std	Y+3, r19	; 0x03
    416a:	2a 83       	std	Y+2, r18	; 0x02
    416c:	8a 81       	ldd	r24, Y+2	; 0x02
    416e:	9b 81       	ldd	r25, Y+3	; 0x03
    4170:	83 36       	cpi	r24, 0x63	; 99
    4172:	91 05       	cpc	r25, r1
    4174:	49 f1       	breq	.+82     	; 0x41c8 <MultipleTasksCar_GetDirections+0x78>
    4176:	2a 81       	ldd	r18, Y+2	; 0x02
    4178:	3b 81       	ldd	r19, Y+3	; 0x03
    417a:	24 36       	cpi	r18, 0x64	; 100
    417c:	31 05       	cpc	r19, r1
    417e:	5c f4       	brge	.+22     	; 0x4196 <MultipleTasksCar_GetDirections+0x46>
    4180:	8a 81       	ldd	r24, Y+2	; 0x02
    4182:	9b 81       	ldd	r25, Y+3	; 0x03
    4184:	81 36       	cpi	r24, 0x61	; 97
    4186:	91 05       	cpc	r25, r1
    4188:	89 f0       	breq	.+34     	; 0x41ac <MultipleTasksCar_GetDirections+0x5c>
    418a:	2a 81       	ldd	r18, Y+2	; 0x02
    418c:	3b 81       	ldd	r19, Y+3	; 0x03
    418e:	22 36       	cpi	r18, 0x62	; 98
    4190:	31 05       	cpc	r19, r1
    4192:	99 f0       	breq	.+38     	; 0x41ba <MultipleTasksCar_GetDirections+0x6a>
    4194:	2d c0       	rjmp	.+90     	; 0x41f0 <MultipleTasksCar_GetDirections+0xa0>
    4196:	8a 81       	ldd	r24, Y+2	; 0x02
    4198:	9b 81       	ldd	r25, Y+3	; 0x03
    419a:	84 36       	cpi	r24, 0x64	; 100
    419c:	91 05       	cpc	r25, r1
    419e:	d9 f0       	breq	.+54     	; 0x41d6 <MultipleTasksCar_GetDirections+0x86>
    41a0:	2a 81       	ldd	r18, Y+2	; 0x02
    41a2:	3b 81       	ldd	r19, Y+3	; 0x03
    41a4:	25 36       	cpi	r18, 0x65	; 101
    41a6:	31 05       	cpc	r19, r1
    41a8:	e9 f0       	breq	.+58     	; 0x41e4 <MultipleTasksCar_GetDirections+0x94>
    41aa:	22 c0       	rjmp	.+68     	; 0x41f0 <MultipleTasksCar_GetDirections+0xa0>
		 case UP :
				DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    41ac:	82 e0       	ldi	r24, 0x02	; 2
    41ae:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
				DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    41b2:	82 e0       	ldi	r24, 0x02	; 2
    41b4:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    41b8:	1b c0       	rjmp	.+54     	; 0x41f0 <MultipleTasksCar_GetDirections+0xa0>
				break ;
		 case DOWN :
				DcMotor_VidRotate_Wheels1(CLK_WISE);
    41ba:	81 e0       	ldi	r24, 0x01	; 1
    41bc:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
				DcMotor_VidRotate_Wheels2(CLK_WISE);
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    41c6:	14 c0       	rjmp	.+40     	; 0x41f0 <MultipleTasksCar_GetDirections+0xa0>
				break ;
		 case RIGHT :
				DcMotor_VidRotate_Wheels1(STOP);
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
				DcMotor_VidRotate_Wheels2(CLK_WISE);
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    41d4:	0d c0       	rjmp	.+26     	; 0x41f0 <MultipleTasksCar_GetDirections+0xa0>
				break ;
		 case LEFT :
				DcMotor_VidRotate_Wheels1(CLK_WISE);
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
				DcMotor_VidRotate_Wheels2(STOP);
    41dc:	80 e0       	ldi	r24, 0x00	; 0
    41de:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    41e2:	06 c0       	rjmp	.+12     	; 0x41f0 <MultipleTasksCar_GetDirections+0xa0>
				break ;
		 case NO_THING :
				DcMotor_VidRotate_Wheels1(STOP);
    41e4:	80 e0       	ldi	r24, 0x00	; 0
    41e6:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
				DcMotor_VidRotate_Wheels2(STOP);
    41ea:	80 e0       	ldi	r24, 0x00	; 0
    41ec:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
				break ;
     }//end switch
}
    41f0:	0f 90       	pop	r0
    41f2:	0f 90       	pop	r0
    41f4:	0f 90       	pop	r0
    41f6:	cf 91       	pop	r28
    41f8:	df 91       	pop	r29
    41fa:	08 95       	ret

000041fc <MultipleTasksCar_DCMotorVelocity>:
 Name        : MultipleTasksCar_DCMotorVelocity
 Input       : void
 Output      : void
 Description : to set the percentage of the velocity of car
*/
void MultipleTasksCar_DCMotorVelocity(u8 CopyVelocityPercentage){
    41fc:	df 93       	push	r29
    41fe:	cf 93       	push	r28
    4200:	0f 92       	push	r0
    4202:	cd b7       	in	r28, 0x3d	; 61
    4204:	de b7       	in	r29, 0x3e	; 62
    4206:	89 83       	std	Y+1, r24	; 0x01
	Timer2_VidSETDUTY(CopyVelocityPercentage);
    4208:	89 81       	ldd	r24, Y+1	; 0x01
    420a:	0e 94 3d 1a 	call	0x347a	; 0x347a <Timer2_VidSETDUTY>
}
    420e:	0f 90       	pop	r0
    4210:	cf 91       	pop	r28
    4212:	df 91       	pop	r29
    4214:	08 95       	ret

00004216 <MultipleTasksCar_GetMode>:
 Name        : MultipleTasksCar_GetMode
 Input       : void
 Output      : u8
 Description : to return the type of mode
*/
u8   MultipleTasksCar_GetMode(){
    4216:	df 93       	push	r29
    4218:	cf 93       	push	r28
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
	return Bluetooth_U32Getnumber() ;
    421e:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Bluetooth_U32Getnumber>
}
    4222:	cf 91       	pop	r28
    4224:	df 91       	pop	r29
    4226:	08 95       	ret

00004228 <MultipleTasksCar_LineFollower>:
 Name        : MultipleTasksCar_LineFollower
 Input       : void
 Output      : void
 Description : to Follow the black line
*/
void MultipleTasksCar_LineFollower(){
    4228:	df 93       	push	r29
    422a:	cf 93       	push	r28
    422c:	00 d0       	rcall	.+0      	; 0x422e <MultipleTasksCar_LineFollower+0x6>
    422e:	cd b7       	in	r28, 0x3d	; 61
    4230:	de b7       	in	r29, 0x3e	; 62
	/* To detect black line */
    u8 IRRight   = DIO_U8GetPinValue(IR_PORT_2,IR_PIN_RIGHT);
    4232:	83 e0       	ldi	r24, 0x03	; 3
    4234:	63 e0       	ldi	r22, 0x03	; 3
    4236:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_U8GetPinValue>
    423a:	8a 83       	std	Y+2, r24	; 0x02
    u8 IRLeft    = DIO_U8GetPinValue(IR_PORT_1,IR_PIN_LEFT);
    423c:	82 e0       	ldi	r24, 0x02	; 2
    423e:	60 e0       	ldi	r22, 0x00	; 0
    4240:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_U8GetPinValue>
    4244:	89 83       	std	Y+1, r24	; 0x01

	 if (! IRRight && ! IRLeft){
    4246:	8a 81       	ldd	r24, Y+2	; 0x02
    4248:	88 23       	and	r24, r24
    424a:	51 f4       	brne	.+20     	; 0x4260 <MultipleTasksCar_LineFollower+0x38>
    424c:	89 81       	ldd	r24, Y+1	; 0x01
    424e:	88 23       	and	r24, r24
    4250:	39 f4       	brne	.+14     	; 0x4260 <MultipleTasksCar_LineFollower+0x38>
		DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    4252:	82 e0       	ldi	r24, 0x02	; 2
    4254:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    4258:	82 e0       	ldi	r24, 0x02	; 2
    425a:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    425e:	20 c0       	rjmp	.+64     	; 0x42a0 <MultipleTasksCar_LineFollower+0x78>
	 }
	 else if ( IRRight && ! IRLeft ){
    4260:	8a 81       	ldd	r24, Y+2	; 0x02
    4262:	88 23       	and	r24, r24
    4264:	51 f0       	breq	.+20     	; 0x427a <MultipleTasksCar_LineFollower+0x52>
    4266:	89 81       	ldd	r24, Y+1	; 0x01
    4268:	88 23       	and	r24, r24
    426a:	39 f4       	brne	.+14     	; 0x427a <MultipleTasksCar_LineFollower+0x52>
		DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    426c:	82 e0       	ldi	r24, 0x02	; 2
    426e:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(CLK_WISE);
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    4278:	13 c0       	rjmp	.+38     	; 0x42a0 <MultipleTasksCar_LineFollower+0x78>
	 }
	 else if (! IRRight && IRLeft) {
    427a:	8a 81       	ldd	r24, Y+2	; 0x02
    427c:	88 23       	and	r24, r24
    427e:	51 f4       	brne	.+20     	; 0x4294 <MultipleTasksCar_LineFollower+0x6c>
    4280:	89 81       	ldd	r24, Y+1	; 0x01
    4282:	88 23       	and	r24, r24
    4284:	39 f0       	breq	.+14     	; 0x4294 <MultipleTasksCar_LineFollower+0x6c>
		DcMotor_VidRotate_Wheels1(CLK_WISE);
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    428c:	82 e0       	ldi	r24, 0x02	; 2
    428e:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    4292:	06 c0       	rjmp	.+12     	; 0x42a0 <MultipleTasksCar_LineFollower+0x78>
	 }
	 else {
		DcMotor_VidRotate_Wheels1(STOP);
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(STOP);
    429a:	80 e0       	ldi	r24, 0x00	; 0
    429c:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
	 }
}
    42a0:	0f 90       	pop	r0
    42a2:	0f 90       	pop	r0
    42a4:	cf 91       	pop	r28
    42a6:	df 91       	pop	r29
    42a8:	08 95       	ret

000042aa <MultipleTasksCar_UltraSonic>:
                                   ------an obtacle---->state 3
 state 3 : stop - check on obtacle ------no obtacle---->right , delay , up
                                   ------an obtacle---->stop for 10 seconds then state 1
 state 4 : all directions are blocked ----> stop for 4 seconds
*/
void MultipleTasksCar_UltraSonic(){
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	df 93       	push	r29
    42b0:	cf 93       	push	r28
    42b2:	cd b7       	in	r28, 0x3d	; 61
    42b4:	de b7       	in	r29, 0x3e	; 62
    42b6:	c6 54       	subi	r28, 0x46	; 70
    42b8:	d0 40       	sbci	r29, 0x00	; 0
    42ba:	0f b6       	in	r0, 0x3f	; 63
    42bc:	f8 94       	cli
    42be:	de bf       	out	0x3e, r29	; 62
    42c0:	0f be       	out	0x3f, r0	; 63
    42c2:	cd bf       	out	0x3d, r28	; 61
	/* variable for directions */
    static u16 distance ;

    /* to move in suitable velocity */
    MultipleTasksCar_DCMotorVelocity(HALF_PERCENTAGE);
    42c4:	82 e3       	ldi	r24, 0x32	; 50
    42c6:	0e 94 fe 20 	call	0x41fc	; 0x41fc <MultipleTasksCar_DCMotorVelocity>

	/* to make servo forward */
    ServoSetAngleOCR1B(ANGLE_ZERO);
    42ca:	8c ed       	ldi	r24, 0xDC	; 220
    42cc:	95 e0       	ldi	r25, 0x05	; 5
    42ce:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <ServoSetAngleOCR1B>

	/* to go forward */
    DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    42d2:	82 e0       	ldi	r24, 0x02	; 2
    42d4:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    42d8:	82 e0       	ldi	r24, 0x02	; 2
    42da:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>

	/* to trig ultrasonic pin and get new distance*/
    distance = Ultrasonic_readDistance();
    42de:	0e 94 32 20 	call	0x4064	; 0x4064 <Ultrasonic_readDistance>
    42e2:	90 93 a7 01 	sts	0x01A7, r25
    42e6:	80 93 a6 01 	sts	0x01A6, r24

	if (distance < MIN_DISTANCE){
    42ea:	80 91 a6 01 	lds	r24, 0x01A6
    42ee:	90 91 a7 01 	lds	r25, 0x01A7
    42f2:	84 31       	cpi	r24, 0x14	; 20
    42f4:	91 05       	cpc	r25, r1
    42f6:	08 f0       	brcs	.+2      	; 0x42fa <MultipleTasksCar_UltraSonic+0x50>
    42f8:	8a c2       	rjmp	.+1300   	; 0x480e <MultipleTasksCar_UltraSonic+0x564>
		DcMotor_VidRotate_Wheels1(STOP);
    42fa:	80 e0       	ldi	r24, 0x00	; 0
    42fc:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(STOP);
    4300:	80 e0       	ldi	r24, 0x00	; 0
    4302:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    4306:	fe 01       	movw	r30, r28
    4308:	ed 5b       	subi	r30, 0xBD	; 189
    430a:	ff 4f       	sbci	r31, 0xFF	; 255
    430c:	80 e0       	ldi	r24, 0x00	; 0
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	aa ef       	ldi	r26, 0xFA	; 250
    4312:	b3 e4       	ldi	r27, 0x43	; 67
    4314:	80 83       	st	Z, r24
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	a2 83       	std	Z+2, r26	; 0x02
    431a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431c:	8e 01       	movw	r16, r28
    431e:	01 5c       	subi	r16, 0xC1	; 193
    4320:	1f 4f       	sbci	r17, 0xFF	; 255
    4322:	fe 01       	movw	r30, r28
    4324:	ed 5b       	subi	r30, 0xBD	; 189
    4326:	ff 4f       	sbci	r31, 0xFF	; 255
    4328:	60 81       	ld	r22, Z
    432a:	71 81       	ldd	r23, Z+1	; 0x01
    432c:	82 81       	ldd	r24, Z+2	; 0x02
    432e:	93 81       	ldd	r25, Z+3	; 0x03
    4330:	20 e0       	ldi	r18, 0x00	; 0
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	4a ef       	ldi	r20, 0xFA	; 250
    4336:	54 e4       	ldi	r21, 0x44	; 68
    4338:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	f8 01       	movw	r30, r16
    4342:	80 83       	st	Z, r24
    4344:	91 83       	std	Z+1, r25	; 0x01
    4346:	a2 83       	std	Z+2, r26	; 0x02
    4348:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    434a:	fe 01       	movw	r30, r28
    434c:	ff 96       	adiw	r30, 0x3f	; 63
    434e:	60 81       	ld	r22, Z
    4350:	71 81       	ldd	r23, Z+1	; 0x01
    4352:	82 81       	ldd	r24, Z+2	; 0x02
    4354:	93 81       	ldd	r25, Z+3	; 0x03
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	40 e8       	ldi	r20, 0x80	; 128
    435c:	5f e3       	ldi	r21, 0x3F	; 63
    435e:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4362:	88 23       	and	r24, r24
    4364:	2c f4       	brge	.+10     	; 0x4370 <MultipleTasksCar_UltraSonic+0xc6>
		__ticks = 1;
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	9e af       	std	Y+62, r25	; 0x3e
    436c:	8d af       	std	Y+61, r24	; 0x3d
    436e:	46 c0       	rjmp	.+140    	; 0x43fc <MultipleTasksCar_UltraSonic+0x152>
	else if (__tmp > 65535)
    4370:	fe 01       	movw	r30, r28
    4372:	ff 96       	adiw	r30, 0x3f	; 63
    4374:	60 81       	ld	r22, Z
    4376:	71 81       	ldd	r23, Z+1	; 0x01
    4378:	82 81       	ldd	r24, Z+2	; 0x02
    437a:	93 81       	ldd	r25, Z+3	; 0x03
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	3f ef       	ldi	r19, 0xFF	; 255
    4380:	4f e7       	ldi	r20, 0x7F	; 127
    4382:	57 e4       	ldi	r21, 0x47	; 71
    4384:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4388:	18 16       	cp	r1, r24
    438a:	64 f5       	brge	.+88     	; 0x43e4 <MultipleTasksCar_UltraSonic+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    438c:	fe 01       	movw	r30, r28
    438e:	ed 5b       	subi	r30, 0xBD	; 189
    4390:	ff 4f       	sbci	r31, 0xFF	; 255
    4392:	60 81       	ld	r22, Z
    4394:	71 81       	ldd	r23, Z+1	; 0x01
    4396:	82 81       	ldd	r24, Z+2	; 0x02
    4398:	93 81       	ldd	r25, Z+3	; 0x03
    439a:	20 e0       	ldi	r18, 0x00	; 0
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	40 e2       	ldi	r20, 0x20	; 32
    43a0:	51 e4       	ldi	r21, 0x41	; 65
    43a2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	bc 01       	movw	r22, r24
    43ac:	cd 01       	movw	r24, r26
    43ae:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	9e af       	std	Y+62, r25	; 0x3e
    43b8:	8d af       	std	Y+61, r24	; 0x3d
    43ba:	0f c0       	rjmp	.+30     	; 0x43da <MultipleTasksCar_UltraSonic+0x130>
    43bc:	88 ec       	ldi	r24, 0xC8	; 200
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	9c af       	std	Y+60, r25	; 0x3c
    43c2:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    43c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    43c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	f1 f7       	brne	.-4      	; 0x43c8 <MultipleTasksCar_UltraSonic+0x11e>
    43cc:	9c af       	std	Y+60, r25	; 0x3c
    43ce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    43d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	9e af       	std	Y+62, r25	; 0x3e
    43d8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43da:	8d ad       	ldd	r24, Y+61	; 0x3d
    43dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    43de:	00 97       	sbiw	r24, 0x00	; 0
    43e0:	69 f7       	brne	.-38     	; 0x43bc <MultipleTasksCar_UltraSonic+0x112>
    43e2:	16 c0       	rjmp	.+44     	; 0x4410 <MultipleTasksCar_UltraSonic+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e4:	fe 01       	movw	r30, r28
    43e6:	ff 96       	adiw	r30, 0x3f	; 63
    43e8:	60 81       	ld	r22, Z
    43ea:	71 81       	ldd	r23, Z+1	; 0x01
    43ec:	82 81       	ldd	r24, Z+2	; 0x02
    43ee:	93 81       	ldd	r25, Z+3	; 0x03
    43f0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	9e af       	std	Y+62, r25	; 0x3e
    43fa:	8d af       	std	Y+61, r24	; 0x3d
    43fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    43fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    4400:	9a af       	std	Y+58, r25	; 0x3a
    4402:	89 af       	std	Y+57, r24	; 0x39
    4404:	89 ad       	ldd	r24, Y+57	; 0x39
    4406:	9a ad       	ldd	r25, Y+58	; 0x3a
    4408:	01 97       	sbiw	r24, 0x01	; 1
    440a:	f1 f7       	brne	.-4      	; 0x4408 <MultipleTasksCar_UltraSonic+0x15e>
    440c:	9a af       	std	Y+58, r25	; 0x3a
    440e:	89 af       	std	Y+57, r24	; 0x39

		/* 0 : -90 */
		_delay_ms(500); /* to notice car is stop */
		SetAngleOfServo(ANGLE_ZERO,ANGLE_NEGTIVE90);
    4410:	8c ed       	ldi	r24, 0xDC	; 220
    4412:	95 e0       	ldi	r25, 0x05	; 5
    4414:	60 e9       	ldi	r22, 0x90	; 144
    4416:	71 e0       	ldi	r23, 0x01	; 1
    4418:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <SetAngleOfServo>
    441c:	80 e0       	ldi	r24, 0x00	; 0
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	aa ef       	ldi	r26, 0xFA	; 250
    4422:	b3 e4       	ldi	r27, 0x43	; 67
    4424:	8d ab       	std	Y+53, r24	; 0x35
    4426:	9e ab       	std	Y+54, r25	; 0x36
    4428:	af ab       	std	Y+55, r26	; 0x37
    442a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    442c:	6d a9       	ldd	r22, Y+53	; 0x35
    442e:	7e a9       	ldd	r23, Y+54	; 0x36
    4430:	8f a9       	ldd	r24, Y+55	; 0x37
    4432:	98 ad       	ldd	r25, Y+56	; 0x38
    4434:	20 e0       	ldi	r18, 0x00	; 0
    4436:	30 e0       	ldi	r19, 0x00	; 0
    4438:	4a ef       	ldi	r20, 0xFA	; 250
    443a:	54 e4       	ldi	r21, 0x44	; 68
    443c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4440:	dc 01       	movw	r26, r24
    4442:	cb 01       	movw	r24, r22
    4444:	89 ab       	std	Y+49, r24	; 0x31
    4446:	9a ab       	std	Y+50, r25	; 0x32
    4448:	ab ab       	std	Y+51, r26	; 0x33
    444a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    444c:	69 a9       	ldd	r22, Y+49	; 0x31
    444e:	7a a9       	ldd	r23, Y+50	; 0x32
    4450:	8b a9       	ldd	r24, Y+51	; 0x33
    4452:	9c a9       	ldd	r25, Y+52	; 0x34
    4454:	20 e0       	ldi	r18, 0x00	; 0
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	40 e8       	ldi	r20, 0x80	; 128
    445a:	5f e3       	ldi	r21, 0x3F	; 63
    445c:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4460:	88 23       	and	r24, r24
    4462:	2c f4       	brge	.+10     	; 0x446e <MultipleTasksCar_UltraSonic+0x1c4>
		__ticks = 1;
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	98 ab       	std	Y+48, r25	; 0x30
    446a:	8f a7       	std	Y+47, r24	; 0x2f
    446c:	3f c0       	rjmp	.+126    	; 0x44ec <MultipleTasksCar_UltraSonic+0x242>
	else if (__tmp > 65535)
    446e:	69 a9       	ldd	r22, Y+49	; 0x31
    4470:	7a a9       	ldd	r23, Y+50	; 0x32
    4472:	8b a9       	ldd	r24, Y+51	; 0x33
    4474:	9c a9       	ldd	r25, Y+52	; 0x34
    4476:	20 e0       	ldi	r18, 0x00	; 0
    4478:	3f ef       	ldi	r19, 0xFF	; 255
    447a:	4f e7       	ldi	r20, 0x7F	; 127
    447c:	57 e4       	ldi	r21, 0x47	; 71
    447e:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4482:	18 16       	cp	r1, r24
    4484:	4c f5       	brge	.+82     	; 0x44d8 <MultipleTasksCar_UltraSonic+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4486:	6d a9       	ldd	r22, Y+53	; 0x35
    4488:	7e a9       	ldd	r23, Y+54	; 0x36
    448a:	8f a9       	ldd	r24, Y+55	; 0x37
    448c:	98 ad       	ldd	r25, Y+56	; 0x38
    448e:	20 e0       	ldi	r18, 0x00	; 0
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	40 e2       	ldi	r20, 0x20	; 32
    4494:	51 e4       	ldi	r21, 0x41	; 65
    4496:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    449a:	dc 01       	movw	r26, r24
    449c:	cb 01       	movw	r24, r22
    449e:	bc 01       	movw	r22, r24
    44a0:	cd 01       	movw	r24, r26
    44a2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    44a6:	dc 01       	movw	r26, r24
    44a8:	cb 01       	movw	r24, r22
    44aa:	98 ab       	std	Y+48, r25	; 0x30
    44ac:	8f a7       	std	Y+47, r24	; 0x2f
    44ae:	0f c0       	rjmp	.+30     	; 0x44ce <MultipleTasksCar_UltraSonic+0x224>
    44b0:	88 ec       	ldi	r24, 0xC8	; 200
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	9e a7       	std	Y+46, r25	; 0x2e
    44b6:	8d a7       	std	Y+45, r24	; 0x2d
    44b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    44ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    44bc:	01 97       	sbiw	r24, 0x01	; 1
    44be:	f1 f7       	brne	.-4      	; 0x44bc <MultipleTasksCar_UltraSonic+0x212>
    44c0:	9e a7       	std	Y+46, r25	; 0x2e
    44c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    44c6:	98 a9       	ldd	r25, Y+48	; 0x30
    44c8:	01 97       	sbiw	r24, 0x01	; 1
    44ca:	98 ab       	std	Y+48, r25	; 0x30
    44cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    44d0:	98 a9       	ldd	r25, Y+48	; 0x30
    44d2:	00 97       	sbiw	r24, 0x00	; 0
    44d4:	69 f7       	brne	.-38     	; 0x44b0 <MultipleTasksCar_UltraSonic+0x206>
    44d6:	14 c0       	rjmp	.+40     	; 0x4500 <MultipleTasksCar_UltraSonic+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44d8:	69 a9       	ldd	r22, Y+49	; 0x31
    44da:	7a a9       	ldd	r23, Y+50	; 0x32
    44dc:	8b a9       	ldd	r24, Y+51	; 0x33
    44de:	9c a9       	ldd	r25, Y+52	; 0x34
    44e0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    44e4:	dc 01       	movw	r26, r24
    44e6:	cb 01       	movw	r24, r22
    44e8:	98 ab       	std	Y+48, r25	; 0x30
    44ea:	8f a7       	std	Y+47, r24	; 0x2f
    44ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    44ee:	98 a9       	ldd	r25, Y+48	; 0x30
    44f0:	9c a7       	std	Y+44, r25	; 0x2c
    44f2:	8b a7       	std	Y+43, r24	; 0x2b
    44f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    44f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    44f8:	01 97       	sbiw	r24, 0x01	; 1
    44fa:	f1 f7       	brne	.-4      	; 0x44f8 <MultipleTasksCar_UltraSonic+0x24e>
    44fc:	9c a7       	std	Y+44, r25	; 0x2c
    44fe:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		ServoSetAngleOCR1B(ANGLE_NEGTIVE90);
    4500:	80 e9       	ldi	r24, 0x90	; 144
    4502:	91 e0       	ldi	r25, 0x01	; 1
    4504:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <ServoSetAngleOCR1B>
    4508:	80 e0       	ldi	r24, 0x00	; 0
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	aa ef       	ldi	r26, 0xFA	; 250
    450e:	b3 e4       	ldi	r27, 0x43	; 67
    4510:	8f a3       	std	Y+39, r24	; 0x27
    4512:	98 a7       	std	Y+40, r25	; 0x28
    4514:	a9 a7       	std	Y+41, r26	; 0x29
    4516:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4518:	6f a1       	ldd	r22, Y+39	; 0x27
    451a:	78 a5       	ldd	r23, Y+40	; 0x28
    451c:	89 a5       	ldd	r24, Y+41	; 0x29
    451e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	4a ef       	ldi	r20, 0xFA	; 250
    4526:	54 e4       	ldi	r21, 0x44	; 68
    4528:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    452c:	dc 01       	movw	r26, r24
    452e:	cb 01       	movw	r24, r22
    4530:	8b a3       	std	Y+35, r24	; 0x23
    4532:	9c a3       	std	Y+36, r25	; 0x24
    4534:	ad a3       	std	Y+37, r26	; 0x25
    4536:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4538:	6b a1       	ldd	r22, Y+35	; 0x23
    453a:	7c a1       	ldd	r23, Y+36	; 0x24
    453c:	8d a1       	ldd	r24, Y+37	; 0x25
    453e:	9e a1       	ldd	r25, Y+38	; 0x26
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	40 e8       	ldi	r20, 0x80	; 128
    4546:	5f e3       	ldi	r21, 0x3F	; 63
    4548:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    454c:	88 23       	and	r24, r24
    454e:	2c f4       	brge	.+10     	; 0x455a <MultipleTasksCar_UltraSonic+0x2b0>
		__ticks = 1;
    4550:	81 e0       	ldi	r24, 0x01	; 1
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	9a a3       	std	Y+34, r25	; 0x22
    4556:	89 a3       	std	Y+33, r24	; 0x21
    4558:	3f c0       	rjmp	.+126    	; 0x45d8 <MultipleTasksCar_UltraSonic+0x32e>
	else if (__tmp > 65535)
    455a:	6b a1       	ldd	r22, Y+35	; 0x23
    455c:	7c a1       	ldd	r23, Y+36	; 0x24
    455e:	8d a1       	ldd	r24, Y+37	; 0x25
    4560:	9e a1       	ldd	r25, Y+38	; 0x26
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	3f ef       	ldi	r19, 0xFF	; 255
    4566:	4f e7       	ldi	r20, 0x7F	; 127
    4568:	57 e4       	ldi	r21, 0x47	; 71
    456a:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    456e:	18 16       	cp	r1, r24
    4570:	4c f5       	brge	.+82     	; 0x45c4 <MultipleTasksCar_UltraSonic+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4572:	6f a1       	ldd	r22, Y+39	; 0x27
    4574:	78 a5       	ldd	r23, Y+40	; 0x28
    4576:	89 a5       	ldd	r24, Y+41	; 0x29
    4578:	9a a5       	ldd	r25, Y+42	; 0x2a
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	40 e2       	ldi	r20, 0x20	; 32
    4580:	51 e4       	ldi	r21, 0x41	; 65
    4582:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4586:	dc 01       	movw	r26, r24
    4588:	cb 01       	movw	r24, r22
    458a:	bc 01       	movw	r22, r24
    458c:	cd 01       	movw	r24, r26
    458e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	9a a3       	std	Y+34, r25	; 0x22
    4598:	89 a3       	std	Y+33, r24	; 0x21
    459a:	0f c0       	rjmp	.+30     	; 0x45ba <MultipleTasksCar_UltraSonic+0x310>
    459c:	88 ec       	ldi	r24, 0xC8	; 200
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	98 a3       	std	Y+32, r25	; 0x20
    45a2:	8f 8f       	std	Y+31, r24	; 0x1f
    45a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45a6:	98 a1       	ldd	r25, Y+32	; 0x20
    45a8:	01 97       	sbiw	r24, 0x01	; 1
    45aa:	f1 f7       	brne	.-4      	; 0x45a8 <MultipleTasksCar_UltraSonic+0x2fe>
    45ac:	98 a3       	std	Y+32, r25	; 0x20
    45ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b0:	89 a1       	ldd	r24, Y+33	; 0x21
    45b2:	9a a1       	ldd	r25, Y+34	; 0x22
    45b4:	01 97       	sbiw	r24, 0x01	; 1
    45b6:	9a a3       	std	Y+34, r25	; 0x22
    45b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ba:	89 a1       	ldd	r24, Y+33	; 0x21
    45bc:	9a a1       	ldd	r25, Y+34	; 0x22
    45be:	00 97       	sbiw	r24, 0x00	; 0
    45c0:	69 f7       	brne	.-38     	; 0x459c <MultipleTasksCar_UltraSonic+0x2f2>
    45c2:	14 c0       	rjmp	.+40     	; 0x45ec <MultipleTasksCar_UltraSonic+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45c4:	6b a1       	ldd	r22, Y+35	; 0x23
    45c6:	7c a1       	ldd	r23, Y+36	; 0x24
    45c8:	8d a1       	ldd	r24, Y+37	; 0x25
    45ca:	9e a1       	ldd	r25, Y+38	; 0x26
    45cc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    45d0:	dc 01       	movw	r26, r24
    45d2:	cb 01       	movw	r24, r22
    45d4:	9a a3       	std	Y+34, r25	; 0x22
    45d6:	89 a3       	std	Y+33, r24	; 0x21
    45d8:	89 a1       	ldd	r24, Y+33	; 0x21
    45da:	9a a1       	ldd	r25, Y+34	; 0x22
    45dc:	9e 8f       	std	Y+30, r25	; 0x1e
    45de:	8d 8f       	std	Y+29, r24	; 0x1d
    45e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	f1 f7       	brne	.-4      	; 0x45e4 <MultipleTasksCar_UltraSonic+0x33a>
    45e8:	9e 8f       	std	Y+30, r25	; 0x1e
    45ea:	8d 8f       	std	Y+29, r24	; 0x1d

		/* update on distance */
		_delay_ms(500); /* to saturate */
		distance = Ultrasonic_readDistance();
    45ec:	0e 94 32 20 	call	0x4064	; 0x4064 <Ultrasonic_readDistance>
    45f0:	90 93 a7 01 	sts	0x01A7, r25
    45f4:	80 93 a6 01 	sts	0x01A6, r24

		if (distance < MIN_DISTANCE ){
    45f8:	80 91 a6 01 	lds	r24, 0x01A6
    45fc:	90 91 a7 01 	lds	r25, 0x01A7
    4600:	84 31       	cpi	r24, 0x14	; 20
    4602:	91 05       	cpc	r25, r1
    4604:	08 f0       	brcs	.+2      	; 0x4608 <MultipleTasksCar_UltraSonic+0x35e>
    4606:	01 c1       	rjmp	.+514    	; 0x480a <MultipleTasksCar_UltraSonic+0x560>
			/* -90 : +90 */
			SetAngleOfServo(ANGLE_NEGTIVE90,ANGLE_POSITIVE90);
    4608:	80 e9       	ldi	r24, 0x90	; 144
    460a:	91 e0       	ldi	r25, 0x01	; 1
    460c:	60 e6       	ldi	r22, 0x60	; 96
    460e:	79 e0       	ldi	r23, 0x09	; 9
    4610:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <SetAngleOfServo>
    4614:	80 e0       	ldi	r24, 0x00	; 0
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	aa ef       	ldi	r26, 0xFA	; 250
    461a:	b3 e4       	ldi	r27, 0x43	; 67
    461c:	89 8f       	std	Y+25, r24	; 0x19
    461e:	9a 8f       	std	Y+26, r25	; 0x1a
    4620:	ab 8f       	std	Y+27, r26	; 0x1b
    4622:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4624:	69 8d       	ldd	r22, Y+25	; 0x19
    4626:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4628:	8b 8d       	ldd	r24, Y+27	; 0x1b
    462a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    462c:	20 e0       	ldi	r18, 0x00	; 0
    462e:	30 e0       	ldi	r19, 0x00	; 0
    4630:	4a ef       	ldi	r20, 0xFA	; 250
    4632:	54 e4       	ldi	r21, 0x44	; 68
    4634:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4638:	dc 01       	movw	r26, r24
    463a:	cb 01       	movw	r24, r22
    463c:	8d 8b       	std	Y+21, r24	; 0x15
    463e:	9e 8b       	std	Y+22, r25	; 0x16
    4640:	af 8b       	std	Y+23, r26	; 0x17
    4642:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4644:	6d 89       	ldd	r22, Y+21	; 0x15
    4646:	7e 89       	ldd	r23, Y+22	; 0x16
    4648:	8f 89       	ldd	r24, Y+23	; 0x17
    464a:	98 8d       	ldd	r25, Y+24	; 0x18
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	40 e8       	ldi	r20, 0x80	; 128
    4652:	5f e3       	ldi	r21, 0x3F	; 63
    4654:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4658:	88 23       	and	r24, r24
    465a:	2c f4       	brge	.+10     	; 0x4666 <MultipleTasksCar_UltraSonic+0x3bc>
		__ticks = 1;
    465c:	81 e0       	ldi	r24, 0x01	; 1
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	9c 8b       	std	Y+20, r25	; 0x14
    4662:	8b 8b       	std	Y+19, r24	; 0x13
    4664:	3f c0       	rjmp	.+126    	; 0x46e4 <MultipleTasksCar_UltraSonic+0x43a>
	else if (__tmp > 65535)
    4666:	6d 89       	ldd	r22, Y+21	; 0x15
    4668:	7e 89       	ldd	r23, Y+22	; 0x16
    466a:	8f 89       	ldd	r24, Y+23	; 0x17
    466c:	98 8d       	ldd	r25, Y+24	; 0x18
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	3f ef       	ldi	r19, 0xFF	; 255
    4672:	4f e7       	ldi	r20, 0x7F	; 127
    4674:	57 e4       	ldi	r21, 0x47	; 71
    4676:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    467a:	18 16       	cp	r1, r24
    467c:	4c f5       	brge	.+82     	; 0x46d0 <MultipleTasksCar_UltraSonic+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    467e:	69 8d       	ldd	r22, Y+25	; 0x19
    4680:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4682:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4684:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4686:	20 e0       	ldi	r18, 0x00	; 0
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	40 e2       	ldi	r20, 0x20	; 32
    468c:	51 e4       	ldi	r21, 0x41	; 65
    468e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4692:	dc 01       	movw	r26, r24
    4694:	cb 01       	movw	r24, r22
    4696:	bc 01       	movw	r22, r24
    4698:	cd 01       	movw	r24, r26
    469a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    469e:	dc 01       	movw	r26, r24
    46a0:	cb 01       	movw	r24, r22
    46a2:	9c 8b       	std	Y+20, r25	; 0x14
    46a4:	8b 8b       	std	Y+19, r24	; 0x13
    46a6:	0f c0       	rjmp	.+30     	; 0x46c6 <MultipleTasksCar_UltraSonic+0x41c>
    46a8:	88 ec       	ldi	r24, 0xC8	; 200
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	9a 8b       	std	Y+18, r25	; 0x12
    46ae:	89 8b       	std	Y+17, r24	; 0x11
    46b0:	89 89       	ldd	r24, Y+17	; 0x11
    46b2:	9a 89       	ldd	r25, Y+18	; 0x12
    46b4:	01 97       	sbiw	r24, 0x01	; 1
    46b6:	f1 f7       	brne	.-4      	; 0x46b4 <MultipleTasksCar_UltraSonic+0x40a>
    46b8:	9a 8b       	std	Y+18, r25	; 0x12
    46ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46bc:	8b 89       	ldd	r24, Y+19	; 0x13
    46be:	9c 89       	ldd	r25, Y+20	; 0x14
    46c0:	01 97       	sbiw	r24, 0x01	; 1
    46c2:	9c 8b       	std	Y+20, r25	; 0x14
    46c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46c6:	8b 89       	ldd	r24, Y+19	; 0x13
    46c8:	9c 89       	ldd	r25, Y+20	; 0x14
    46ca:	00 97       	sbiw	r24, 0x00	; 0
    46cc:	69 f7       	brne	.-38     	; 0x46a8 <MultipleTasksCar_UltraSonic+0x3fe>
    46ce:	14 c0       	rjmp	.+40     	; 0x46f8 <MultipleTasksCar_UltraSonic+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46d0:	6d 89       	ldd	r22, Y+21	; 0x15
    46d2:	7e 89       	ldd	r23, Y+22	; 0x16
    46d4:	8f 89       	ldd	r24, Y+23	; 0x17
    46d6:	98 8d       	ldd	r25, Y+24	; 0x18
    46d8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    46dc:	dc 01       	movw	r26, r24
    46de:	cb 01       	movw	r24, r22
    46e0:	9c 8b       	std	Y+20, r25	; 0x14
    46e2:	8b 8b       	std	Y+19, r24	; 0x13
    46e4:	8b 89       	ldd	r24, Y+19	; 0x13
    46e6:	9c 89       	ldd	r25, Y+20	; 0x14
    46e8:	98 8b       	std	Y+16, r25	; 0x10
    46ea:	8f 87       	std	Y+15, r24	; 0x0f
    46ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    46ee:	98 89       	ldd	r25, Y+16	; 0x10
    46f0:	01 97       	sbiw	r24, 0x01	; 1
    46f2:	f1 f7       	brne	.-4      	; 0x46f0 <MultipleTasksCar_UltraSonic+0x446>
    46f4:	98 8b       	std	Y+16, r25	; 0x10
    46f6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			ServoSetAngleOCR1B(ANGLE_POSITIVE90);
    46f8:	80 e6       	ldi	r24, 0x60	; 96
    46fa:	99 e0       	ldi	r25, 0x09	; 9
    46fc:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <ServoSetAngleOCR1B>
    4700:	80 e0       	ldi	r24, 0x00	; 0
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	aa ef       	ldi	r26, 0xFA	; 250
    4706:	b3 e4       	ldi	r27, 0x43	; 67
    4708:	8b 87       	std	Y+11, r24	; 0x0b
    470a:	9c 87       	std	Y+12, r25	; 0x0c
    470c:	ad 87       	std	Y+13, r26	; 0x0d
    470e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4710:	6b 85       	ldd	r22, Y+11	; 0x0b
    4712:	7c 85       	ldd	r23, Y+12	; 0x0c
    4714:	8d 85       	ldd	r24, Y+13	; 0x0d
    4716:	9e 85       	ldd	r25, Y+14	; 0x0e
    4718:	20 e0       	ldi	r18, 0x00	; 0
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	4a ef       	ldi	r20, 0xFA	; 250
    471e:	54 e4       	ldi	r21, 0x44	; 68
    4720:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	8f 83       	std	Y+7, r24	; 0x07
    472a:	98 87       	std	Y+8, r25	; 0x08
    472c:	a9 87       	std	Y+9, r26	; 0x09
    472e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4730:	6f 81       	ldd	r22, Y+7	; 0x07
    4732:	78 85       	ldd	r23, Y+8	; 0x08
    4734:	89 85       	ldd	r24, Y+9	; 0x09
    4736:	9a 85       	ldd	r25, Y+10	; 0x0a
    4738:	20 e0       	ldi	r18, 0x00	; 0
    473a:	30 e0       	ldi	r19, 0x00	; 0
    473c:	40 e8       	ldi	r20, 0x80	; 128
    473e:	5f e3       	ldi	r21, 0x3F	; 63
    4740:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4744:	88 23       	and	r24, r24
    4746:	2c f4       	brge	.+10     	; 0x4752 <MultipleTasksCar_UltraSonic+0x4a8>
		__ticks = 1;
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	90 e0       	ldi	r25, 0x00	; 0
    474c:	9e 83       	std	Y+6, r25	; 0x06
    474e:	8d 83       	std	Y+5, r24	; 0x05
    4750:	3f c0       	rjmp	.+126    	; 0x47d0 <MultipleTasksCar_UltraSonic+0x526>
	else if (__tmp > 65535)
    4752:	6f 81       	ldd	r22, Y+7	; 0x07
    4754:	78 85       	ldd	r23, Y+8	; 0x08
    4756:	89 85       	ldd	r24, Y+9	; 0x09
    4758:	9a 85       	ldd	r25, Y+10	; 0x0a
    475a:	20 e0       	ldi	r18, 0x00	; 0
    475c:	3f ef       	ldi	r19, 0xFF	; 255
    475e:	4f e7       	ldi	r20, 0x7F	; 127
    4760:	57 e4       	ldi	r21, 0x47	; 71
    4762:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4766:	18 16       	cp	r1, r24
    4768:	4c f5       	brge	.+82     	; 0x47bc <MultipleTasksCar_UltraSonic+0x512>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    476a:	6b 85       	ldd	r22, Y+11	; 0x0b
    476c:	7c 85       	ldd	r23, Y+12	; 0x0c
    476e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4770:	9e 85       	ldd	r25, Y+14	; 0x0e
    4772:	20 e0       	ldi	r18, 0x00	; 0
    4774:	30 e0       	ldi	r19, 0x00	; 0
    4776:	40 e2       	ldi	r20, 0x20	; 32
    4778:	51 e4       	ldi	r21, 0x41	; 65
    477a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    477e:	dc 01       	movw	r26, r24
    4780:	cb 01       	movw	r24, r22
    4782:	bc 01       	movw	r22, r24
    4784:	cd 01       	movw	r24, r26
    4786:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    478a:	dc 01       	movw	r26, r24
    478c:	cb 01       	movw	r24, r22
    478e:	9e 83       	std	Y+6, r25	; 0x06
    4790:	8d 83       	std	Y+5, r24	; 0x05
    4792:	0f c0       	rjmp	.+30     	; 0x47b2 <MultipleTasksCar_UltraSonic+0x508>
    4794:	88 ec       	ldi	r24, 0xC8	; 200
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	9c 83       	std	Y+4, r25	; 0x04
    479a:	8b 83       	std	Y+3, r24	; 0x03
    479c:	8b 81       	ldd	r24, Y+3	; 0x03
    479e:	9c 81       	ldd	r25, Y+4	; 0x04
    47a0:	01 97       	sbiw	r24, 0x01	; 1
    47a2:	f1 f7       	brne	.-4      	; 0x47a0 <MultipleTasksCar_UltraSonic+0x4f6>
    47a4:	9c 83       	std	Y+4, r25	; 0x04
    47a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47a8:	8d 81       	ldd	r24, Y+5	; 0x05
    47aa:	9e 81       	ldd	r25, Y+6	; 0x06
    47ac:	01 97       	sbiw	r24, 0x01	; 1
    47ae:	9e 83       	std	Y+6, r25	; 0x06
    47b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47b2:	8d 81       	ldd	r24, Y+5	; 0x05
    47b4:	9e 81       	ldd	r25, Y+6	; 0x06
    47b6:	00 97       	sbiw	r24, 0x00	; 0
    47b8:	69 f7       	brne	.-38     	; 0x4794 <MultipleTasksCar_UltraSonic+0x4ea>
    47ba:	14 c0       	rjmp	.+40     	; 0x47e4 <MultipleTasksCar_UltraSonic+0x53a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47bc:	6f 81       	ldd	r22, Y+7	; 0x07
    47be:	78 85       	ldd	r23, Y+8	; 0x08
    47c0:	89 85       	ldd	r24, Y+9	; 0x09
    47c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    47c4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    47c8:	dc 01       	movw	r26, r24
    47ca:	cb 01       	movw	r24, r22
    47cc:	9e 83       	std	Y+6, r25	; 0x06
    47ce:	8d 83       	std	Y+5, r24	; 0x05
    47d0:	8d 81       	ldd	r24, Y+5	; 0x05
    47d2:	9e 81       	ldd	r25, Y+6	; 0x06
    47d4:	9a 83       	std	Y+2, r25	; 0x02
    47d6:	89 83       	std	Y+1, r24	; 0x01
    47d8:	89 81       	ldd	r24, Y+1	; 0x01
    47da:	9a 81       	ldd	r25, Y+2	; 0x02
    47dc:	01 97       	sbiw	r24, 0x01	; 1
    47de:	f1 f7       	brne	.-4      	; 0x47dc <MultipleTasksCar_UltraSonic+0x532>
    47e0:	9a 83       	std	Y+2, r25	; 0x02
    47e2:	89 83       	std	Y+1, r24	; 0x01

			/* update on distance */
			_delay_ms(500); /* to saturate */
			distance = Ultrasonic_readDistance();
    47e4:	0e 94 32 20 	call	0x4064	; 0x4064 <Ultrasonic_readDistance>
    47e8:	90 93 a7 01 	sts	0x01A7, r25
    47ec:	80 93 a6 01 	sts	0x01A6, r24

			if (distance < MIN_DISTANCE ){
    47f0:	80 91 a6 01 	lds	r24, 0x01A6
    47f4:	90 91 a7 01 	lds	r25, 0x01A7
    47f8:	84 31       	cpi	r24, 0x14	; 20
    47fa:	91 05       	cpc	r25, r1
    47fc:	18 f4       	brcc	.+6      	; 0x4804 <MultipleTasksCar_UltraSonic+0x55a>
				UltraSonicStopAction();
    47fe:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <UltraSonicStopAction>
    4802:	05 c0       	rjmp	.+10     	; 0x480e <MultipleTasksCar_UltraSonic+0x564>
			}//end if left blocked
			else {
				UltraSonicLeftAction();
    4804:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <UltraSonicLeftAction>
    4808:	02 c0       	rjmp	.+4      	; 0x480e <MultipleTasksCar_UltraSonic+0x564>
			}//end else left true
		}//end if right blocked
		else {
			UltraSonicRightAction();
    480a:	0e 94 13 24 	call	0x4826	; 0x4826 <UltraSonicRightAction>
		}//end else right true
	}
}
    480e:	ca 5b       	subi	r28, 0xBA	; 186
    4810:	df 4f       	sbci	r29, 0xFF	; 255
    4812:	0f b6       	in	r0, 0x3f	; 63
    4814:	f8 94       	cli
    4816:	de bf       	out	0x3e, r29	; 62
    4818:	0f be       	out	0x3f, r0	; 63
    481a:	cd bf       	out	0x3d, r28	; 61
    481c:	cf 91       	pop	r28
    481e:	df 91       	pop	r29
    4820:	1f 91       	pop	r17
    4822:	0f 91       	pop	r16
    4824:	08 95       	ret

00004826 <UltraSonicRightAction>:
 Name        : UltraSonicRightAction
 Input       : void
 Output      : void
 Description : if the opposit is blocked go right at first option
*/
void UltraSonicRightAction () {
    4826:	df 93       	push	r29
    4828:	cf 93       	push	r28
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62
    482e:	aa 97       	sbiw	r28, 0x2a	; 42
    4830:	0f b6       	in	r0, 0x3f	; 63
    4832:	f8 94       	cli
    4834:	de bf       	out	0x3e, r29	; 62
    4836:	0f be       	out	0x3f, r0	; 63
    4838:	cd bf       	out	0x3d, r28	; 61
	SetAngleOfServo(ANGLE_NEGTIVE90,ANGLE_ZERO);
    483a:	80 e9       	ldi	r24, 0x90	; 144
    483c:	91 e0       	ldi	r25, 0x01	; 1
    483e:	6c ed       	ldi	r22, 0xDC	; 220
    4840:	75 e0       	ldi	r23, 0x05	; 5
    4842:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <SetAngleOfServo>
    4846:	80 e0       	ldi	r24, 0x00	; 0
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	aa ef       	ldi	r26, 0xFA	; 250
    484c:	b3 e4       	ldi	r27, 0x43	; 67
    484e:	8f a3       	std	Y+39, r24	; 0x27
    4850:	98 a7       	std	Y+40, r25	; 0x28
    4852:	a9 a7       	std	Y+41, r26	; 0x29
    4854:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4856:	6f a1       	ldd	r22, Y+39	; 0x27
    4858:	78 a5       	ldd	r23, Y+40	; 0x28
    485a:	89 a5       	ldd	r24, Y+41	; 0x29
    485c:	9a a5       	ldd	r25, Y+42	; 0x2a
    485e:	20 e0       	ldi	r18, 0x00	; 0
    4860:	30 e0       	ldi	r19, 0x00	; 0
    4862:	4a ef       	ldi	r20, 0xFA	; 250
    4864:	54 e4       	ldi	r21, 0x44	; 68
    4866:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    486a:	dc 01       	movw	r26, r24
    486c:	cb 01       	movw	r24, r22
    486e:	8b a3       	std	Y+35, r24	; 0x23
    4870:	9c a3       	std	Y+36, r25	; 0x24
    4872:	ad a3       	std	Y+37, r26	; 0x25
    4874:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4876:	6b a1       	ldd	r22, Y+35	; 0x23
    4878:	7c a1       	ldd	r23, Y+36	; 0x24
    487a:	8d a1       	ldd	r24, Y+37	; 0x25
    487c:	9e a1       	ldd	r25, Y+38	; 0x26
    487e:	20 e0       	ldi	r18, 0x00	; 0
    4880:	30 e0       	ldi	r19, 0x00	; 0
    4882:	40 e8       	ldi	r20, 0x80	; 128
    4884:	5f e3       	ldi	r21, 0x3F	; 63
    4886:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    488a:	88 23       	and	r24, r24
    488c:	2c f4       	brge	.+10     	; 0x4898 <UltraSonicRightAction+0x72>
		__ticks = 1;
    488e:	81 e0       	ldi	r24, 0x01	; 1
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	9a a3       	std	Y+34, r25	; 0x22
    4894:	89 a3       	std	Y+33, r24	; 0x21
    4896:	3f c0       	rjmp	.+126    	; 0x4916 <UltraSonicRightAction+0xf0>
	else if (__tmp > 65535)
    4898:	6b a1       	ldd	r22, Y+35	; 0x23
    489a:	7c a1       	ldd	r23, Y+36	; 0x24
    489c:	8d a1       	ldd	r24, Y+37	; 0x25
    489e:	9e a1       	ldd	r25, Y+38	; 0x26
    48a0:	20 e0       	ldi	r18, 0x00	; 0
    48a2:	3f ef       	ldi	r19, 0xFF	; 255
    48a4:	4f e7       	ldi	r20, 0x7F	; 127
    48a6:	57 e4       	ldi	r21, 0x47	; 71
    48a8:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    48ac:	18 16       	cp	r1, r24
    48ae:	4c f5       	brge	.+82     	; 0x4902 <UltraSonicRightAction+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48b0:	6f a1       	ldd	r22, Y+39	; 0x27
    48b2:	78 a5       	ldd	r23, Y+40	; 0x28
    48b4:	89 a5       	ldd	r24, Y+41	; 0x29
    48b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    48b8:	20 e0       	ldi	r18, 0x00	; 0
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	40 e2       	ldi	r20, 0x20	; 32
    48be:	51 e4       	ldi	r21, 0x41	; 65
    48c0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	bc 01       	movw	r22, r24
    48ca:	cd 01       	movw	r24, r26
    48cc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    48d0:	dc 01       	movw	r26, r24
    48d2:	cb 01       	movw	r24, r22
    48d4:	9a a3       	std	Y+34, r25	; 0x22
    48d6:	89 a3       	std	Y+33, r24	; 0x21
    48d8:	0f c0       	rjmp	.+30     	; 0x48f8 <UltraSonicRightAction+0xd2>
    48da:	88 ec       	ldi	r24, 0xC8	; 200
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	98 a3       	std	Y+32, r25	; 0x20
    48e0:	8f 8f       	std	Y+31, r24	; 0x1f
    48e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48e4:	98 a1       	ldd	r25, Y+32	; 0x20
    48e6:	01 97       	sbiw	r24, 0x01	; 1
    48e8:	f1 f7       	brne	.-4      	; 0x48e6 <UltraSonicRightAction+0xc0>
    48ea:	98 a3       	std	Y+32, r25	; 0x20
    48ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ee:	89 a1       	ldd	r24, Y+33	; 0x21
    48f0:	9a a1       	ldd	r25, Y+34	; 0x22
    48f2:	01 97       	sbiw	r24, 0x01	; 1
    48f4:	9a a3       	std	Y+34, r25	; 0x22
    48f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48f8:	89 a1       	ldd	r24, Y+33	; 0x21
    48fa:	9a a1       	ldd	r25, Y+34	; 0x22
    48fc:	00 97       	sbiw	r24, 0x00	; 0
    48fe:	69 f7       	brne	.-38     	; 0x48da <UltraSonicRightAction+0xb4>
    4900:	14 c0       	rjmp	.+40     	; 0x492a <UltraSonicRightAction+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4902:	6b a1       	ldd	r22, Y+35	; 0x23
    4904:	7c a1       	ldd	r23, Y+36	; 0x24
    4906:	8d a1       	ldd	r24, Y+37	; 0x25
    4908:	9e a1       	ldd	r25, Y+38	; 0x26
    490a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    490e:	dc 01       	movw	r26, r24
    4910:	cb 01       	movw	r24, r22
    4912:	9a a3       	std	Y+34, r25	; 0x22
    4914:	89 a3       	std	Y+33, r24	; 0x21
    4916:	89 a1       	ldd	r24, Y+33	; 0x21
    4918:	9a a1       	ldd	r25, Y+34	; 0x22
    491a:	9e 8f       	std	Y+30, r25	; 0x1e
    491c:	8d 8f       	std	Y+29, r24	; 0x1d
    491e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4920:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4922:	01 97       	sbiw	r24, 0x01	; 1
    4924:	f1 f7       	brne	.-4      	; 0x4922 <UltraSonicRightAction+0xfc>
    4926:	9e 8f       	std	Y+30, r25	; 0x1e
    4928:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500); /* to notice the movement of servo */

	/* to go back and turn Right direction */
	DcMotor_VidRotate_Wheels1(CLK_WISE);
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(CLK_WISE);
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    4936:	80 e0       	ldi	r24, 0x00	; 0
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	a8 e4       	ldi	r26, 0x48	; 72
    493c:	b3 e4       	ldi	r27, 0x43	; 67
    493e:	89 8f       	std	Y+25, r24	; 0x19
    4940:	9a 8f       	std	Y+26, r25	; 0x1a
    4942:	ab 8f       	std	Y+27, r26	; 0x1b
    4944:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4946:	69 8d       	ldd	r22, Y+25	; 0x19
    4948:	7a 8d       	ldd	r23, Y+26	; 0x1a
    494a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    494c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	4a ef       	ldi	r20, 0xFA	; 250
    4954:	54 e4       	ldi	r21, 0x44	; 68
    4956:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    495a:	dc 01       	movw	r26, r24
    495c:	cb 01       	movw	r24, r22
    495e:	8d 8b       	std	Y+21, r24	; 0x15
    4960:	9e 8b       	std	Y+22, r25	; 0x16
    4962:	af 8b       	std	Y+23, r26	; 0x17
    4964:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4966:	6d 89       	ldd	r22, Y+21	; 0x15
    4968:	7e 89       	ldd	r23, Y+22	; 0x16
    496a:	8f 89       	ldd	r24, Y+23	; 0x17
    496c:	98 8d       	ldd	r25, Y+24	; 0x18
    496e:	20 e0       	ldi	r18, 0x00	; 0
    4970:	30 e0       	ldi	r19, 0x00	; 0
    4972:	40 e8       	ldi	r20, 0x80	; 128
    4974:	5f e3       	ldi	r21, 0x3F	; 63
    4976:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    497a:	88 23       	and	r24, r24
    497c:	2c f4       	brge	.+10     	; 0x4988 <UltraSonicRightAction+0x162>
		__ticks = 1;
    497e:	81 e0       	ldi	r24, 0x01	; 1
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	9c 8b       	std	Y+20, r25	; 0x14
    4984:	8b 8b       	std	Y+19, r24	; 0x13
    4986:	3f c0       	rjmp	.+126    	; 0x4a06 <UltraSonicRightAction+0x1e0>
	else if (__tmp > 65535)
    4988:	6d 89       	ldd	r22, Y+21	; 0x15
    498a:	7e 89       	ldd	r23, Y+22	; 0x16
    498c:	8f 89       	ldd	r24, Y+23	; 0x17
    498e:	98 8d       	ldd	r25, Y+24	; 0x18
    4990:	20 e0       	ldi	r18, 0x00	; 0
    4992:	3f ef       	ldi	r19, 0xFF	; 255
    4994:	4f e7       	ldi	r20, 0x7F	; 127
    4996:	57 e4       	ldi	r21, 0x47	; 71
    4998:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    499c:	18 16       	cp	r1, r24
    499e:	4c f5       	brge	.+82     	; 0x49f2 <UltraSonicRightAction+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a0:	69 8d       	ldd	r22, Y+25	; 0x19
    49a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49a8:	20 e0       	ldi	r18, 0x00	; 0
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	40 e2       	ldi	r20, 0x20	; 32
    49ae:	51 e4       	ldi	r21, 0x41	; 65
    49b0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    49b4:	dc 01       	movw	r26, r24
    49b6:	cb 01       	movw	r24, r22
    49b8:	bc 01       	movw	r22, r24
    49ba:	cd 01       	movw	r24, r26
    49bc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    49c0:	dc 01       	movw	r26, r24
    49c2:	cb 01       	movw	r24, r22
    49c4:	9c 8b       	std	Y+20, r25	; 0x14
    49c6:	8b 8b       	std	Y+19, r24	; 0x13
    49c8:	0f c0       	rjmp	.+30     	; 0x49e8 <UltraSonicRightAction+0x1c2>
    49ca:	88 ec       	ldi	r24, 0xC8	; 200
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	9a 8b       	std	Y+18, r25	; 0x12
    49d0:	89 8b       	std	Y+17, r24	; 0x11
    49d2:	89 89       	ldd	r24, Y+17	; 0x11
    49d4:	9a 89       	ldd	r25, Y+18	; 0x12
    49d6:	01 97       	sbiw	r24, 0x01	; 1
    49d8:	f1 f7       	brne	.-4      	; 0x49d6 <UltraSonicRightAction+0x1b0>
    49da:	9a 8b       	std	Y+18, r25	; 0x12
    49dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49de:	8b 89       	ldd	r24, Y+19	; 0x13
    49e0:	9c 89       	ldd	r25, Y+20	; 0x14
    49e2:	01 97       	sbiw	r24, 0x01	; 1
    49e4:	9c 8b       	std	Y+20, r25	; 0x14
    49e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49e8:	8b 89       	ldd	r24, Y+19	; 0x13
    49ea:	9c 89       	ldd	r25, Y+20	; 0x14
    49ec:	00 97       	sbiw	r24, 0x00	; 0
    49ee:	69 f7       	brne	.-38     	; 0x49ca <UltraSonicRightAction+0x1a4>
    49f0:	14 c0       	rjmp	.+40     	; 0x4a1a <UltraSonicRightAction+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49f2:	6d 89       	ldd	r22, Y+21	; 0x15
    49f4:	7e 89       	ldd	r23, Y+22	; 0x16
    49f6:	8f 89       	ldd	r24, Y+23	; 0x17
    49f8:	98 8d       	ldd	r25, Y+24	; 0x18
    49fa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	9c 8b       	std	Y+20, r25	; 0x14
    4a04:	8b 8b       	std	Y+19, r24	; 0x13
    4a06:	8b 89       	ldd	r24, Y+19	; 0x13
    4a08:	9c 89       	ldd	r25, Y+20	; 0x14
    4a0a:	98 8b       	std	Y+16, r25	; 0x10
    4a0c:	8f 87       	std	Y+15, r24	; 0x0f
    4a0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a10:	98 89       	ldd	r25, Y+16	; 0x10
    4a12:	01 97       	sbiw	r24, 0x01	; 1
    4a14:	f1 f7       	brne	.-4      	; 0x4a12 <UltraSonicRightAction+0x1ec>
    4a16:	98 8b       	std	Y+16, r25	; 0x10
    4a18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	Timer2_VidSETDUTY(THREE_QUARTER_PERCENTAGE);
    4a1a:	8b e4       	ldi	r24, 0x4B	; 75
    4a1c:	0e 94 3d 1a 	call	0x347a	; 0x347a <Timer2_VidSETDUTY>
	DcMotor_VidRotate_Wheels1(STOP);
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(CLK_WISE);
    4a26:	81 e0       	ldi	r24, 0x01	; 1
    4a28:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    4a2c:	80 e0       	ldi	r24, 0x00	; 0
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	a8 ec       	ldi	r26, 0xC8	; 200
    4a32:	b3 e4       	ldi	r27, 0x43	; 67
    4a34:	8b 87       	std	Y+11, r24	; 0x0b
    4a36:	9c 87       	std	Y+12, r25	; 0x0c
    4a38:	ad 87       	std	Y+13, r26	; 0x0d
    4a3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	4a ef       	ldi	r20, 0xFA	; 250
    4a4a:	54 e4       	ldi	r21, 0x44	; 68
    4a4c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4a50:	dc 01       	movw	r26, r24
    4a52:	cb 01       	movw	r24, r22
    4a54:	8f 83       	std	Y+7, r24	; 0x07
    4a56:	98 87       	std	Y+8, r25	; 0x08
    4a58:	a9 87       	std	Y+9, r26	; 0x09
    4a5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a5e:	78 85       	ldd	r23, Y+8	; 0x08
    4a60:	89 85       	ldd	r24, Y+9	; 0x09
    4a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a64:	20 e0       	ldi	r18, 0x00	; 0
    4a66:	30 e0       	ldi	r19, 0x00	; 0
    4a68:	40 e8       	ldi	r20, 0x80	; 128
    4a6a:	5f e3       	ldi	r21, 0x3F	; 63
    4a6c:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4a70:	88 23       	and	r24, r24
    4a72:	2c f4       	brge	.+10     	; 0x4a7e <UltraSonicRightAction+0x258>
		__ticks = 1;
    4a74:	81 e0       	ldi	r24, 0x01	; 1
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	9e 83       	std	Y+6, r25	; 0x06
    4a7a:	8d 83       	std	Y+5, r24	; 0x05
    4a7c:	3f c0       	rjmp	.+126    	; 0x4afc <UltraSonicRightAction+0x2d6>
	else if (__tmp > 65535)
    4a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a80:	78 85       	ldd	r23, Y+8	; 0x08
    4a82:	89 85       	ldd	r24, Y+9	; 0x09
    4a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	3f ef       	ldi	r19, 0xFF	; 255
    4a8a:	4f e7       	ldi	r20, 0x7F	; 127
    4a8c:	57 e4       	ldi	r21, 0x47	; 71
    4a8e:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4a92:	18 16       	cp	r1, r24
    4a94:	4c f5       	brge	.+82     	; 0x4ae8 <UltraSonicRightAction+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	40 e2       	ldi	r20, 0x20	; 32
    4aa4:	51 e4       	ldi	r21, 0x41	; 65
    4aa6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	bc 01       	movw	r22, r24
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	9e 83       	std	Y+6, r25	; 0x06
    4abc:	8d 83       	std	Y+5, r24	; 0x05
    4abe:	0f c0       	rjmp	.+30     	; 0x4ade <UltraSonicRightAction+0x2b8>
    4ac0:	88 ec       	ldi	r24, 0xC8	; 200
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	9c 83       	std	Y+4, r25	; 0x04
    4ac6:	8b 83       	std	Y+3, r24	; 0x03
    4ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    4aca:	9c 81       	ldd	r25, Y+4	; 0x04
    4acc:	01 97       	sbiw	r24, 0x01	; 1
    4ace:	f1 f7       	brne	.-4      	; 0x4acc <UltraSonicRightAction+0x2a6>
    4ad0:	9c 83       	std	Y+4, r25	; 0x04
    4ad2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ad8:	01 97       	sbiw	r24, 0x01	; 1
    4ada:	9e 83       	std	Y+6, r25	; 0x06
    4adc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ade:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae2:	00 97       	sbiw	r24, 0x00	; 0
    4ae4:	69 f7       	brne	.-38     	; 0x4ac0 <UltraSonicRightAction+0x29a>
    4ae6:	14 c0       	rjmp	.+40     	; 0x4b10 <UltraSonicRightAction+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    4aea:	78 85       	ldd	r23, Y+8	; 0x08
    4aec:	89 85       	ldd	r24, Y+9	; 0x09
    4aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4af4:	dc 01       	movw	r26, r24
    4af6:	cb 01       	movw	r24, r22
    4af8:	9e 83       	std	Y+6, r25	; 0x06
    4afa:	8d 83       	std	Y+5, r24	; 0x05
    4afc:	8d 81       	ldd	r24, Y+5	; 0x05
    4afe:	9e 81       	ldd	r25, Y+6	; 0x06
    4b00:	9a 83       	std	Y+2, r25	; 0x02
    4b02:	89 83       	std	Y+1, r24	; 0x01
    4b04:	89 81       	ldd	r24, Y+1	; 0x01
    4b06:	9a 81       	ldd	r25, Y+2	; 0x02
    4b08:	01 97       	sbiw	r24, 0x01	; 1
    4b0a:	f1 f7       	brne	.-4      	; 0x4b08 <UltraSonicRightAction+0x2e2>
    4b0c:	9a 83       	std	Y+2, r25	; 0x02
    4b0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
	DcMotor_VidRotate_Wheels1(STOP);
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    4b16:	80 e0       	ldi	r24, 0x00	; 0
    4b18:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
}
    4b1c:	aa 96       	adiw	r28, 0x2a	; 42
    4b1e:	0f b6       	in	r0, 0x3f	; 63
    4b20:	f8 94       	cli
    4b22:	de bf       	out	0x3e, r29	; 62
    4b24:	0f be       	out	0x3f, r0	; 63
    4b26:	cd bf       	out	0x3d, r28	; 61
    4b28:	cf 91       	pop	r28
    4b2a:	df 91       	pop	r29
    4b2c:	08 95       	ret

00004b2e <UltraSonicLeftAction>:
 Name        : UltraSonicLeftAction
 Input       : void
 Output      : void
 Description : if the opposit is blocked go right at second option
*/
void UltraSonicLeftAction () {
    4b2e:	df 93       	push	r29
    4b30:	cf 93       	push	r28
    4b32:	cd b7       	in	r28, 0x3d	; 61
    4b34:	de b7       	in	r29, 0x3e	; 62
    4b36:	aa 97       	sbiw	r28, 0x2a	; 42
    4b38:	0f b6       	in	r0, 0x3f	; 63
    4b3a:	f8 94       	cli
    4b3c:	de bf       	out	0x3e, r29	; 62
    4b3e:	0f be       	out	0x3f, r0	; 63
    4b40:	cd bf       	out	0x3d, r28	; 61
	SetAngleOfServo(ANGLE_POSITIVE90,ANGLE_ZERO);
    4b42:	80 e6       	ldi	r24, 0x60	; 96
    4b44:	99 e0       	ldi	r25, 0x09	; 9
    4b46:	6c ed       	ldi	r22, 0xDC	; 220
    4b48:	75 e0       	ldi	r23, 0x05	; 5
    4b4a:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <SetAngleOfServo>
    4b4e:	80 e0       	ldi	r24, 0x00	; 0
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	aa ef       	ldi	r26, 0xFA	; 250
    4b54:	b3 e4       	ldi	r27, 0x43	; 67
    4b56:	8f a3       	std	Y+39, r24	; 0x27
    4b58:	98 a7       	std	Y+40, r25	; 0x28
    4b5a:	a9 a7       	std	Y+41, r26	; 0x29
    4b5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b5e:	6f a1       	ldd	r22, Y+39	; 0x27
    4b60:	78 a5       	ldd	r23, Y+40	; 0x28
    4b62:	89 a5       	ldd	r24, Y+41	; 0x29
    4b64:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b66:	20 e0       	ldi	r18, 0x00	; 0
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	4a ef       	ldi	r20, 0xFA	; 250
    4b6c:	54 e4       	ldi	r21, 0x44	; 68
    4b6e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4b72:	dc 01       	movw	r26, r24
    4b74:	cb 01       	movw	r24, r22
    4b76:	8b a3       	std	Y+35, r24	; 0x23
    4b78:	9c a3       	std	Y+36, r25	; 0x24
    4b7a:	ad a3       	std	Y+37, r26	; 0x25
    4b7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    4b80:	7c a1       	ldd	r23, Y+36	; 0x24
    4b82:	8d a1       	ldd	r24, Y+37	; 0x25
    4b84:	9e a1       	ldd	r25, Y+38	; 0x26
    4b86:	20 e0       	ldi	r18, 0x00	; 0
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	40 e8       	ldi	r20, 0x80	; 128
    4b8c:	5f e3       	ldi	r21, 0x3F	; 63
    4b8e:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4b92:	88 23       	and	r24, r24
    4b94:	2c f4       	brge	.+10     	; 0x4ba0 <UltraSonicLeftAction+0x72>
		__ticks = 1;
    4b96:	81 e0       	ldi	r24, 0x01	; 1
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	9a a3       	std	Y+34, r25	; 0x22
    4b9c:	89 a3       	std	Y+33, r24	; 0x21
    4b9e:	3f c0       	rjmp	.+126    	; 0x4c1e <UltraSonicLeftAction+0xf0>
	else if (__tmp > 65535)
    4ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    4ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    4ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    4ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    4ba8:	20 e0       	ldi	r18, 0x00	; 0
    4baa:	3f ef       	ldi	r19, 0xFF	; 255
    4bac:	4f e7       	ldi	r20, 0x7F	; 127
    4bae:	57 e4       	ldi	r21, 0x47	; 71
    4bb0:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4bb4:	18 16       	cp	r1, r24
    4bb6:	4c f5       	brge	.+82     	; 0x4c0a <UltraSonicLeftAction+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bb8:	6f a1       	ldd	r22, Y+39	; 0x27
    4bba:	78 a5       	ldd	r23, Y+40	; 0x28
    4bbc:	89 a5       	ldd	r24, Y+41	; 0x29
    4bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bc0:	20 e0       	ldi	r18, 0x00	; 0
    4bc2:	30 e0       	ldi	r19, 0x00	; 0
    4bc4:	40 e2       	ldi	r20, 0x20	; 32
    4bc6:	51 e4       	ldi	r21, 0x41	; 65
    4bc8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4bcc:	dc 01       	movw	r26, r24
    4bce:	cb 01       	movw	r24, r22
    4bd0:	bc 01       	movw	r22, r24
    4bd2:	cd 01       	movw	r24, r26
    4bd4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4bd8:	dc 01       	movw	r26, r24
    4bda:	cb 01       	movw	r24, r22
    4bdc:	9a a3       	std	Y+34, r25	; 0x22
    4bde:	89 a3       	std	Y+33, r24	; 0x21
    4be0:	0f c0       	rjmp	.+30     	; 0x4c00 <UltraSonicLeftAction+0xd2>
    4be2:	88 ec       	ldi	r24, 0xC8	; 200
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	98 a3       	std	Y+32, r25	; 0x20
    4be8:	8f 8f       	std	Y+31, r24	; 0x1f
    4bea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4bec:	98 a1       	ldd	r25, Y+32	; 0x20
    4bee:	01 97       	sbiw	r24, 0x01	; 1
    4bf0:	f1 f7       	brne	.-4      	; 0x4bee <UltraSonicLeftAction+0xc0>
    4bf2:	98 a3       	std	Y+32, r25	; 0x20
    4bf4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    4bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    4bfa:	01 97       	sbiw	r24, 0x01	; 1
    4bfc:	9a a3       	std	Y+34, r25	; 0x22
    4bfe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c00:	89 a1       	ldd	r24, Y+33	; 0x21
    4c02:	9a a1       	ldd	r25, Y+34	; 0x22
    4c04:	00 97       	sbiw	r24, 0x00	; 0
    4c06:	69 f7       	brne	.-38     	; 0x4be2 <UltraSonicLeftAction+0xb4>
    4c08:	14 c0       	rjmp	.+40     	; 0x4c32 <UltraSonicLeftAction+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    4c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    4c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    4c10:	9e a1       	ldd	r25, Y+38	; 0x26
    4c12:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4c16:	dc 01       	movw	r26, r24
    4c18:	cb 01       	movw	r24, r22
    4c1a:	9a a3       	std	Y+34, r25	; 0x22
    4c1c:	89 a3       	std	Y+33, r24	; 0x21
    4c1e:	89 a1       	ldd	r24, Y+33	; 0x21
    4c20:	9a a1       	ldd	r25, Y+34	; 0x22
    4c22:	9e 8f       	std	Y+30, r25	; 0x1e
    4c24:	8d 8f       	std	Y+29, r24	; 0x1d
    4c26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c2a:	01 97       	sbiw	r24, 0x01	; 1
    4c2c:	f1 f7       	brne	.-4      	; 0x4c2a <UltraSonicLeftAction+0xfc>
    4c2e:	9e 8f       	std	Y+30, r25	; 0x1e
    4c30:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500); /* to notice the movement of servo */

	/* to go back and turn left direction */
	DcMotor_VidRotate_Wheels1(CLK_WISE);
    4c32:	81 e0       	ldi	r24, 0x01	; 1
    4c34:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(CLK_WISE);
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    4c3e:	80 e0       	ldi	r24, 0x00	; 0
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	a8 e4       	ldi	r26, 0x48	; 72
    4c44:	b3 e4       	ldi	r27, 0x43	; 67
    4c46:	89 8f       	std	Y+25, r24	; 0x19
    4c48:	9a 8f       	std	Y+26, r25	; 0x1a
    4c4a:	ab 8f       	std	Y+27, r26	; 0x1b
    4c4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c4e:	69 8d       	ldd	r22, Y+25	; 0x19
    4c50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c56:	20 e0       	ldi	r18, 0x00	; 0
    4c58:	30 e0       	ldi	r19, 0x00	; 0
    4c5a:	4a ef       	ldi	r20, 0xFA	; 250
    4c5c:	54 e4       	ldi	r21, 0x44	; 68
    4c5e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4c62:	dc 01       	movw	r26, r24
    4c64:	cb 01       	movw	r24, r22
    4c66:	8d 8b       	std	Y+21, r24	; 0x15
    4c68:	9e 8b       	std	Y+22, r25	; 0x16
    4c6a:	af 8b       	std	Y+23, r26	; 0x17
    4c6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    4c70:	7e 89       	ldd	r23, Y+22	; 0x16
    4c72:	8f 89       	ldd	r24, Y+23	; 0x17
    4c74:	98 8d       	ldd	r25, Y+24	; 0x18
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	40 e8       	ldi	r20, 0x80	; 128
    4c7c:	5f e3       	ldi	r21, 0x3F	; 63
    4c7e:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4c82:	88 23       	and	r24, r24
    4c84:	2c f4       	brge	.+10     	; 0x4c90 <UltraSonicLeftAction+0x162>
		__ticks = 1;
    4c86:	81 e0       	ldi	r24, 0x01	; 1
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	9c 8b       	std	Y+20, r25	; 0x14
    4c8c:	8b 8b       	std	Y+19, r24	; 0x13
    4c8e:	3f c0       	rjmp	.+126    	; 0x4d0e <UltraSonicLeftAction+0x1e0>
	else if (__tmp > 65535)
    4c90:	6d 89       	ldd	r22, Y+21	; 0x15
    4c92:	7e 89       	ldd	r23, Y+22	; 0x16
    4c94:	8f 89       	ldd	r24, Y+23	; 0x17
    4c96:	98 8d       	ldd	r25, Y+24	; 0x18
    4c98:	20 e0       	ldi	r18, 0x00	; 0
    4c9a:	3f ef       	ldi	r19, 0xFF	; 255
    4c9c:	4f e7       	ldi	r20, 0x7F	; 127
    4c9e:	57 e4       	ldi	r21, 0x47	; 71
    4ca0:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4ca4:	18 16       	cp	r1, r24
    4ca6:	4c f5       	brge	.+82     	; 0x4cfa <UltraSonicLeftAction+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ca8:	69 8d       	ldd	r22, Y+25	; 0x19
    4caa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4cac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	40 e2       	ldi	r20, 0x20	; 32
    4cb6:	51 e4       	ldi	r21, 0x41	; 65
    4cb8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4cbc:	dc 01       	movw	r26, r24
    4cbe:	cb 01       	movw	r24, r22
    4cc0:	bc 01       	movw	r22, r24
    4cc2:	cd 01       	movw	r24, r26
    4cc4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4cc8:	dc 01       	movw	r26, r24
    4cca:	cb 01       	movw	r24, r22
    4ccc:	9c 8b       	std	Y+20, r25	; 0x14
    4cce:	8b 8b       	std	Y+19, r24	; 0x13
    4cd0:	0f c0       	rjmp	.+30     	; 0x4cf0 <UltraSonicLeftAction+0x1c2>
    4cd2:	88 ec       	ldi	r24, 0xC8	; 200
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	9a 8b       	std	Y+18, r25	; 0x12
    4cd8:	89 8b       	std	Y+17, r24	; 0x11
    4cda:	89 89       	ldd	r24, Y+17	; 0x11
    4cdc:	9a 89       	ldd	r25, Y+18	; 0x12
    4cde:	01 97       	sbiw	r24, 0x01	; 1
    4ce0:	f1 f7       	brne	.-4      	; 0x4cde <UltraSonicLeftAction+0x1b0>
    4ce2:	9a 8b       	std	Y+18, r25	; 0x12
    4ce4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    4cea:	01 97       	sbiw	r24, 0x01	; 1
    4cec:	9c 8b       	std	Y+20, r25	; 0x14
    4cee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cf0:	8b 89       	ldd	r24, Y+19	; 0x13
    4cf2:	9c 89       	ldd	r25, Y+20	; 0x14
    4cf4:	00 97       	sbiw	r24, 0x00	; 0
    4cf6:	69 f7       	brne	.-38     	; 0x4cd2 <UltraSonicLeftAction+0x1a4>
    4cf8:	14 c0       	rjmp	.+40     	; 0x4d22 <UltraSonicLeftAction+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    4cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    4cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    4d00:	98 8d       	ldd	r25, Y+24	; 0x18
    4d02:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4d06:	dc 01       	movw	r26, r24
    4d08:	cb 01       	movw	r24, r22
    4d0a:	9c 8b       	std	Y+20, r25	; 0x14
    4d0c:	8b 8b       	std	Y+19, r24	; 0x13
    4d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    4d10:	9c 89       	ldd	r25, Y+20	; 0x14
    4d12:	98 8b       	std	Y+16, r25	; 0x10
    4d14:	8f 87       	std	Y+15, r24	; 0x0f
    4d16:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d18:	98 89       	ldd	r25, Y+16	; 0x10
    4d1a:	01 97       	sbiw	r24, 0x01	; 1
    4d1c:	f1 f7       	brne	.-4      	; 0x4d1a <UltraSonicLeftAction+0x1ec>
    4d1e:	98 8b       	std	Y+16, r25	; 0x10
    4d20:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	Timer2_VidSETDUTY(THREE_QUARTER_PERCENTAGE);
    4d22:	8b e4       	ldi	r24, 0x4B	; 75
    4d24:	0e 94 3d 1a 	call	0x347a	; 0x347a <Timer2_VidSETDUTY>
	DcMotor_VidRotate_Wheels1(CLK_WISE);
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    4d34:	80 e0       	ldi	r24, 0x00	; 0
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	a1 ee       	ldi	r26, 0xE1	; 225
    4d3a:	b3 e4       	ldi	r27, 0x43	; 67
    4d3c:	8b 87       	std	Y+11, r24	; 0x0b
    4d3e:	9c 87       	std	Y+12, r25	; 0x0c
    4d40:	ad 87       	std	Y+13, r26	; 0x0d
    4d42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	4a ef       	ldi	r20, 0xFA	; 250
    4d52:	54 e4       	ldi	r21, 0x44	; 68
    4d54:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4d58:	dc 01       	movw	r26, r24
    4d5a:	cb 01       	movw	r24, r22
    4d5c:	8f 83       	std	Y+7, r24	; 0x07
    4d5e:	98 87       	std	Y+8, r25	; 0x08
    4d60:	a9 87       	std	Y+9, r26	; 0x09
    4d62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d64:	6f 81       	ldd	r22, Y+7	; 0x07
    4d66:	78 85       	ldd	r23, Y+8	; 0x08
    4d68:	89 85       	ldd	r24, Y+9	; 0x09
    4d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d6c:	20 e0       	ldi	r18, 0x00	; 0
    4d6e:	30 e0       	ldi	r19, 0x00	; 0
    4d70:	40 e8       	ldi	r20, 0x80	; 128
    4d72:	5f e3       	ldi	r21, 0x3F	; 63
    4d74:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4d78:	88 23       	and	r24, r24
    4d7a:	2c f4       	brge	.+10     	; 0x4d86 <UltraSonicLeftAction+0x258>
		__ticks = 1;
    4d7c:	81 e0       	ldi	r24, 0x01	; 1
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	9e 83       	std	Y+6, r25	; 0x06
    4d82:	8d 83       	std	Y+5, r24	; 0x05
    4d84:	3f c0       	rjmp	.+126    	; 0x4e04 <UltraSonicLeftAction+0x2d6>
	else if (__tmp > 65535)
    4d86:	6f 81       	ldd	r22, Y+7	; 0x07
    4d88:	78 85       	ldd	r23, Y+8	; 0x08
    4d8a:	89 85       	ldd	r24, Y+9	; 0x09
    4d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d8e:	20 e0       	ldi	r18, 0x00	; 0
    4d90:	3f ef       	ldi	r19, 0xFF	; 255
    4d92:	4f e7       	ldi	r20, 0x7F	; 127
    4d94:	57 e4       	ldi	r21, 0x47	; 71
    4d96:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4d9a:	18 16       	cp	r1, r24
    4d9c:	4c f5       	brge	.+82     	; 0x4df0 <UltraSonicLeftAction+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	30 e0       	ldi	r19, 0x00	; 0
    4daa:	40 e2       	ldi	r20, 0x20	; 32
    4dac:	51 e4       	ldi	r21, 0x41	; 65
    4dae:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4db2:	dc 01       	movw	r26, r24
    4db4:	cb 01       	movw	r24, r22
    4db6:	bc 01       	movw	r22, r24
    4db8:	cd 01       	movw	r24, r26
    4dba:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4dbe:	dc 01       	movw	r26, r24
    4dc0:	cb 01       	movw	r24, r22
    4dc2:	9e 83       	std	Y+6, r25	; 0x06
    4dc4:	8d 83       	std	Y+5, r24	; 0x05
    4dc6:	0f c0       	rjmp	.+30     	; 0x4de6 <UltraSonicLeftAction+0x2b8>
    4dc8:	88 ec       	ldi	r24, 0xC8	; 200
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	9c 83       	std	Y+4, r25	; 0x04
    4dce:	8b 83       	std	Y+3, r24	; 0x03
    4dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    4dd4:	01 97       	sbiw	r24, 0x01	; 1
    4dd6:	f1 f7       	brne	.-4      	; 0x4dd4 <UltraSonicLeftAction+0x2a6>
    4dd8:	9c 83       	std	Y+4, r25	; 0x04
    4dda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    4dde:	9e 81       	ldd	r25, Y+6	; 0x06
    4de0:	01 97       	sbiw	r24, 0x01	; 1
    4de2:	9e 83       	std	Y+6, r25	; 0x06
    4de4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4de6:	8d 81       	ldd	r24, Y+5	; 0x05
    4de8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dea:	00 97       	sbiw	r24, 0x00	; 0
    4dec:	69 f7       	brne	.-38     	; 0x4dc8 <UltraSonicLeftAction+0x29a>
    4dee:	14 c0       	rjmp	.+40     	; 0x4e18 <UltraSonicLeftAction+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4df0:	6f 81       	ldd	r22, Y+7	; 0x07
    4df2:	78 85       	ldd	r23, Y+8	; 0x08
    4df4:	89 85       	ldd	r24, Y+9	; 0x09
    4df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4df8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4dfc:	dc 01       	movw	r26, r24
    4dfe:	cb 01       	movw	r24, r22
    4e00:	9e 83       	std	Y+6, r25	; 0x06
    4e02:	8d 83       	std	Y+5, r24	; 0x05
    4e04:	8d 81       	ldd	r24, Y+5	; 0x05
    4e06:	9e 81       	ldd	r25, Y+6	; 0x06
    4e08:	9a 83       	std	Y+2, r25	; 0x02
    4e0a:	89 83       	std	Y+1, r24	; 0x01
    4e0c:	89 81       	ldd	r24, Y+1	; 0x01
    4e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e10:	01 97       	sbiw	r24, 0x01	; 1
    4e12:	f1 f7       	brne	.-4      	; 0x4e10 <UltraSonicLeftAction+0x2e2>
    4e14:	9a 83       	std	Y+2, r25	; 0x02
    4e16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(450);
	DcMotor_VidRotate_Wheels1(STOP);
    4e18:	80 e0       	ldi	r24, 0x00	; 0
    4e1a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    4e1e:	80 e0       	ldi	r24, 0x00	; 0
    4e20:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
}
    4e24:	aa 96       	adiw	r28, 0x2a	; 42
    4e26:	0f b6       	in	r0, 0x3f	; 63
    4e28:	f8 94       	cli
    4e2a:	de bf       	out	0x3e, r29	; 62
    4e2c:	0f be       	out	0x3f, r0	; 63
    4e2e:	cd bf       	out	0x3d, r28	; 61
    4e30:	cf 91       	pop	r28
    4e32:	df 91       	pop	r29
    4e34:	08 95       	ret

00004e36 <UltraSonicStopAction>:
 Name        : UltraSonicStopAction
 Input       : void
 Output      : void
 Description : To stop if all directions is blocked
*/
void UltraSonicStopAction () {
    4e36:	df 93       	push	r29
    4e38:	cf 93       	push	r28
    4e3a:	cd b7       	in	r28, 0x3d	; 61
    4e3c:	de b7       	in	r29, 0x3e	; 62
    4e3e:	2e 97       	sbiw	r28, 0x0e	; 14
    4e40:	0f b6       	in	r0, 0x3f	; 63
    4e42:	f8 94       	cli
    4e44:	de bf       	out	0x3e, r29	; 62
    4e46:	0f be       	out	0x3f, r0	; 63
    4e48:	cd bf       	out	0x3d, r28	; 61
    ServoSetAngleOCR1B(ANGLE_ZERO);
    4e4a:	8c ed       	ldi	r24, 0xDC	; 220
    4e4c:	95 e0       	ldi	r25, 0x05	; 5
    4e4e:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <ServoSetAngleOCR1B>
	DcMotor_VidRotate_Wheels1(STOP);
    4e52:	80 e0       	ldi	r24, 0x00	; 0
    4e54:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    4e58:	80 e0       	ldi	r24, 0x00	; 0
    4e5a:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    4e5e:	80 e0       	ldi	r24, 0x00	; 0
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	aa ef       	ldi	r26, 0xFA	; 250
    4e64:	b4 e4       	ldi	r27, 0x44	; 68
    4e66:	8b 87       	std	Y+11, r24	; 0x0b
    4e68:	9c 87       	std	Y+12, r25	; 0x0c
    4e6a:	ad 87       	std	Y+13, r26	; 0x0d
    4e6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e76:	20 e0       	ldi	r18, 0x00	; 0
    4e78:	30 e0       	ldi	r19, 0x00	; 0
    4e7a:	4a ef       	ldi	r20, 0xFA	; 250
    4e7c:	54 e4       	ldi	r21, 0x44	; 68
    4e7e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4e82:	dc 01       	movw	r26, r24
    4e84:	cb 01       	movw	r24, r22
    4e86:	8f 83       	std	Y+7, r24	; 0x07
    4e88:	98 87       	std	Y+8, r25	; 0x08
    4e8a:	a9 87       	std	Y+9, r26	; 0x09
    4e8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e90:	78 85       	ldd	r23, Y+8	; 0x08
    4e92:	89 85       	ldd	r24, Y+9	; 0x09
    4e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e96:	20 e0       	ldi	r18, 0x00	; 0
    4e98:	30 e0       	ldi	r19, 0x00	; 0
    4e9a:	40 e8       	ldi	r20, 0x80	; 128
    4e9c:	5f e3       	ldi	r21, 0x3F	; 63
    4e9e:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4ea2:	88 23       	and	r24, r24
    4ea4:	2c f4       	brge	.+10     	; 0x4eb0 <UltraSonicStopAction+0x7a>
		__ticks = 1;
    4ea6:	81 e0       	ldi	r24, 0x01	; 1
    4ea8:	90 e0       	ldi	r25, 0x00	; 0
    4eaa:	9e 83       	std	Y+6, r25	; 0x06
    4eac:	8d 83       	std	Y+5, r24	; 0x05
    4eae:	3f c0       	rjmp	.+126    	; 0x4f2e <UltraSonicStopAction+0xf8>
	else if (__tmp > 65535)
    4eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    4eb2:	78 85       	ldd	r23, Y+8	; 0x08
    4eb4:	89 85       	ldd	r24, Y+9	; 0x09
    4eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eb8:	20 e0       	ldi	r18, 0x00	; 0
    4eba:	3f ef       	ldi	r19, 0xFF	; 255
    4ebc:	4f e7       	ldi	r20, 0x7F	; 127
    4ebe:	57 e4       	ldi	r21, 0x47	; 71
    4ec0:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4ec4:	18 16       	cp	r1, r24
    4ec6:	4c f5       	brge	.+82     	; 0x4f1a <UltraSonicStopAction+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ed0:	20 e0       	ldi	r18, 0x00	; 0
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	40 e2       	ldi	r20, 0x20	; 32
    4ed6:	51 e4       	ldi	r21, 0x41	; 65
    4ed8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4edc:	dc 01       	movw	r26, r24
    4ede:	cb 01       	movw	r24, r22
    4ee0:	bc 01       	movw	r22, r24
    4ee2:	cd 01       	movw	r24, r26
    4ee4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4ee8:	dc 01       	movw	r26, r24
    4eea:	cb 01       	movw	r24, r22
    4eec:	9e 83       	std	Y+6, r25	; 0x06
    4eee:	8d 83       	std	Y+5, r24	; 0x05
    4ef0:	0f c0       	rjmp	.+30     	; 0x4f10 <UltraSonicStopAction+0xda>
    4ef2:	88 ec       	ldi	r24, 0xC8	; 200
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	9c 83       	std	Y+4, r25	; 0x04
    4ef8:	8b 83       	std	Y+3, r24	; 0x03
    4efa:	8b 81       	ldd	r24, Y+3	; 0x03
    4efc:	9c 81       	ldd	r25, Y+4	; 0x04
    4efe:	01 97       	sbiw	r24, 0x01	; 1
    4f00:	f1 f7       	brne	.-4      	; 0x4efe <UltraSonicStopAction+0xc8>
    4f02:	9c 83       	std	Y+4, r25	; 0x04
    4f04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f06:	8d 81       	ldd	r24, Y+5	; 0x05
    4f08:	9e 81       	ldd	r25, Y+6	; 0x06
    4f0a:	01 97       	sbiw	r24, 0x01	; 1
    4f0c:	9e 83       	std	Y+6, r25	; 0x06
    4f0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f10:	8d 81       	ldd	r24, Y+5	; 0x05
    4f12:	9e 81       	ldd	r25, Y+6	; 0x06
    4f14:	00 97       	sbiw	r24, 0x00	; 0
    4f16:	69 f7       	brne	.-38     	; 0x4ef2 <UltraSonicStopAction+0xbc>
    4f18:	14 c0       	rjmp	.+40     	; 0x4f42 <UltraSonicStopAction+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    4f1c:	78 85       	ldd	r23, Y+8	; 0x08
    4f1e:	89 85       	ldd	r24, Y+9	; 0x09
    4f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f22:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4f26:	dc 01       	movw	r26, r24
    4f28:	cb 01       	movw	r24, r22
    4f2a:	9e 83       	std	Y+6, r25	; 0x06
    4f2c:	8d 83       	std	Y+5, r24	; 0x05
    4f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f30:	9e 81       	ldd	r25, Y+6	; 0x06
    4f32:	9a 83       	std	Y+2, r25	; 0x02
    4f34:	89 83       	std	Y+1, r24	; 0x01
    4f36:	89 81       	ldd	r24, Y+1	; 0x01
    4f38:	9a 81       	ldd	r25, Y+2	; 0x02
    4f3a:	01 97       	sbiw	r24, 0x01	; 1
    4f3c:	f1 f7       	brne	.-4      	; 0x4f3a <UltraSonicStopAction+0x104>
    4f3e:	9a 83       	std	Y+2, r25	; 0x02
    4f40:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DWSTOP);
}
    4f42:	2e 96       	adiw	r28, 0x0e	; 14
    4f44:	0f b6       	in	r0, 0x3f	; 63
    4f46:	f8 94       	cli
    4f48:	de bf       	out	0x3e, r29	; 62
    4f4a:	0f be       	out	0x3f, r0	; 63
    4f4c:	cd bf       	out	0x3d, r28	; 61
    4f4e:	cf 91       	pop	r28
    4f50:	df 91       	pop	r29
    4f52:	08 95       	ret

00004f54 <MultipleTasksCar_MapLine>:
 Input       : void
 Output      : void
 Description : to get into another selected point
*/

void MultipleTasksCar_MapLine(){
    4f54:	df 93       	push	r29
    4f56:	cf 93       	push	r28
    4f58:	cd b7       	in	r28, 0x3d	; 61
    4f5a:	de b7       	in	r29, 0x3e	; 62
    4f5c:	2b 97       	sbiw	r28, 0x0b	; 11
    4f5e:	0f b6       	in	r0, 0x3f	; 63
    4f60:	f8 94       	cli
    4f62:	de bf       	out	0x3e, r29	; 62
    4f64:	0f be       	out	0x3f, r0	; 63
    4f66:	cd bf       	out	0x3d, r28	; 61
	/* flags */
	u8 YaxisFlag       = HIGH ;           //to count on Yaxis
    4f68:	81 e0       	ldi	r24, 0x01	; 1
    4f6a:	8b 87       	std	Y+11, r24	; 0x0b
	u8 XaxisFlag       = LOW  ;           //to count on Xaxis
    4f6c:	1a 86       	std	Y+10, r1	; 0x0a
	u8 UpStairFlag_Y   = HIGH ;           //to determine the direction of move on Yaxis
    4f6e:	81 e0       	ldi	r24, 0x01	; 1
    4f70:	89 87       	std	Y+9, r24	; 0x09
	u8 DownStairFlag_Y = LOW  ;           //to determine the direction of move on Yaxis
    4f72:	18 86       	std	Y+8, r1	; 0x08
	u8 UpStairFlag_X   = HIGH ;           //to determine the direction of move on Xaxis
    4f74:	81 e0       	ldi	r24, 0x01	; 1
    4f76:	8f 83       	std	Y+7, r24	; 0x07
	u8 DownStairFlag_X = LOW  ;           //to determine the direction of move on Xaxis
    4f78:	1e 82       	std	Y+6, r1	; 0x06
	u8 TurnYflag       = HIGH ;           //to determine turning on Yaxis
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	8d 83       	std	Y+5, r24	; 0x05
	u8 TurnXflag       = HIGH ;           //to determine turning on Xaxis
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	8c 83       	std	Y+4, r24	; 0x04
	u8 Stop            = LOW  ;           //to stop moving
    4f82:	1b 82       	std	Y+3, r1	; 0x03

	/*  To stack programme to enter the target axises X then Y  */

	/* to enter x axis */
	while (1){
		TargerPoint[0] = MultipleTasksCar_GetMode()  ;
    4f84:	0e 94 0b 21 	call	0x4216	; 0x4216 <MultipleTasksCar_GetMode>
    4f88:	80 93 aa 01 	sts	0x01AA, r24

		if (TargerPoint[0] <='4' && TargerPoint[0] >= '0' ){
    4f8c:	80 91 aa 01 	lds	r24, 0x01AA
    4f90:	85 33       	cpi	r24, 0x35	; 53
    4f92:	c0 f7       	brcc	.-16     	; 0x4f84 <MultipleTasksCar_MapLine+0x30>
    4f94:	80 91 aa 01 	lds	r24, 0x01AA
    4f98:	80 33       	cpi	r24, 0x30	; 48
    4f9a:	a0 f3       	brcs	.-24     	; 0x4f84 <MultipleTasksCar_MapLine+0x30>
			TargerPoint[0] = TargerPoint[0] - '0' ;
    4f9c:	80 91 aa 01 	lds	r24, 0x01AA
    4fa0:	80 53       	subi	r24, 0x30	; 48
    4fa2:	80 93 aa 01 	sts	0x01AA, r24

	}//end while

	/* to enter y axis */
	while (1){
		TargerPoint[1] = MultipleTasksCar_GetMode()  ;
    4fa6:	0e 94 0b 21 	call	0x4216	; 0x4216 <MultipleTasksCar_GetMode>
    4faa:	80 93 ab 01 	sts	0x01AB, r24

		if (TargerPoint[1] <='4' && TargerPoint[1] >= '0' ){
    4fae:	80 91 ab 01 	lds	r24, 0x01AB
    4fb2:	85 33       	cpi	r24, 0x35	; 53
    4fb4:	c0 f7       	brcc	.-16     	; 0x4fa6 <MultipleTasksCar_MapLine+0x52>
    4fb6:	80 91 ab 01 	lds	r24, 0x01AB
    4fba:	80 33       	cpi	r24, 0x30	; 48
    4fbc:	a0 f3       	brcs	.-24     	; 0x4fa6 <MultipleTasksCar_MapLine+0x52>
			TargerPoint[1] = TargerPoint[1] - '0' ;
    4fbe:	80 91 ab 01 	lds	r24, 0x01AB
    4fc2:	80 53       	subi	r24, 0x30	; 48
    4fc4:	80 93 ab 01 	sts	0x01AB, r24
	}//end while

    /************************************************************/

	/* To edit car if point under the acual point */
	if ( TargerPoint[Y_AXIS] <  ActualPoint[Y_AXIS] && TurnYflag ){
    4fc8:	90 91 ab 01 	lds	r25, 0x01AB
    4fcc:	80 91 a9 01 	lds	r24, 0x01A9
    4fd0:	98 17       	cp	r25, r24
    4fd2:	40 f4       	brcc	.+16     	; 0x4fe4 <MultipleTasksCar_MapLine+0x90>
		if (TargerPoint[1] <='4' && TargerPoint[1] >= '0' ){
			TargerPoint[1] = TargerPoint[1] - '0' ;
			break ;
		}//end if

	}//end while
    4fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fd6:	88 23       	and	r24, r24
    4fd8:	29 f0       	breq	.+10     	; 0x4fe4 <MultipleTasksCar_MapLine+0x90>
    /************************************************************/

	/* To edit car if point under the acual point */
	if ( TargerPoint[Y_AXIS] <  ActualPoint[Y_AXIS] && TurnYflag ){
		/* to turn 180 degree */
		MultipleTasksCar_TurnBack();
    4fda:	0e 94 a4 2a 	call	0x5548	; 0x5548 <MultipleTasksCar_TurnBack>

		/* to raise down stair flag */
		DownStairFlag_Y = HIGH ;
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	88 87       	std	Y+8, r24	; 0x08
		UpStairFlag_Y   = LOW  ;
    4fe2:	19 86       	std	Y+9, r1	; 0x09
	}
	/************************************************/

	/* To edit car if point under the acual point */
	if ( TargerPoint[X_AXIS] <  ActualPoint[X_AXIS] && TurnXflag ){
    4fe4:	90 91 aa 01 	lds	r25, 0x01AA
    4fe8:	80 91 a8 01 	lds	r24, 0x01A8
    4fec:	98 17       	cp	r25, r24
    4fee:	38 f4       	brcc	.+14     	; 0x4ffe <MultipleTasksCar_MapLine+0xaa>
    4ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ff2:	88 23       	and	r24, r24
    4ff4:	21 f0       	breq	.+8      	; 0x4ffe <MultipleTasksCar_MapLine+0xaa>
		/* to raise down stair flag */
		DownStairFlag_X = HIGH ;
    4ff6:	81 e0       	ldi	r24, 0x01	; 1
    4ff8:	8e 83       	std	Y+6, r24	; 0x06
		UpStairFlag_X   = LOW  ;
    4ffa:	1f 82       	std	Y+7, r1	; 0x07

		TurnXflag = LOW ;
    4ffc:	1c 82       	std	Y+4, r1	; 0x04
	}
	/************************************************/

	if ( (UpStairFlag_Y && UpStairFlag_X ) || (!UpStairFlag_Y && !UpStairFlag_X ) ){
    4ffe:	89 85       	ldd	r24, Y+9	; 0x09
    5000:	88 23       	and	r24, r24
    5002:	19 f0       	breq	.+6      	; 0x500a <MultipleTasksCar_MapLine+0xb6>
    5004:	8f 81       	ldd	r24, Y+7	; 0x07
    5006:	88 23       	and	r24, r24
    5008:	31 f4       	brne	.+12     	; 0x5016 <MultipleTasksCar_MapLine+0xc2>
    500a:	89 85       	ldd	r24, Y+9	; 0x09
    500c:	88 23       	and	r24, r24
    500e:	31 f4       	brne	.+12     	; 0x501c <MultipleTasksCar_MapLine+0xc8>
    5010:	8f 81       	ldd	r24, Y+7	; 0x07
    5012:	88 23       	and	r24, r24
    5014:	19 f4       	brne	.+6      	; 0x501c <MultipleTasksCar_MapLine+0xc8>
		TurnYflag = HIGH ;
    5016:	81 e0       	ldi	r24, 0x01	; 1
    5018:	8d 83       	std	Y+5, r24	; 0x05
    501a:	77 c0       	rjmp	.+238    	; 0x510a <MultipleTasksCar_MapLine+0x1b6>
	}
	else if ((UpStairFlag_Y && !UpStairFlag_X ) || (!UpStairFlag_Y && UpStairFlag_X ) ){
    501c:	89 85       	ldd	r24, Y+9	; 0x09
    501e:	88 23       	and	r24, r24
    5020:	19 f0       	breq	.+6      	; 0x5028 <MultipleTasksCar_MapLine+0xd4>
    5022:	8f 81       	ldd	r24, Y+7	; 0x07
    5024:	88 23       	and	r24, r24
    5026:	41 f0       	breq	.+16     	; 0x5038 <MultipleTasksCar_MapLine+0xe4>
    5028:	89 85       	ldd	r24, Y+9	; 0x09
    502a:	88 23       	and	r24, r24
    502c:	09 f0       	breq	.+2      	; 0x5030 <MultipleTasksCar_MapLine+0xdc>
    502e:	6d c0       	rjmp	.+218    	; 0x510a <MultipleTasksCar_MapLine+0x1b6>
    5030:	8f 81       	ldd	r24, Y+7	; 0x07
    5032:	88 23       	and	r24, r24
    5034:	09 f4       	brne	.+2      	; 0x5038 <MultipleTasksCar_MapLine+0xe4>
    5036:	69 c0       	rjmp	.+210    	; 0x510a <MultipleTasksCar_MapLine+0x1b6>
		TurnYflag = LOW ;
    5038:	1d 82       	std	Y+5, r1	; 0x05
    503a:	67 c0       	rjmp	.+206    	; 0x510a <MultipleTasksCar_MapLine+0x1b6>

	/*  To Runing car  */
	while (Stop != HIGH ){

		/*  get IR conditon  */
		u8 IRRight   = DIO_U8GetPinValue(IR_PORT_1,IR_PIN_RIGHT);
    503c:	82 e0       	ldi	r24, 0x02	; 2
    503e:	63 e0       	ldi	r22, 0x03	; 3
    5040:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_U8GetPinValue>
    5044:	8a 83       	std	Y+2, r24	; 0x02
		u8 IRLeft    = DIO_U8GetPinValue(IR_PORT_2,IR_PIN_LEFT);
    5046:	83 e0       	ldi	r24, 0x03	; 3
    5048:	60 e0       	ldi	r22, 0x00	; 0
    504a:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_U8GetPinValue>
    504e:	89 83       	std	Y+1, r24	; 0x01
		/*********************/

		/* to walk up  */
		DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    5050:	82 e0       	ldi	r24, 0x02	; 2
    5052:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    5056:	82 e0       	ldi	r24, 0x02	; 2
    5058:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>

		 /* if detect black line by two ir sensor*/
		 if ( IRRight &&  IRLeft ){
    505c:	8a 81       	ldd	r24, Y+2	; 0x02
    505e:	88 23       	and	r24, r24
    5060:	09 f4       	brne	.+2      	; 0x5064 <MultipleTasksCar_MapLine+0x110>
    5062:	53 c0       	rjmp	.+166    	; 0x510a <MultipleTasksCar_MapLine+0x1b6>
    5064:	89 81       	ldd	r24, Y+1	; 0x01
    5066:	88 23       	and	r24, r24
    5068:	09 f4       	brne	.+2      	; 0x506c <MultipleTasksCar_MapLine+0x118>
    506a:	4f c0       	rjmp	.+158    	; 0x510a <MultipleTasksCar_MapLine+0x1b6>
			 /* to stop motors to observe the movement*/
			 MultipleTasksCar_StopActionDelayed();
    506c:	0e 94 35 2b 	call	0x566a	; 0x566a <MultipleTasksCar_StopActionDelayed>

			 if (YaxisFlag){
    5070:	8b 85       	ldd	r24, Y+11	; 0x0b
    5072:	88 23       	and	r24, r24
    5074:	91 f0       	breq	.+36     	; 0x509a <MultipleTasksCar_MapLine+0x146>
				 /* to increment or decrement actual point */
				 if (UpStairFlag_Y){
    5076:	89 85       	ldd	r24, Y+9	; 0x09
    5078:	88 23       	and	r24, r24
    507a:	31 f0       	breq	.+12     	; 0x5088 <MultipleTasksCar_MapLine+0x134>
					ActualPoint[Y_AXIS]++ ;
    507c:	80 91 a9 01 	lds	r24, 0x01A9
    5080:	8f 5f       	subi	r24, 0xFF	; 255
    5082:	80 93 a9 01 	sts	0x01A9, r24
    5086:	1a c0       	rjmp	.+52     	; 0x50bc <MultipleTasksCar_MapLine+0x168>
				 }
				 else if (DownStairFlag_Y){
    5088:	88 85       	ldd	r24, Y+8	; 0x08
    508a:	88 23       	and	r24, r24
    508c:	b9 f0       	breq	.+46     	; 0x50bc <MultipleTasksCar_MapLine+0x168>
					 ActualPoint[Y_AXIS]-- ;
    508e:	80 91 a9 01 	lds	r24, 0x01A9
    5092:	81 50       	subi	r24, 0x01	; 1
    5094:	80 93 a9 01 	sts	0x01A9, r24
    5098:	11 c0       	rjmp	.+34     	; 0x50bc <MultipleTasksCar_MapLine+0x168>
				 }
			 }
			 else {
				 /* to increment or decrement actual point */
				 if (UpStairFlag_X){
    509a:	8f 81       	ldd	r24, Y+7	; 0x07
    509c:	88 23       	and	r24, r24
    509e:	31 f0       	breq	.+12     	; 0x50ac <MultipleTasksCar_MapLine+0x158>
					ActualPoint[X_AXIS]++ ;
    50a0:	80 91 a8 01 	lds	r24, 0x01A8
    50a4:	8f 5f       	subi	r24, 0xFF	; 255
    50a6:	80 93 a8 01 	sts	0x01A8, r24
    50aa:	08 c0       	rjmp	.+16     	; 0x50bc <MultipleTasksCar_MapLine+0x168>
				 }
				else if (DownStairFlag_X){
    50ac:	8e 81       	ldd	r24, Y+6	; 0x06
    50ae:	88 23       	and	r24, r24
    50b0:	29 f0       	breq	.+10     	; 0x50bc <MultipleTasksCar_MapLine+0x168>
					 ActualPoint[X_AXIS]-- ;
    50b2:	80 91 a8 01 	lds	r24, 0x01A8
    50b6:	81 50       	subi	r24, 0x01	; 1
    50b8:	80 93 a8 01 	sts	0x01A8, r24
				 }
			 }

			if (ActualPoint[Y_AXIS] == TargerPoint[Y_AXIS] && YaxisFlag ){
    50bc:	90 91 a9 01 	lds	r25, 0x01A9
    50c0:	80 91 ab 01 	lds	r24, 0x01AB
    50c4:	98 17       	cp	r25, r24
    50c6:	71 f4       	brne	.+28     	; 0x50e4 <MultipleTasksCar_MapLine+0x190>
    50c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    50ca:	88 23       	and	r24, r24
    50cc:	59 f0       	breq	.+22     	; 0x50e4 <MultipleTasksCar_MapLine+0x190>
				if (TurnYflag){
    50ce:	8d 81       	ldd	r24, Y+5	; 0x05
    50d0:	88 23       	and	r24, r24
    50d2:	19 f0       	breq	.+6      	; 0x50da <MultipleTasksCar_MapLine+0x186>
					/*  right action  */
					MultipleTasksCar_RightAction();
    50d4:	0e 94 92 28 	call	0x5124	; 0x5124 <MultipleTasksCar_RightAction>
    50d8:	02 c0       	rjmp	.+4      	; 0x50de <MultipleTasksCar_MapLine+0x18a>
				}
				else {
					/*  left action  */
					MultipleTasksCar_LeftAction();
    50da:	0e 94 9b 29 	call	0x5336	; 0x5336 <MultipleTasksCar_LeftAction>
				}

				/* To enable turn right or left one time */
				YaxisFlag = LOW ;
    50de:	1b 86       	std	Y+11, r1	; 0x0b
				XaxisFlag = HIGH;
    50e0:	81 e0       	ldi	r24, 0x01	; 1
    50e2:	8a 87       	std	Y+10, r24	; 0x0a
			}


			if (ActualPoint[X_AXIS] == TargerPoint[X_AXIS] && XaxisFlag ){
    50e4:	90 91 a8 01 	lds	r25, 0x01A8
    50e8:	80 91 aa 01 	lds	r24, 0x01AA
    50ec:	98 17       	cp	r25, r24
    50ee:	69 f4       	brne	.+26     	; 0x510a <MultipleTasksCar_MapLine+0x1b6>
    50f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    50f2:	88 23       	and	r24, r24
    50f4:	51 f0       	breq	.+20     	; 0x510a <MultipleTasksCar_MapLine+0x1b6>
				if (TurnXflag){
    50f6:	8c 81       	ldd	r24, Y+4	; 0x04
    50f8:	88 23       	and	r24, r24
    50fa:	19 f0       	breq	.+6      	; 0x5102 <MultipleTasksCar_MapLine+0x1ae>
					/*  left action  */
					MultipleTasksCar_LeftAction();
    50fc:	0e 94 9b 29 	call	0x5336	; 0x5336 <MultipleTasksCar_LeftAction>
    5100:	02 c0       	rjmp	.+4      	; 0x5106 <MultipleTasksCar_MapLine+0x1b2>
				}
				else {
					/*  right action  */
					MultipleTasksCar_RightAction();
    5102:	0e 94 92 28 	call	0x5124	; 0x5124 <MultipleTasksCar_RightAction>
				}

				/* rising stop flag  */
				Stop = HIGH ;
    5106:	81 e0       	ldi	r24, 0x01	; 1
    5108:	8b 83       	std	Y+3, r24	; 0x03
	else if ((UpStairFlag_Y && !UpStairFlag_X ) || (!UpStairFlag_Y && UpStairFlag_X ) ){
		TurnYflag = LOW ;
	}

	/*  To Runing car  */
	while (Stop != HIGH ){
    510a:	8b 81       	ldd	r24, Y+3	; 0x03
    510c:	81 30       	cpi	r24, 0x01	; 1
    510e:	09 f0       	breq	.+2      	; 0x5112 <MultipleTasksCar_MapLine+0x1be>
    5110:	95 cf       	rjmp	.-214    	; 0x503c <MultipleTasksCar_MapLine+0xe8>
				Stop = HIGH ;
			}

		 }//end else if
	}//end while(1)
}
    5112:	2b 96       	adiw	r28, 0x0b	; 11
    5114:	0f b6       	in	r0, 0x3f	; 63
    5116:	f8 94       	cli
    5118:	de bf       	out	0x3e, r29	; 62
    511a:	0f be       	out	0x3f, r0	; 63
    511c:	cd bf       	out	0x3d, r28	; 61
    511e:	cf 91       	pop	r28
    5120:	df 91       	pop	r29
    5122:	08 95       	ret

00005124 <MultipleTasksCar_RightAction>:
 Name        : MultipleTasksCar_RightAction
 Input       : void
 Output      : void
 Description :
*/
void MultipleTasksCar_RightAction()        {
    5124:	df 93       	push	r29
    5126:	cf 93       	push	r28
    5128:	cd b7       	in	r28, 0x3d	; 61
    512a:	de b7       	in	r29, 0x3e	; 62
    512c:	6c 97       	sbiw	r28, 0x1c	; 28
    512e:	0f b6       	in	r0, 0x3f	; 63
    5130:	f8 94       	cli
    5132:	de bf       	out	0x3e, r29	; 62
    5134:	0f be       	out	0x3f, r0	; 63
    5136:	cd bf       	out	0x3d, r28	; 61
	DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    5138:	82 e0       	ldi	r24, 0x02	; 2
    513a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    513e:	82 e0       	ldi	r24, 0x02	; 2
    5140:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    5144:	80 e0       	ldi	r24, 0x00	; 0
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	a2 e0       	ldi	r26, 0x02	; 2
    514a:	b3 e4       	ldi	r27, 0x43	; 67
    514c:	89 8f       	std	Y+25, r24	; 0x19
    514e:	9a 8f       	std	Y+26, r25	; 0x1a
    5150:	ab 8f       	std	Y+27, r26	; 0x1b
    5152:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5154:	69 8d       	ldd	r22, Y+25	; 0x19
    5156:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    515a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    515c:	20 e0       	ldi	r18, 0x00	; 0
    515e:	30 e0       	ldi	r19, 0x00	; 0
    5160:	4a ef       	ldi	r20, 0xFA	; 250
    5162:	54 e4       	ldi	r21, 0x44	; 68
    5164:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5168:	dc 01       	movw	r26, r24
    516a:	cb 01       	movw	r24, r22
    516c:	8d 8b       	std	Y+21, r24	; 0x15
    516e:	9e 8b       	std	Y+22, r25	; 0x16
    5170:	af 8b       	std	Y+23, r26	; 0x17
    5172:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5174:	6d 89       	ldd	r22, Y+21	; 0x15
    5176:	7e 89       	ldd	r23, Y+22	; 0x16
    5178:	8f 89       	ldd	r24, Y+23	; 0x17
    517a:	98 8d       	ldd	r25, Y+24	; 0x18
    517c:	20 e0       	ldi	r18, 0x00	; 0
    517e:	30 e0       	ldi	r19, 0x00	; 0
    5180:	40 e8       	ldi	r20, 0x80	; 128
    5182:	5f e3       	ldi	r21, 0x3F	; 63
    5184:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    5188:	88 23       	and	r24, r24
    518a:	2c f4       	brge	.+10     	; 0x5196 <MultipleTasksCar_RightAction+0x72>
		__ticks = 1;
    518c:	81 e0       	ldi	r24, 0x01	; 1
    518e:	90 e0       	ldi	r25, 0x00	; 0
    5190:	9c 8b       	std	Y+20, r25	; 0x14
    5192:	8b 8b       	std	Y+19, r24	; 0x13
    5194:	3f c0       	rjmp	.+126    	; 0x5214 <MultipleTasksCar_RightAction+0xf0>
	else if (__tmp > 65535)
    5196:	6d 89       	ldd	r22, Y+21	; 0x15
    5198:	7e 89       	ldd	r23, Y+22	; 0x16
    519a:	8f 89       	ldd	r24, Y+23	; 0x17
    519c:	98 8d       	ldd	r25, Y+24	; 0x18
    519e:	20 e0       	ldi	r18, 0x00	; 0
    51a0:	3f ef       	ldi	r19, 0xFF	; 255
    51a2:	4f e7       	ldi	r20, 0x7F	; 127
    51a4:	57 e4       	ldi	r21, 0x47	; 71
    51a6:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    51aa:	18 16       	cp	r1, r24
    51ac:	4c f5       	brge	.+82     	; 0x5200 <MultipleTasksCar_RightAction+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51ae:	69 8d       	ldd	r22, Y+25	; 0x19
    51b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51b6:	20 e0       	ldi	r18, 0x00	; 0
    51b8:	30 e0       	ldi	r19, 0x00	; 0
    51ba:	40 e2       	ldi	r20, 0x20	; 32
    51bc:	51 e4       	ldi	r21, 0x41	; 65
    51be:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    51c2:	dc 01       	movw	r26, r24
    51c4:	cb 01       	movw	r24, r22
    51c6:	bc 01       	movw	r22, r24
    51c8:	cd 01       	movw	r24, r26
    51ca:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    51ce:	dc 01       	movw	r26, r24
    51d0:	cb 01       	movw	r24, r22
    51d2:	9c 8b       	std	Y+20, r25	; 0x14
    51d4:	8b 8b       	std	Y+19, r24	; 0x13
    51d6:	0f c0       	rjmp	.+30     	; 0x51f6 <MultipleTasksCar_RightAction+0xd2>
    51d8:	88 ec       	ldi	r24, 0xC8	; 200
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	9a 8b       	std	Y+18, r25	; 0x12
    51de:	89 8b       	std	Y+17, r24	; 0x11
    51e0:	89 89       	ldd	r24, Y+17	; 0x11
    51e2:	9a 89       	ldd	r25, Y+18	; 0x12
    51e4:	01 97       	sbiw	r24, 0x01	; 1
    51e6:	f1 f7       	brne	.-4      	; 0x51e4 <MultipleTasksCar_RightAction+0xc0>
    51e8:	9a 8b       	std	Y+18, r25	; 0x12
    51ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51ec:	8b 89       	ldd	r24, Y+19	; 0x13
    51ee:	9c 89       	ldd	r25, Y+20	; 0x14
    51f0:	01 97       	sbiw	r24, 0x01	; 1
    51f2:	9c 8b       	std	Y+20, r25	; 0x14
    51f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51f6:	8b 89       	ldd	r24, Y+19	; 0x13
    51f8:	9c 89       	ldd	r25, Y+20	; 0x14
    51fa:	00 97       	sbiw	r24, 0x00	; 0
    51fc:	69 f7       	brne	.-38     	; 0x51d8 <MultipleTasksCar_RightAction+0xb4>
    51fe:	14 c0       	rjmp	.+40     	; 0x5228 <MultipleTasksCar_RightAction+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5200:	6d 89       	ldd	r22, Y+21	; 0x15
    5202:	7e 89       	ldd	r23, Y+22	; 0x16
    5204:	8f 89       	ldd	r24, Y+23	; 0x17
    5206:	98 8d       	ldd	r25, Y+24	; 0x18
    5208:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    520c:	dc 01       	movw	r26, r24
    520e:	cb 01       	movw	r24, r22
    5210:	9c 8b       	std	Y+20, r25	; 0x14
    5212:	8b 8b       	std	Y+19, r24	; 0x13
    5214:	8b 89       	ldd	r24, Y+19	; 0x13
    5216:	9c 89       	ldd	r25, Y+20	; 0x14
    5218:	98 8b       	std	Y+16, r25	; 0x10
    521a:	8f 87       	std	Y+15, r24	; 0x0f
    521c:	8f 85       	ldd	r24, Y+15	; 0x0f
    521e:	98 89       	ldd	r25, Y+16	; 0x10
    5220:	01 97       	sbiw	r24, 0x01	; 1
    5222:	f1 f7       	brne	.-4      	; 0x5220 <MultipleTasksCar_RightAction+0xfc>
    5224:	98 8b       	std	Y+16, r25	; 0x10
    5226:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(DFHVUD);    //for Three Quarter velocity
	DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    5228:	82 e0       	ldi	r24, 0x02	; 2
    522a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(CLK_WISE);
    522e:	81 e0       	ldi	r24, 0x01	; 1
    5230:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    5234:	80 e0       	ldi	r24, 0x00	; 0
    5236:	90 e8       	ldi	r25, 0x80	; 128
    5238:	ad e1       	ldi	r26, 0x1D	; 29
    523a:	b4 e4       	ldi	r27, 0x44	; 68
    523c:	8b 87       	std	Y+11, r24	; 0x0b
    523e:	9c 87       	std	Y+12, r25	; 0x0c
    5240:	ad 87       	std	Y+13, r26	; 0x0d
    5242:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5244:	6b 85       	ldd	r22, Y+11	; 0x0b
    5246:	7c 85       	ldd	r23, Y+12	; 0x0c
    5248:	8d 85       	ldd	r24, Y+13	; 0x0d
    524a:	9e 85       	ldd	r25, Y+14	; 0x0e
    524c:	20 e0       	ldi	r18, 0x00	; 0
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	4a ef       	ldi	r20, 0xFA	; 250
    5252:	54 e4       	ldi	r21, 0x44	; 68
    5254:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5258:	dc 01       	movw	r26, r24
    525a:	cb 01       	movw	r24, r22
    525c:	8f 83       	std	Y+7, r24	; 0x07
    525e:	98 87       	std	Y+8, r25	; 0x08
    5260:	a9 87       	std	Y+9, r26	; 0x09
    5262:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5264:	6f 81       	ldd	r22, Y+7	; 0x07
    5266:	78 85       	ldd	r23, Y+8	; 0x08
    5268:	89 85       	ldd	r24, Y+9	; 0x09
    526a:	9a 85       	ldd	r25, Y+10	; 0x0a
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	40 e8       	ldi	r20, 0x80	; 128
    5272:	5f e3       	ldi	r21, 0x3F	; 63
    5274:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    5278:	88 23       	and	r24, r24
    527a:	2c f4       	brge	.+10     	; 0x5286 <MultipleTasksCar_RightAction+0x162>
		__ticks = 1;
    527c:	81 e0       	ldi	r24, 0x01	; 1
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	9e 83       	std	Y+6, r25	; 0x06
    5282:	8d 83       	std	Y+5, r24	; 0x05
    5284:	3f c0       	rjmp	.+126    	; 0x5304 <MultipleTasksCar_RightAction+0x1e0>
	else if (__tmp > 65535)
    5286:	6f 81       	ldd	r22, Y+7	; 0x07
    5288:	78 85       	ldd	r23, Y+8	; 0x08
    528a:	89 85       	ldd	r24, Y+9	; 0x09
    528c:	9a 85       	ldd	r25, Y+10	; 0x0a
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	3f ef       	ldi	r19, 0xFF	; 255
    5292:	4f e7       	ldi	r20, 0x7F	; 127
    5294:	57 e4       	ldi	r21, 0x47	; 71
    5296:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    529a:	18 16       	cp	r1, r24
    529c:	4c f5       	brge	.+82     	; 0x52f0 <MultipleTasksCar_RightAction+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    529e:	6b 85       	ldd	r22, Y+11	; 0x0b
    52a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    52a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    52a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    52a6:	20 e0       	ldi	r18, 0x00	; 0
    52a8:	30 e0       	ldi	r19, 0x00	; 0
    52aa:	40 e2       	ldi	r20, 0x20	; 32
    52ac:	51 e4       	ldi	r21, 0x41	; 65
    52ae:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    52b2:	dc 01       	movw	r26, r24
    52b4:	cb 01       	movw	r24, r22
    52b6:	bc 01       	movw	r22, r24
    52b8:	cd 01       	movw	r24, r26
    52ba:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    52be:	dc 01       	movw	r26, r24
    52c0:	cb 01       	movw	r24, r22
    52c2:	9e 83       	std	Y+6, r25	; 0x06
    52c4:	8d 83       	std	Y+5, r24	; 0x05
    52c6:	0f c0       	rjmp	.+30     	; 0x52e6 <MultipleTasksCar_RightAction+0x1c2>
    52c8:	88 ec       	ldi	r24, 0xC8	; 200
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	9c 83       	std	Y+4, r25	; 0x04
    52ce:	8b 83       	std	Y+3, r24	; 0x03
    52d0:	8b 81       	ldd	r24, Y+3	; 0x03
    52d2:	9c 81       	ldd	r25, Y+4	; 0x04
    52d4:	01 97       	sbiw	r24, 0x01	; 1
    52d6:	f1 f7       	brne	.-4      	; 0x52d4 <MultipleTasksCar_RightAction+0x1b0>
    52d8:	9c 83       	std	Y+4, r25	; 0x04
    52da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52dc:	8d 81       	ldd	r24, Y+5	; 0x05
    52de:	9e 81       	ldd	r25, Y+6	; 0x06
    52e0:	01 97       	sbiw	r24, 0x01	; 1
    52e2:	9e 83       	std	Y+6, r25	; 0x06
    52e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52e6:	8d 81       	ldd	r24, Y+5	; 0x05
    52e8:	9e 81       	ldd	r25, Y+6	; 0x06
    52ea:	00 97       	sbiw	r24, 0x00	; 0
    52ec:	69 f7       	brne	.-38     	; 0x52c8 <MultipleTasksCar_RightAction+0x1a4>
    52ee:	14 c0       	rjmp	.+40     	; 0x5318 <MultipleTasksCar_RightAction+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52f0:	6f 81       	ldd	r22, Y+7	; 0x07
    52f2:	78 85       	ldd	r23, Y+8	; 0x08
    52f4:	89 85       	ldd	r24, Y+9	; 0x09
    52f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    52f8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    52fc:	dc 01       	movw	r26, r24
    52fe:	cb 01       	movw	r24, r22
    5300:	9e 83       	std	Y+6, r25	; 0x06
    5302:	8d 83       	std	Y+5, r24	; 0x05
    5304:	8d 81       	ldd	r24, Y+5	; 0x05
    5306:	9e 81       	ldd	r25, Y+6	; 0x06
    5308:	9a 83       	std	Y+2, r25	; 0x02
    530a:	89 83       	std	Y+1, r24	; 0x01
    530c:	89 81       	ldd	r24, Y+1	; 0x01
    530e:	9a 81       	ldd	r25, Y+2	; 0x02
    5310:	01 97       	sbiw	r24, 0x01	; 1
    5312:	f1 f7       	brne	.-4      	; 0x5310 <MultipleTasksCar_RightAction+0x1ec>
    5314:	9a 83       	std	Y+2, r25	; 0x02
    5316:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DFHVRL);    //for Three Quarter velocity
	DcMotor_VidRotate_Wheels1(STOP);
    5318:	80 e0       	ldi	r24, 0x00	; 0
    531a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    531e:	80 e0       	ldi	r24, 0x00	; 0
    5320:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
}
    5324:	6c 96       	adiw	r28, 0x1c	; 28
    5326:	0f b6       	in	r0, 0x3f	; 63
    5328:	f8 94       	cli
    532a:	de bf       	out	0x3e, r29	; 62
    532c:	0f be       	out	0x3f, r0	; 63
    532e:	cd bf       	out	0x3d, r28	; 61
    5330:	cf 91       	pop	r28
    5332:	df 91       	pop	r29
    5334:	08 95       	ret

00005336 <MultipleTasksCar_LeftAction>:
 Name        : MultipleTasksCar_LeftAction
 Input       : void
 Output      : void
 Description :
*/
void MultipleTasksCar_LeftAction()         {
    5336:	df 93       	push	r29
    5338:	cf 93       	push	r28
    533a:	cd b7       	in	r28, 0x3d	; 61
    533c:	de b7       	in	r29, 0x3e	; 62
    533e:	6c 97       	sbiw	r28, 0x1c	; 28
    5340:	0f b6       	in	r0, 0x3f	; 63
    5342:	f8 94       	cli
    5344:	de bf       	out	0x3e, r29	; 62
    5346:	0f be       	out	0x3f, r0	; 63
    5348:	cd bf       	out	0x3d, r28	; 61
	DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    534a:	82 e0       	ldi	r24, 0x02	; 2
    534c:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    5350:	82 e0       	ldi	r24, 0x02	; 2
    5352:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    5356:	80 e0       	ldi	r24, 0x00	; 0
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	a2 e0       	ldi	r26, 0x02	; 2
    535c:	b3 e4       	ldi	r27, 0x43	; 67
    535e:	89 8f       	std	Y+25, r24	; 0x19
    5360:	9a 8f       	std	Y+26, r25	; 0x1a
    5362:	ab 8f       	std	Y+27, r26	; 0x1b
    5364:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5366:	69 8d       	ldd	r22, Y+25	; 0x19
    5368:	7a 8d       	ldd	r23, Y+26	; 0x1a
    536a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    536c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    536e:	20 e0       	ldi	r18, 0x00	; 0
    5370:	30 e0       	ldi	r19, 0x00	; 0
    5372:	4a ef       	ldi	r20, 0xFA	; 250
    5374:	54 e4       	ldi	r21, 0x44	; 68
    5376:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    537a:	dc 01       	movw	r26, r24
    537c:	cb 01       	movw	r24, r22
    537e:	8d 8b       	std	Y+21, r24	; 0x15
    5380:	9e 8b       	std	Y+22, r25	; 0x16
    5382:	af 8b       	std	Y+23, r26	; 0x17
    5384:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5386:	6d 89       	ldd	r22, Y+21	; 0x15
    5388:	7e 89       	ldd	r23, Y+22	; 0x16
    538a:	8f 89       	ldd	r24, Y+23	; 0x17
    538c:	98 8d       	ldd	r25, Y+24	; 0x18
    538e:	20 e0       	ldi	r18, 0x00	; 0
    5390:	30 e0       	ldi	r19, 0x00	; 0
    5392:	40 e8       	ldi	r20, 0x80	; 128
    5394:	5f e3       	ldi	r21, 0x3F	; 63
    5396:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    539a:	88 23       	and	r24, r24
    539c:	2c f4       	brge	.+10     	; 0x53a8 <MultipleTasksCar_LeftAction+0x72>
		__ticks = 1;
    539e:	81 e0       	ldi	r24, 0x01	; 1
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	9c 8b       	std	Y+20, r25	; 0x14
    53a4:	8b 8b       	std	Y+19, r24	; 0x13
    53a6:	3f c0       	rjmp	.+126    	; 0x5426 <MultipleTasksCar_LeftAction+0xf0>
	else if (__tmp > 65535)
    53a8:	6d 89       	ldd	r22, Y+21	; 0x15
    53aa:	7e 89       	ldd	r23, Y+22	; 0x16
    53ac:	8f 89       	ldd	r24, Y+23	; 0x17
    53ae:	98 8d       	ldd	r25, Y+24	; 0x18
    53b0:	20 e0       	ldi	r18, 0x00	; 0
    53b2:	3f ef       	ldi	r19, 0xFF	; 255
    53b4:	4f e7       	ldi	r20, 0x7F	; 127
    53b6:	57 e4       	ldi	r21, 0x47	; 71
    53b8:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    53bc:	18 16       	cp	r1, r24
    53be:	4c f5       	brge	.+82     	; 0x5412 <MultipleTasksCar_LeftAction+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53c0:	69 8d       	ldd	r22, Y+25	; 0x19
    53c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53c8:	20 e0       	ldi	r18, 0x00	; 0
    53ca:	30 e0       	ldi	r19, 0x00	; 0
    53cc:	40 e2       	ldi	r20, 0x20	; 32
    53ce:	51 e4       	ldi	r21, 0x41	; 65
    53d0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    53d4:	dc 01       	movw	r26, r24
    53d6:	cb 01       	movw	r24, r22
    53d8:	bc 01       	movw	r22, r24
    53da:	cd 01       	movw	r24, r26
    53dc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    53e0:	dc 01       	movw	r26, r24
    53e2:	cb 01       	movw	r24, r22
    53e4:	9c 8b       	std	Y+20, r25	; 0x14
    53e6:	8b 8b       	std	Y+19, r24	; 0x13
    53e8:	0f c0       	rjmp	.+30     	; 0x5408 <MultipleTasksCar_LeftAction+0xd2>
    53ea:	88 ec       	ldi	r24, 0xC8	; 200
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	9a 8b       	std	Y+18, r25	; 0x12
    53f0:	89 8b       	std	Y+17, r24	; 0x11
    53f2:	89 89       	ldd	r24, Y+17	; 0x11
    53f4:	9a 89       	ldd	r25, Y+18	; 0x12
    53f6:	01 97       	sbiw	r24, 0x01	; 1
    53f8:	f1 f7       	brne	.-4      	; 0x53f6 <MultipleTasksCar_LeftAction+0xc0>
    53fa:	9a 8b       	std	Y+18, r25	; 0x12
    53fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53fe:	8b 89       	ldd	r24, Y+19	; 0x13
    5400:	9c 89       	ldd	r25, Y+20	; 0x14
    5402:	01 97       	sbiw	r24, 0x01	; 1
    5404:	9c 8b       	std	Y+20, r25	; 0x14
    5406:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5408:	8b 89       	ldd	r24, Y+19	; 0x13
    540a:	9c 89       	ldd	r25, Y+20	; 0x14
    540c:	00 97       	sbiw	r24, 0x00	; 0
    540e:	69 f7       	brne	.-38     	; 0x53ea <MultipleTasksCar_LeftAction+0xb4>
    5410:	14 c0       	rjmp	.+40     	; 0x543a <MultipleTasksCar_LeftAction+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5412:	6d 89       	ldd	r22, Y+21	; 0x15
    5414:	7e 89       	ldd	r23, Y+22	; 0x16
    5416:	8f 89       	ldd	r24, Y+23	; 0x17
    5418:	98 8d       	ldd	r25, Y+24	; 0x18
    541a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    541e:	dc 01       	movw	r26, r24
    5420:	cb 01       	movw	r24, r22
    5422:	9c 8b       	std	Y+20, r25	; 0x14
    5424:	8b 8b       	std	Y+19, r24	; 0x13
    5426:	8b 89       	ldd	r24, Y+19	; 0x13
    5428:	9c 89       	ldd	r25, Y+20	; 0x14
    542a:	98 8b       	std	Y+16, r25	; 0x10
    542c:	8f 87       	std	Y+15, r24	; 0x0f
    542e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5430:	98 89       	ldd	r25, Y+16	; 0x10
    5432:	01 97       	sbiw	r24, 0x01	; 1
    5434:	f1 f7       	brne	.-4      	; 0x5432 <MultipleTasksCar_LeftAction+0xfc>
    5436:	98 8b       	std	Y+16, r25	; 0x10
    5438:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(DFHVUD);    //for Three Quarter velocity
	DcMotor_VidRotate_Wheels1(CLK_WISE);
    543a:	81 e0       	ldi	r24, 0x01	; 1
    543c:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    5440:	82 e0       	ldi	r24, 0x02	; 2
    5442:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    5446:	80 e0       	ldi	r24, 0x00	; 0
    5448:	90 ec       	ldi	r25, 0xC0	; 192
    544a:	a3 e2       	ldi	r26, 0x23	; 35
    544c:	b4 e4       	ldi	r27, 0x44	; 68
    544e:	8b 87       	std	Y+11, r24	; 0x0b
    5450:	9c 87       	std	Y+12, r25	; 0x0c
    5452:	ad 87       	std	Y+13, r26	; 0x0d
    5454:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5456:	6b 85       	ldd	r22, Y+11	; 0x0b
    5458:	7c 85       	ldd	r23, Y+12	; 0x0c
    545a:	8d 85       	ldd	r24, Y+13	; 0x0d
    545c:	9e 85       	ldd	r25, Y+14	; 0x0e
    545e:	20 e0       	ldi	r18, 0x00	; 0
    5460:	30 e0       	ldi	r19, 0x00	; 0
    5462:	4a ef       	ldi	r20, 0xFA	; 250
    5464:	54 e4       	ldi	r21, 0x44	; 68
    5466:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    546a:	dc 01       	movw	r26, r24
    546c:	cb 01       	movw	r24, r22
    546e:	8f 83       	std	Y+7, r24	; 0x07
    5470:	98 87       	std	Y+8, r25	; 0x08
    5472:	a9 87       	std	Y+9, r26	; 0x09
    5474:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5476:	6f 81       	ldd	r22, Y+7	; 0x07
    5478:	78 85       	ldd	r23, Y+8	; 0x08
    547a:	89 85       	ldd	r24, Y+9	; 0x09
    547c:	9a 85       	ldd	r25, Y+10	; 0x0a
    547e:	20 e0       	ldi	r18, 0x00	; 0
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	40 e8       	ldi	r20, 0x80	; 128
    5484:	5f e3       	ldi	r21, 0x3F	; 63
    5486:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    548a:	88 23       	and	r24, r24
    548c:	2c f4       	brge	.+10     	; 0x5498 <MultipleTasksCar_LeftAction+0x162>
		__ticks = 1;
    548e:	81 e0       	ldi	r24, 0x01	; 1
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	9e 83       	std	Y+6, r25	; 0x06
    5494:	8d 83       	std	Y+5, r24	; 0x05
    5496:	3f c0       	rjmp	.+126    	; 0x5516 <MultipleTasksCar_LeftAction+0x1e0>
	else if (__tmp > 65535)
    5498:	6f 81       	ldd	r22, Y+7	; 0x07
    549a:	78 85       	ldd	r23, Y+8	; 0x08
    549c:	89 85       	ldd	r24, Y+9	; 0x09
    549e:	9a 85       	ldd	r25, Y+10	; 0x0a
    54a0:	20 e0       	ldi	r18, 0x00	; 0
    54a2:	3f ef       	ldi	r19, 0xFF	; 255
    54a4:	4f e7       	ldi	r20, 0x7F	; 127
    54a6:	57 e4       	ldi	r21, 0x47	; 71
    54a8:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    54ac:	18 16       	cp	r1, r24
    54ae:	4c f5       	brge	.+82     	; 0x5502 <MultipleTasksCar_LeftAction+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    54b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    54b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    54b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    54b8:	20 e0       	ldi	r18, 0x00	; 0
    54ba:	30 e0       	ldi	r19, 0x00	; 0
    54bc:	40 e2       	ldi	r20, 0x20	; 32
    54be:	51 e4       	ldi	r21, 0x41	; 65
    54c0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    54c4:	dc 01       	movw	r26, r24
    54c6:	cb 01       	movw	r24, r22
    54c8:	bc 01       	movw	r22, r24
    54ca:	cd 01       	movw	r24, r26
    54cc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    54d0:	dc 01       	movw	r26, r24
    54d2:	cb 01       	movw	r24, r22
    54d4:	9e 83       	std	Y+6, r25	; 0x06
    54d6:	8d 83       	std	Y+5, r24	; 0x05
    54d8:	0f c0       	rjmp	.+30     	; 0x54f8 <MultipleTasksCar_LeftAction+0x1c2>
    54da:	88 ec       	ldi	r24, 0xC8	; 200
    54dc:	90 e0       	ldi	r25, 0x00	; 0
    54de:	9c 83       	std	Y+4, r25	; 0x04
    54e0:	8b 83       	std	Y+3, r24	; 0x03
    54e2:	8b 81       	ldd	r24, Y+3	; 0x03
    54e4:	9c 81       	ldd	r25, Y+4	; 0x04
    54e6:	01 97       	sbiw	r24, 0x01	; 1
    54e8:	f1 f7       	brne	.-4      	; 0x54e6 <MultipleTasksCar_LeftAction+0x1b0>
    54ea:	9c 83       	std	Y+4, r25	; 0x04
    54ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54ee:	8d 81       	ldd	r24, Y+5	; 0x05
    54f0:	9e 81       	ldd	r25, Y+6	; 0x06
    54f2:	01 97       	sbiw	r24, 0x01	; 1
    54f4:	9e 83       	std	Y+6, r25	; 0x06
    54f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54f8:	8d 81       	ldd	r24, Y+5	; 0x05
    54fa:	9e 81       	ldd	r25, Y+6	; 0x06
    54fc:	00 97       	sbiw	r24, 0x00	; 0
    54fe:	69 f7       	brne	.-38     	; 0x54da <MultipleTasksCar_LeftAction+0x1a4>
    5500:	14 c0       	rjmp	.+40     	; 0x552a <MultipleTasksCar_LeftAction+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5502:	6f 81       	ldd	r22, Y+7	; 0x07
    5504:	78 85       	ldd	r23, Y+8	; 0x08
    5506:	89 85       	ldd	r24, Y+9	; 0x09
    5508:	9a 85       	ldd	r25, Y+10	; 0x0a
    550a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    550e:	dc 01       	movw	r26, r24
    5510:	cb 01       	movw	r24, r22
    5512:	9e 83       	std	Y+6, r25	; 0x06
    5514:	8d 83       	std	Y+5, r24	; 0x05
    5516:	8d 81       	ldd	r24, Y+5	; 0x05
    5518:	9e 81       	ldd	r25, Y+6	; 0x06
    551a:	9a 83       	std	Y+2, r25	; 0x02
    551c:	89 83       	std	Y+1, r24	; 0x01
    551e:	89 81       	ldd	r24, Y+1	; 0x01
    5520:	9a 81       	ldd	r25, Y+2	; 0x02
    5522:	01 97       	sbiw	r24, 0x01	; 1
    5524:	f1 f7       	brne	.-4      	; 0x5522 <MultipleTasksCar_LeftAction+0x1ec>
    5526:	9a 83       	std	Y+2, r25	; 0x02
    5528:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DFHVRL+25);    //for Half velocity
	DcMotor_VidRotate_Wheels1(STOP);
    552a:	80 e0       	ldi	r24, 0x00	; 0
    552c:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    5530:	80 e0       	ldi	r24, 0x00	; 0
    5532:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
}
    5536:	6c 96       	adiw	r28, 0x1c	; 28
    5538:	0f b6       	in	r0, 0x3f	; 63
    553a:	f8 94       	cli
    553c:	de bf       	out	0x3e, r29	; 62
    553e:	0f be       	out	0x3f, r0	; 63
    5540:	cd bf       	out	0x3d, r28	; 61
    5542:	cf 91       	pop	r28
    5544:	df 91       	pop	r29
    5546:	08 95       	ret

00005548 <MultipleTasksCar_TurnBack>:
 Name        : MultipleTasksCar_TurnBack
 Input       : void
 Output      : void
 Description :
*/
void MultipleTasksCar_TurnBack()         {
    5548:	df 93       	push	r29
    554a:	cf 93       	push	r28
    554c:	cd b7       	in	r28, 0x3d	; 61
    554e:	de b7       	in	r29, 0x3e	; 62
    5550:	2e 97       	sbiw	r28, 0x0e	; 14
    5552:	0f b6       	in	r0, 0x3f	; 63
    5554:	f8 94       	cli
    5556:	de bf       	out	0x3e, r29	; 62
    5558:	0f be       	out	0x3f, r0	; 63
    555a:	cd bf       	out	0x3d, r28	; 61
	DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    555c:	82 e0       	ldi	r24, 0x02	; 2
    555e:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(CLK_WISE);
    5562:	81 e0       	ldi	r24, 0x01	; 1
    5564:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    5568:	80 e0       	ldi	r24, 0x00	; 0
    556a:	90 e2       	ldi	r25, 0x20	; 32
    556c:	a3 ea       	ldi	r26, 0xA3	; 163
    556e:	b4 e4       	ldi	r27, 0x44	; 68
    5570:	8b 87       	std	Y+11, r24	; 0x0b
    5572:	9c 87       	std	Y+12, r25	; 0x0c
    5574:	ad 87       	std	Y+13, r26	; 0x0d
    5576:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5578:	6b 85       	ldd	r22, Y+11	; 0x0b
    557a:	7c 85       	ldd	r23, Y+12	; 0x0c
    557c:	8d 85       	ldd	r24, Y+13	; 0x0d
    557e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5580:	20 e0       	ldi	r18, 0x00	; 0
    5582:	30 e0       	ldi	r19, 0x00	; 0
    5584:	4a ef       	ldi	r20, 0xFA	; 250
    5586:	54 e4       	ldi	r21, 0x44	; 68
    5588:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    558c:	dc 01       	movw	r26, r24
    558e:	cb 01       	movw	r24, r22
    5590:	8f 83       	std	Y+7, r24	; 0x07
    5592:	98 87       	std	Y+8, r25	; 0x08
    5594:	a9 87       	std	Y+9, r26	; 0x09
    5596:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5598:	6f 81       	ldd	r22, Y+7	; 0x07
    559a:	78 85       	ldd	r23, Y+8	; 0x08
    559c:	89 85       	ldd	r24, Y+9	; 0x09
    559e:	9a 85       	ldd	r25, Y+10	; 0x0a
    55a0:	20 e0       	ldi	r18, 0x00	; 0
    55a2:	30 e0       	ldi	r19, 0x00	; 0
    55a4:	40 e8       	ldi	r20, 0x80	; 128
    55a6:	5f e3       	ldi	r21, 0x3F	; 63
    55a8:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    55ac:	88 23       	and	r24, r24
    55ae:	2c f4       	brge	.+10     	; 0x55ba <MultipleTasksCar_TurnBack+0x72>
		__ticks = 1;
    55b0:	81 e0       	ldi	r24, 0x01	; 1
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	9e 83       	std	Y+6, r25	; 0x06
    55b6:	8d 83       	std	Y+5, r24	; 0x05
    55b8:	3f c0       	rjmp	.+126    	; 0x5638 <MultipleTasksCar_TurnBack+0xf0>
	else if (__tmp > 65535)
    55ba:	6f 81       	ldd	r22, Y+7	; 0x07
    55bc:	78 85       	ldd	r23, Y+8	; 0x08
    55be:	89 85       	ldd	r24, Y+9	; 0x09
    55c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    55c2:	20 e0       	ldi	r18, 0x00	; 0
    55c4:	3f ef       	ldi	r19, 0xFF	; 255
    55c6:	4f e7       	ldi	r20, 0x7F	; 127
    55c8:	57 e4       	ldi	r21, 0x47	; 71
    55ca:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    55ce:	18 16       	cp	r1, r24
    55d0:	4c f5       	brge	.+82     	; 0x5624 <MultipleTasksCar_TurnBack+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    55d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    55d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    55d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    55da:	20 e0       	ldi	r18, 0x00	; 0
    55dc:	30 e0       	ldi	r19, 0x00	; 0
    55de:	40 e2       	ldi	r20, 0x20	; 32
    55e0:	51 e4       	ldi	r21, 0x41	; 65
    55e2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    55e6:	dc 01       	movw	r26, r24
    55e8:	cb 01       	movw	r24, r22
    55ea:	bc 01       	movw	r22, r24
    55ec:	cd 01       	movw	r24, r26
    55ee:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    55f2:	dc 01       	movw	r26, r24
    55f4:	cb 01       	movw	r24, r22
    55f6:	9e 83       	std	Y+6, r25	; 0x06
    55f8:	8d 83       	std	Y+5, r24	; 0x05
    55fa:	0f c0       	rjmp	.+30     	; 0x561a <MultipleTasksCar_TurnBack+0xd2>
    55fc:	88 ec       	ldi	r24, 0xC8	; 200
    55fe:	90 e0       	ldi	r25, 0x00	; 0
    5600:	9c 83       	std	Y+4, r25	; 0x04
    5602:	8b 83       	std	Y+3, r24	; 0x03
    5604:	8b 81       	ldd	r24, Y+3	; 0x03
    5606:	9c 81       	ldd	r25, Y+4	; 0x04
    5608:	01 97       	sbiw	r24, 0x01	; 1
    560a:	f1 f7       	brne	.-4      	; 0x5608 <MultipleTasksCar_TurnBack+0xc0>
    560c:	9c 83       	std	Y+4, r25	; 0x04
    560e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5610:	8d 81       	ldd	r24, Y+5	; 0x05
    5612:	9e 81       	ldd	r25, Y+6	; 0x06
    5614:	01 97       	sbiw	r24, 0x01	; 1
    5616:	9e 83       	std	Y+6, r25	; 0x06
    5618:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    561a:	8d 81       	ldd	r24, Y+5	; 0x05
    561c:	9e 81       	ldd	r25, Y+6	; 0x06
    561e:	00 97       	sbiw	r24, 0x00	; 0
    5620:	69 f7       	brne	.-38     	; 0x55fc <MultipleTasksCar_TurnBack+0xb4>
    5622:	14 c0       	rjmp	.+40     	; 0x564c <MultipleTasksCar_TurnBack+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5624:	6f 81       	ldd	r22, Y+7	; 0x07
    5626:	78 85       	ldd	r23, Y+8	; 0x08
    5628:	89 85       	ldd	r24, Y+9	; 0x09
    562a:	9a 85       	ldd	r25, Y+10	; 0x0a
    562c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5630:	dc 01       	movw	r26, r24
    5632:	cb 01       	movw	r24, r22
    5634:	9e 83       	std	Y+6, r25	; 0x06
    5636:	8d 83       	std	Y+5, r24	; 0x05
    5638:	8d 81       	ldd	r24, Y+5	; 0x05
    563a:	9e 81       	ldd	r25, Y+6	; 0x06
    563c:	9a 83       	std	Y+2, r25	; 0x02
    563e:	89 83       	std	Y+1, r24	; 0x01
    5640:	89 81       	ldd	r24, Y+1	; 0x01
    5642:	9a 81       	ldd	r25, Y+2	; 0x02
    5644:	01 97       	sbiw	r24, 0x01	; 1
    5646:	f1 f7       	brne	.-4      	; 0x5644 <MultipleTasksCar_TurnBack+0xfc>
    5648:	9a 83       	std	Y+2, r25	; 0x02
    564a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DFHVBACK);    //for Three Quarter velocity
	DcMotor_VidRotate_Wheels1(STOP);
    564c:	80 e0       	ldi	r24, 0x00	; 0
    564e:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    5652:	80 e0       	ldi	r24, 0x00	; 0
    5654:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
}
    5658:	2e 96       	adiw	r28, 0x0e	; 14
    565a:	0f b6       	in	r0, 0x3f	; 63
    565c:	f8 94       	cli
    565e:	de bf       	out	0x3e, r29	; 62
    5660:	0f be       	out	0x3f, r0	; 63
    5662:	cd bf       	out	0x3d, r28	; 61
    5664:	cf 91       	pop	r28
    5666:	df 91       	pop	r29
    5668:	08 95       	ret

0000566a <MultipleTasksCar_StopActionDelayed>:
 Name        : MultipleTasksCar_StopActionDelayed
 Input       : void
 Output      : void
 Description :
*/
void MultipleTasksCar_StopActionDelayed()  {
    566a:	df 93       	push	r29
    566c:	cf 93       	push	r28
    566e:	cd b7       	in	r28, 0x3d	; 61
    5670:	de b7       	in	r29, 0x3e	; 62
    5672:	2e 97       	sbiw	r28, 0x0e	; 14
    5674:	0f b6       	in	r0, 0x3f	; 63
    5676:	f8 94       	cli
    5678:	de bf       	out	0x3e, r29	; 62
    567a:	0f be       	out	0x3f, r0	; 63
    567c:	cd bf       	out	0x3d, r28	; 61
	DcMotor_VidRotate_Wheels1(STOP);
    567e:	80 e0       	ldi	r24, 0x00	; 0
    5680:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    5684:	80 e0       	ldi	r24, 0x00	; 0
    5686:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <DcMotor_VidRotate_Wheels2>
    568a:	80 e0       	ldi	r24, 0x00	; 0
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	a8 e4       	ldi	r26, 0x48	; 72
    5690:	b3 e4       	ldi	r27, 0x43	; 67
    5692:	8b 87       	std	Y+11, r24	; 0x0b
    5694:	9c 87       	std	Y+12, r25	; 0x0c
    5696:	ad 87       	std	Y+13, r26	; 0x0d
    5698:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    569a:	6b 85       	ldd	r22, Y+11	; 0x0b
    569c:	7c 85       	ldd	r23, Y+12	; 0x0c
    569e:	8d 85       	ldd	r24, Y+13	; 0x0d
    56a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    56a2:	20 e0       	ldi	r18, 0x00	; 0
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	4a ef       	ldi	r20, 0xFA	; 250
    56a8:	54 e4       	ldi	r21, 0x44	; 68
    56aa:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    56ae:	dc 01       	movw	r26, r24
    56b0:	cb 01       	movw	r24, r22
    56b2:	8f 83       	std	Y+7, r24	; 0x07
    56b4:	98 87       	std	Y+8, r25	; 0x08
    56b6:	a9 87       	std	Y+9, r26	; 0x09
    56b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56ba:	6f 81       	ldd	r22, Y+7	; 0x07
    56bc:	78 85       	ldd	r23, Y+8	; 0x08
    56be:	89 85       	ldd	r24, Y+9	; 0x09
    56c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    56c2:	20 e0       	ldi	r18, 0x00	; 0
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	40 e8       	ldi	r20, 0x80	; 128
    56c8:	5f e3       	ldi	r21, 0x3F	; 63
    56ca:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    56ce:	88 23       	and	r24, r24
    56d0:	2c f4       	brge	.+10     	; 0x56dc <MultipleTasksCar_StopActionDelayed+0x72>
		__ticks = 1;
    56d2:	81 e0       	ldi	r24, 0x01	; 1
    56d4:	90 e0       	ldi	r25, 0x00	; 0
    56d6:	9e 83       	std	Y+6, r25	; 0x06
    56d8:	8d 83       	std	Y+5, r24	; 0x05
    56da:	3f c0       	rjmp	.+126    	; 0x575a <MultipleTasksCar_StopActionDelayed+0xf0>
	else if (__tmp > 65535)
    56dc:	6f 81       	ldd	r22, Y+7	; 0x07
    56de:	78 85       	ldd	r23, Y+8	; 0x08
    56e0:	89 85       	ldd	r24, Y+9	; 0x09
    56e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56e4:	20 e0       	ldi	r18, 0x00	; 0
    56e6:	3f ef       	ldi	r19, 0xFF	; 255
    56e8:	4f e7       	ldi	r20, 0x7F	; 127
    56ea:	57 e4       	ldi	r21, 0x47	; 71
    56ec:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    56f0:	18 16       	cp	r1, r24
    56f2:	4c f5       	brge	.+82     	; 0x5746 <MultipleTasksCar_StopActionDelayed+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    56f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    56f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    56fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    56fc:	20 e0       	ldi	r18, 0x00	; 0
    56fe:	30 e0       	ldi	r19, 0x00	; 0
    5700:	40 e2       	ldi	r20, 0x20	; 32
    5702:	51 e4       	ldi	r21, 0x41	; 65
    5704:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5708:	dc 01       	movw	r26, r24
    570a:	cb 01       	movw	r24, r22
    570c:	bc 01       	movw	r22, r24
    570e:	cd 01       	movw	r24, r26
    5710:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5714:	dc 01       	movw	r26, r24
    5716:	cb 01       	movw	r24, r22
    5718:	9e 83       	std	Y+6, r25	; 0x06
    571a:	8d 83       	std	Y+5, r24	; 0x05
    571c:	0f c0       	rjmp	.+30     	; 0x573c <MultipleTasksCar_StopActionDelayed+0xd2>
    571e:	88 ec       	ldi	r24, 0xC8	; 200
    5720:	90 e0       	ldi	r25, 0x00	; 0
    5722:	9c 83       	std	Y+4, r25	; 0x04
    5724:	8b 83       	std	Y+3, r24	; 0x03
    5726:	8b 81       	ldd	r24, Y+3	; 0x03
    5728:	9c 81       	ldd	r25, Y+4	; 0x04
    572a:	01 97       	sbiw	r24, 0x01	; 1
    572c:	f1 f7       	brne	.-4      	; 0x572a <MultipleTasksCar_StopActionDelayed+0xc0>
    572e:	9c 83       	std	Y+4, r25	; 0x04
    5730:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5732:	8d 81       	ldd	r24, Y+5	; 0x05
    5734:	9e 81       	ldd	r25, Y+6	; 0x06
    5736:	01 97       	sbiw	r24, 0x01	; 1
    5738:	9e 83       	std	Y+6, r25	; 0x06
    573a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    573c:	8d 81       	ldd	r24, Y+5	; 0x05
    573e:	9e 81       	ldd	r25, Y+6	; 0x06
    5740:	00 97       	sbiw	r24, 0x00	; 0
    5742:	69 f7       	brne	.-38     	; 0x571e <MultipleTasksCar_StopActionDelayed+0xb4>
    5744:	14 c0       	rjmp	.+40     	; 0x576e <MultipleTasksCar_StopActionDelayed+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5746:	6f 81       	ldd	r22, Y+7	; 0x07
    5748:	78 85       	ldd	r23, Y+8	; 0x08
    574a:	89 85       	ldd	r24, Y+9	; 0x09
    574c:	9a 85       	ldd	r25, Y+10	; 0x0a
    574e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5752:	dc 01       	movw	r26, r24
    5754:	cb 01       	movw	r24, r22
    5756:	9e 83       	std	Y+6, r25	; 0x06
    5758:	8d 83       	std	Y+5, r24	; 0x05
    575a:	8d 81       	ldd	r24, Y+5	; 0x05
    575c:	9e 81       	ldd	r25, Y+6	; 0x06
    575e:	9a 83       	std	Y+2, r25	; 0x02
    5760:	89 83       	std	Y+1, r24	; 0x01
    5762:	89 81       	ldd	r24, Y+1	; 0x01
    5764:	9a 81       	ldd	r25, Y+2	; 0x02
    5766:	01 97       	sbiw	r24, 0x01	; 1
    5768:	f1 f7       	brne	.-4      	; 0x5766 <MultipleTasksCar_StopActionDelayed+0xfc>
    576a:	9a 83       	std	Y+2, r25	; 0x02
    576c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    576e:	2e 96       	adiw	r28, 0x0e	; 14
    5770:	0f b6       	in	r0, 0x3f	; 63
    5772:	f8 94       	cli
    5774:	de bf       	out	0x3e, r29	; 62
    5776:	0f be       	out	0x3f, r0	; 63
    5778:	cd bf       	out	0x3d, r28	; 61
    577a:	cf 91       	pop	r28
    577c:	df 91       	pop	r29
    577e:	08 95       	ret

00005780 <main>:
 ******************************************************************************/

#include "APP_DRIVER/MultipleTasksCar_Interface.h"
/* steps : 1 ) determine velocity 2) determine mode */

void main (){
    5780:	df 93       	push	r29
    5782:	cf 93       	push	r28
    5784:	00 d0       	rcall	.+0      	; 0x5786 <main+0x6>
    5786:	00 d0       	rcall	.+0      	; 0x5788 <main+0x8>
    5788:	cd b7       	in	r28, 0x3d	; 61
    578a:	de b7       	in	r29, 0x3e	; 62


	// initializiation function of car
	MultipleTasksCar_VidInit();
    578c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <MultipleTasksCar_VidInit>

	 // to set the mode & velocity of the car
	u8 mode , velocity ;

	while (1){
		velocity = MultipleTasksCar_GetMode() ;
    5790:	0e 94 0b 21 	call	0x4216	; 0x4216 <MultipleTasksCar_GetMode>
    5794:	89 83       	std	Y+1, r24	; 0x01

		if (velocity <= '4' && velocity >= '1')
    5796:	89 81       	ldd	r24, Y+1	; 0x01
    5798:	85 33       	cpi	r24, 0x35	; 53
    579a:	d0 f7       	brcc	.-12     	; 0x5790 <main+0x10>
    579c:	89 81       	ldd	r24, Y+1	; 0x01
    579e:	81 33       	cpi	r24, 0x31	; 49
    57a0:	b8 f3       	brcs	.-18     	; 0x5790 <main+0x10>
			break ;
	}//end while (1)

	MultipleTasksCar_SetCarVelocity(velocity) ;
    57a2:	89 81       	ldd	r24, Y+1	; 0x01
    57a4:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <MultipleTasksCar_SetCarVelocity>

	// to select mode
	while (1){
		mode = MultipleTasksCar_GetMode() ;
    57a8:	0e 94 0b 21 	call	0x4216	; 0x4216 <MultipleTasksCar_GetMode>
    57ac:	8a 83       	std	Y+2, r24	; 0x02

		if (mode <= '4' && mode >= '1')
    57ae:	8a 81       	ldd	r24, Y+2	; 0x02
    57b0:	85 33       	cpi	r24, 0x35	; 53
    57b2:	d0 f7       	brcc	.-12     	; 0x57a8 <main+0x28>
    57b4:	8a 81       	ldd	r24, Y+2	; 0x02
    57b6:	81 33       	cpi	r24, 0x31	; 49
    57b8:	b8 f3       	brcs	.-18     	; 0x57a8 <main+0x28>
			break ;
	}//end while (1)

	// to implemnet ur target mode
	while (1){
		switch (mode){
    57ba:	8a 81       	ldd	r24, Y+2	; 0x02
    57bc:	28 2f       	mov	r18, r24
    57be:	30 e0       	ldi	r19, 0x00	; 0
    57c0:	3c 83       	std	Y+4, r19	; 0x04
    57c2:	2b 83       	std	Y+3, r18	; 0x03
    57c4:	8b 81       	ldd	r24, Y+3	; 0x03
    57c6:	9c 81       	ldd	r25, Y+4	; 0x04
    57c8:	82 33       	cpi	r24, 0x32	; 50
    57ca:	91 05       	cpc	r25, r1
    57cc:	c9 f0       	breq	.+50     	; 0x5800 <main+0x80>
    57ce:	2b 81       	ldd	r18, Y+3	; 0x03
    57d0:	3c 81       	ldd	r19, Y+4	; 0x04
    57d2:	23 33       	cpi	r18, 0x33	; 51
    57d4:	31 05       	cpc	r19, r1
    57d6:	34 f4       	brge	.+12     	; 0x57e4 <main+0x64>
    57d8:	8b 81       	ldd	r24, Y+3	; 0x03
    57da:	9c 81       	ldd	r25, Y+4	; 0x04
    57dc:	81 33       	cpi	r24, 0x31	; 49
    57de:	91 05       	cpc	r25, r1
    57e0:	61 f0       	breq	.+24     	; 0x57fa <main+0x7a>
    57e2:	eb cf       	rjmp	.-42     	; 0x57ba <main+0x3a>
    57e4:	2b 81       	ldd	r18, Y+3	; 0x03
    57e6:	3c 81       	ldd	r19, Y+4	; 0x04
    57e8:	23 33       	cpi	r18, 0x33	; 51
    57ea:	31 05       	cpc	r19, r1
    57ec:	61 f0       	breq	.+24     	; 0x5806 <main+0x86>
    57ee:	8b 81       	ldd	r24, Y+3	; 0x03
    57f0:	9c 81       	ldd	r25, Y+4	; 0x04
    57f2:	84 33       	cpi	r24, 0x34	; 52
    57f4:	91 05       	cpc	r25, r1
    57f6:	51 f0       	breq	.+20     	; 0x580c <main+0x8c>
    57f8:	e0 cf       	rjmp	.-64     	; 0x57ba <main+0x3a>
		case '1' :  MultipleTasksCar_GetDirections() ;          break ;
    57fa:	0e 94 a8 20 	call	0x4150	; 0x4150 <MultipleTasksCar_GetDirections>
    57fe:	dd cf       	rjmp	.-70     	; 0x57ba <main+0x3a>
		case '2' :  MultipleTasksCar_LineFollower()  ;          break ;
    5800:	0e 94 14 21 	call	0x4228	; 0x4228 <MultipleTasksCar_LineFollower>
    5804:	da cf       	rjmp	.-76     	; 0x57ba <main+0x3a>
		case '3' :  MultipleTasksCar_UltraSonic()    ;          break ;
    5806:	0e 94 55 21 	call	0x42aa	; 0x42aa <MultipleTasksCar_UltraSonic>
    580a:	d7 cf       	rjmp	.-82     	; 0x57ba <main+0x3a>
		case '4' :  MultipleTasksCar_MapLine()       ;          break ;
    580c:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <MultipleTasksCar_MapLine>
    5810:	d4 cf       	rjmp	.-88     	; 0x57ba <main+0x3a>

00005812 <__udivmodhi4>:
    5812:	aa 1b       	sub	r26, r26
    5814:	bb 1b       	sub	r27, r27
    5816:	51 e1       	ldi	r21, 0x11	; 17
    5818:	07 c0       	rjmp	.+14     	; 0x5828 <__udivmodhi4_ep>

0000581a <__udivmodhi4_loop>:
    581a:	aa 1f       	adc	r26, r26
    581c:	bb 1f       	adc	r27, r27
    581e:	a6 17       	cp	r26, r22
    5820:	b7 07       	cpc	r27, r23
    5822:	10 f0       	brcs	.+4      	; 0x5828 <__udivmodhi4_ep>
    5824:	a6 1b       	sub	r26, r22
    5826:	b7 0b       	sbc	r27, r23

00005828 <__udivmodhi4_ep>:
    5828:	88 1f       	adc	r24, r24
    582a:	99 1f       	adc	r25, r25
    582c:	5a 95       	dec	r21
    582e:	a9 f7       	brne	.-22     	; 0x581a <__udivmodhi4_loop>
    5830:	80 95       	com	r24
    5832:	90 95       	com	r25
    5834:	bc 01       	movw	r22, r24
    5836:	cd 01       	movw	r24, r26
    5838:	08 95       	ret

0000583a <__prologue_saves__>:
    583a:	2f 92       	push	r2
    583c:	3f 92       	push	r3
    583e:	4f 92       	push	r4
    5840:	5f 92       	push	r5
    5842:	6f 92       	push	r6
    5844:	7f 92       	push	r7
    5846:	8f 92       	push	r8
    5848:	9f 92       	push	r9
    584a:	af 92       	push	r10
    584c:	bf 92       	push	r11
    584e:	cf 92       	push	r12
    5850:	df 92       	push	r13
    5852:	ef 92       	push	r14
    5854:	ff 92       	push	r15
    5856:	0f 93       	push	r16
    5858:	1f 93       	push	r17
    585a:	cf 93       	push	r28
    585c:	df 93       	push	r29
    585e:	cd b7       	in	r28, 0x3d	; 61
    5860:	de b7       	in	r29, 0x3e	; 62
    5862:	ca 1b       	sub	r28, r26
    5864:	db 0b       	sbc	r29, r27
    5866:	0f b6       	in	r0, 0x3f	; 63
    5868:	f8 94       	cli
    586a:	de bf       	out	0x3e, r29	; 62
    586c:	0f be       	out	0x3f, r0	; 63
    586e:	cd bf       	out	0x3d, r28	; 61
    5870:	09 94       	ijmp

00005872 <__epilogue_restores__>:
    5872:	2a 88       	ldd	r2, Y+18	; 0x12
    5874:	39 88       	ldd	r3, Y+17	; 0x11
    5876:	48 88       	ldd	r4, Y+16	; 0x10
    5878:	5f 84       	ldd	r5, Y+15	; 0x0f
    587a:	6e 84       	ldd	r6, Y+14	; 0x0e
    587c:	7d 84       	ldd	r7, Y+13	; 0x0d
    587e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5880:	9b 84       	ldd	r9, Y+11	; 0x0b
    5882:	aa 84       	ldd	r10, Y+10	; 0x0a
    5884:	b9 84       	ldd	r11, Y+9	; 0x09
    5886:	c8 84       	ldd	r12, Y+8	; 0x08
    5888:	df 80       	ldd	r13, Y+7	; 0x07
    588a:	ee 80       	ldd	r14, Y+6	; 0x06
    588c:	fd 80       	ldd	r15, Y+5	; 0x05
    588e:	0c 81       	ldd	r16, Y+4	; 0x04
    5890:	1b 81       	ldd	r17, Y+3	; 0x03
    5892:	aa 81       	ldd	r26, Y+2	; 0x02
    5894:	b9 81       	ldd	r27, Y+1	; 0x01
    5896:	ce 0f       	add	r28, r30
    5898:	d1 1d       	adc	r29, r1
    589a:	0f b6       	in	r0, 0x3f	; 63
    589c:	f8 94       	cli
    589e:	de bf       	out	0x3e, r29	; 62
    58a0:	0f be       	out	0x3f, r0	; 63
    58a2:	cd bf       	out	0x3d, r28	; 61
    58a4:	ed 01       	movw	r28, r26
    58a6:	08 95       	ret

000058a8 <_exit>:
    58a8:	f8 94       	cli

000058aa <__stop_program>:
    58aa:	ff cf       	rjmp	.-2      	; 0x58aa <__stop_program>
